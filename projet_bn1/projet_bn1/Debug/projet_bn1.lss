
AVRASM ver. 2.2.7  D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm Sat Dec 14 08:11:04 2019

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16adef.inc'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(52): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\io.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(54): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\uart.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(56): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\adc.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(58): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\timer.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\timer.asm(6): warning: Register r24 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(58): 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\timer.asm' included form here
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(60): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\spi.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\spi.asm(3): warning: Register r26 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(60): 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\spi.asm' included form here
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\spi.asm(4): warning: Register r27 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(60): 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\spi.asm' included form here
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(62): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\screen.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\screen.asm(3): warning: Register r28 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(62): 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\screen.asm' included form here
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\screen.asm(4): warning: Register r29 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(62): 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\screen.asm' included form here
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\screen.asm(5): warning: Register r30 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(62): 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\screen.asm' included form here
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16adef.inc'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(52): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\io.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(54): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\uart.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(56): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\adc.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(58): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\timer.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(60): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\spi.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(62): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\screen.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16A.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m16Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega16A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega16A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M16ADEF_INC_
                                 #define _M16ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega16A
                                 #pragma AVRPART ADMIN PART_NAME ATmega16A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x94
                                 .equ	SIGNATURE_002	= 0x03
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SE	= 6	; Sleep Enable
                                 .equ	SM2	= 7	; Sleep Mode Select
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special function I/O register
                                 ;.equ	PSR10	= 0	; Prescaler reset
                                 .equ	PSR2	= 1	; Prescaler reset
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 16384
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1c00
                                 .equ	NRWW_STOP_ADDR	= 0x1fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1bff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x1f80
                                 .equ	SECONDBOOTSTART	= 0x1f00
                                 .equ	THIRDBOOTSTART	= 0x1e00
                                 .equ	FOURTHBOOTSTART	= 0x1c00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M16ADEF_INC_ */
                                 
                                 
                                 ; main.asm
                                 ;
                                 ; Created: 25/10/2019 13:42:48
                                 ; Author : jsoudier01
                                 ;
                                 ;code programme
                                 
                                 ;.nolist 
                                 ;.include "m16def.inc"
                                 ;.list 
                                 
                                 .def tri = r1						; TimerInterruptRegister.
                                 
                                 .cseg  ; codesegment
                                 .org	0x00
000000 c02f                         rjmp	RESET 
                                 
                                 ; interrupt-vector commands, 1 Byte each:
000001 9518                      	reti							; 1:  $000(1) RESET External Pin, Power-on Reset, Brown-out Reset, Watchdog Reset, and JTAG AVR Reset
000002 9518                      	reti							; 2:  $002 INT0 External Interrupt Request 0 
000003 9518                      	reti							; 3:  $004 INT1 External Interrupt Request 1 
000004 9518                      	reti							; 4:  $006 TIMER2 COMP Timer/Counter2 Compare Match 
000005 9518                      	reti							; 5:  $008 TIMER2 OVF Timer/Counter2 Overflow 
000006 9518                      	reti							; 6:  $00A TIMER1 CAPT Timer/Counter1 Capture Event
000007 9518                      	reti							; 7:  $00C TIMER1 COMPA Timer/Counter1 Cmp Match A 
000008 9518                      	reti							; 8:  $00E TIMER1 COMPB Timer/Counter1 Cmpe Match B
000009 c051                      	rjmp TI_Interrupt				; 9:  $010 TIMER1 OVF Timer/Counter1 Overflow
00000a 9518                      	reti							; 10: $012 TIMER0 OVF Timer/Counter0 Overflow
00000b 9518                      	reti							; 11: $014 SPI, STC Serial Transfer Complete
00000c c040                      	rjmp UART_Interrupt				; 12: $016 USART, RXC USART, Rx Complete
00000d 9518                      	reti							; 13: $018 USART, UDRE USART Data Register Empty 
00000e 9518                      	reti							; 14: $01A USART, TXC USART, Tx Complete 
00000f 9518                      	reti							; 15: $01C ADC ADC Conversion Complete 
000010 9518                      	reti							; 16: $01E EE_RDY EEPROM Ready
000011 9518                      	reti							; 17: $020 ANA_COMP Analog Comparator 
000012 9518                      	reti							; 18: $022 TWI Two-wire Serial Interface
000013 9518                      	reti							; 19: $024 INT2 External Interrupt Request 2
000014 9518                      	reti							; 20: $026 TIMER0 COMP Timer/Counter0 Compare Match
000015 9518                      	reti							; 21 $028 SPM_RDY Store Program Memory Reazdy
                                 
                                 
                                 
                                 .org 0x30							; se placer à la case mémoire 10 en hexa
                                 reset:								; adresse du vecteur de reset
000030 e004                      	ldi		r16,high(RAMEND)		; initialisation de la pile
000031 bf0e                      	out		SPH,r16
000032 e50f                      	ldi		r16,low(RAMEND)
000033 bf0d                      	out		SPL,r16
                                 
                                 	;ajout des programmes pour la gestion des modules
                                 	.include "io.asm"
                                 
                                 
                                 IO_Init:
000034 e040                      	ldi		r20,0x00			;porta en entrée
000035 bb4a                      	out		DDRA,r20
000036 eb4f                      	ldi		r20,0xBF			;portb en entrée sur miso
000037 bb47                      	out		DDRB,r20
000038 ef4f                      	ldi		r20,0xFF			;portc en sortie
000039 bb44                      	out		DDRC,r20
00003a e642                      	ldi		r20,0x62			;portd en sortie sur TX, BUZZER et LED
00003b bb41                      	out		DDRD,r20
00003c c000                      IO_INC:
                                 	.include "uart.asm"
                                 
                                 .equ baud = 6								;9600 =>12
                                 .def reg_uart = r17
                                 .def reg_TX = r16
                                 .def reg_RX = r24
                                 
                                 USART_Init:									; Set baud rate to UBRR0 
00003d e006                      	ldi		reg_TX,baud
00003e e010                      	ldi		reg_uart,0 
00003f bd10                      	out		UBRRH, reg_uart   
000040 b909                      	out		UBRRL, reg_TX					; Enable receiver and transmitter   
000041 e002                      	ldi		reg_TX,(1<<U2X)
000042 b90b                      	out		UCSRA,reg_TX
000043 e108                      	ldi		reg_TX, (1<<RXEN)|(1<<TXEN)   
000044 b90a                      	out		UCSRB,reg_TX					; Set frame format: 8data, 2stop bit   
000045 e00e                      	ldi		reg_TX, (1<<USBS)|(3<<UCSZ0)   
000046 bd00                      	out		UCSRC,reg_TX  
000047 c009                      	rjmp	UART_INC					;go to main
                                 
                                 USART_Transmit:								; Wait for empty transmit buffer
000048 b11b                      	in		reg_uart, UCSRA   
000049 ff15                      	sbrs	reg_uart, UDRE   
00004a cffd                      	rjmp	USART_Transmit					; Put data (r16) into buffer, sends the data   
00004b b90c                      	out		UDR,reg_TX   
00004c 9508                      	ret 
                                 
                                 UART_Interrupt:
00004d b61f                      	in		tri,SREG						; save content of flag reg.
00004e b18c                      	in		reg_RX,UDR
00004f be1f                      	out		SREG,tri						; restore flag register
000050 9518                      UART_INC:
                                 	.include "adc.asm"
                                 
                                 
                                 ADC_Init:
                                 	;ldi r23,0x01
                                 	;out AIO,r23   ;adc, ne marche pas ?
000051 e270                      	ldi		r23,(1<<ADLAR)														;ext ref / left adjust / mux toADC0
000052 b977                      	out		ADMUX,r23
000053 ec77                      	ldi		r23,(1<<ADEN)|(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)			;adc enable / adc start / no auto trig / no interrupt / div 128
000054 b976                      	out		ADCSRA,r23
000055 c000                      ADC_INC:
                                 	.include "timer.asm"
                                 
                                 
                                 .def reg_bt1 = r20
                                 .def reg_bt2 = r21
                                 .def reg_vol = r23
                                 .def reg_son = r24
                                 
                                 .macro b0[]								;macro test bouton 0 vrai
                                  sbrc	reg_bt1,1
                                 .endmacro
                                 .macro b0n[]							;macro test bouton 0 faux
                                  sbrs	reg_bt1,1
                                 .endmacro
                                 .macro b1[]
                                  sbrc	reg_bt1,2
                                 .endmacro
                                 .macro b1n[]
                                  sbrs	reg_bt1,2
                                 .endmacro
                                 .macro b2[]
                                  sbrc	reg_bt1,3
                                 .endmacro
                                 .macro b2n[]
                                  sbrs	reg_bt1,3
                                 .endmacro
                                 .macro b3[]
                                  sbrc	reg_bt1,4
                                 .endmacro
                                 .macro b3n[]
                                  sbrs	reg_bt1,4
                                 .endmacro
                                 .macro b4[]
                                  sbrc	reg_bt1,5
                                 .endmacro
                                 .macro b4n[]
                                  sbrs	reg_bt1,5
                                 .endmacro
                                 .macro b5[]
                                  sbrc	reg_bt1,6
                                 .endmacro
                                 .macro b5n[]
                                  sbrs	reg_bt1,6
                                 .endmacro
                                 .macro b6[]
                                  sbrc	reg_bt1,7
                                 .endmacro
                                 .macro b6n[]
                                  sbrs	reg_bt1,7
                                 .endmacro
                                 .macro b7[]
                                  sbrc	reg_bt2,2
                                 .endmacro
                                 .macro b7n[]
                                  sbrs	reg_bt2,2
                                 .endmacro
                                 .macro b8[]
                                  sbrc	reg_bt2,3
                                 .endmacro
                                 .macro b8n[]
                                  sbrs	reg_bt2,3
                                 .endmacro
                                 .macro b9[]
                                  sbrc	reg_bt2,4
                                 .endmacro
                                 .macro b9n[]
                                  sbrs	reg_bt2,4
                                 .endmacro
                                 
                                 
                                 TIMER_Init:
000056 e070                      	ldi		reg_vol,0
000057 e085                      	ldi		reg_son,5
000058 bd7f                      	out		TCCR1A,reg_vol
000059 bd8e                      	out		TCCR1B,reg_son				;démarrage du timer à 16KHz => soit de 7 à 16k
00005a c01e                      	rjmp	TIMER_INC
                                 
                                 TI_Interrupt:
00005b b61f                      	in		tri,SREG					; save content of flag reg.
                                 
                                 	;gestion des boutons
00005c b349                      	in		reg_bt1,PINA				;on lit le port bouton
00005d b350                      	in		reg_bt2,PIND				;on lit le port bouton
00005e 7f4e                      	andi	reg_bt1,0xFE				;on garde les boutons
00005f 715c                      	andi	reg_bt2,0x1C
                                 
000060 9995                      	sbic	PORTD,5						;si buzzer on
000061 d011                      	rcall	BUZZ_OFF					;on met on
000062 9b95                      	sbis	PORTD,5						;sinon
000063 d006                      	rcall	BUZZ_ON
                                 
                                 	;gestion de la led
000064 9996                      	sbic	PORTD,6						;blink led
000065 9896                      	cbi		PORTD,6
000066 9b96                      	sbis	PORTD,6
000067 9a96                      	sbi		PORTD,6
                                 	
000068 be1f                      	out		SREG,tri					; restore flag register
000069 9518                      	reti 								; Return from interrupt
                                 
                                 BUZZ_ON:
                                 	;gestion du volume
00006a b175                      	in		reg_vol,ADCH				;on lit la valeur de l'adc convertie
                                 
                                 	;gestion du son
00006b 9f78                      	mul		reg_vol,reg_son				;on mulitplie le son et le volume
00006c 01c0                      	movw	reg_son,r0					;on met le résultat dans reg_son et reg_vol
00006d bd7c                      	out		TCNT1L,reg_vol				;on met le résultat dans le timer
00006e bd8d                      	out		TCNT1H,reg_son
                                 
                                 	;gestion volume suite
00006f ec70                      	ldi		reg_vol,0xC0				;relance d'une conversion
000070 b976                      	out		ADCSRA,reg_vol
                                 
000071 9a95                      	sbi		PORTD,5
                                 
000072 9508                      	ret
                                 
                                 BUZZ_OFF:
000073 9570                      	com		reg_vol						;on fait (1-duty)
000074 9580                      	com		reg_son
000075 bd7c                      	out		TCNT1L,reg_vol				;on met le résultat dans le timer
000076 bd8d                      	out		TCNT1H,reg_son
                                 
000077 9895                      	cbi		PORTD,5
                                 
000078 9508                      	ret
                                 TIMER_INC:
                                 	.include "spi.asm"
                                 
                                 .def reg_spi = r25
                                 .def reg_addr1 = r26
                                 .def reg_addr2 = r27
                                 
                                 SPI_Init:
                                 	;ldi r25,(1<<DD_MOSI)|(1<<DD_CLK)
                                 	;out DDR_SPI,r25   ;ne mache pas mais peut être est définit dans I/O
000079 e591                      	ldi		reg_spi,(1<<SPE)|(1<<MSTR)|(1<<SPR0)	; ON / MASTER / fosc/16
00007a b99d                      	out		SPCR,reg_spi
00007b 9ac4                      	sbi		PORTB,4									;set SS
00007c 98c4                      	cbi		PORTB,4
00007d e094                      	ldi		reg_spi,0x04							;sélection du mode lecture de la mémoire
00007e d002                      	rcall	SPI_Transmit
00007f 9ac4                      	sbi		PORTB,4
000080 c010                      	rjmp	SPI_INC
                                 
                                 SPI_Transmit:										;attente transmission
000081 b99f                      	out		SPDR,reg_spi							;envoi msg
                                 Wait_SPI:
000082 9b77                      	sbis	SPSR,SPIF								;test si fini
000083 cffe                      	rjmp	Wait_SPI
000084 b19f                      	in		reg_spi,SPDR							;lecture de la réponse
000085 9508                      	ret
                                 
                                 Read_Mem:
000086 98c4                      	cbi		PORTB,4									;clear SS
000087 e093                      	ldi		reg_spi,0x03							;instruction de lecture mémoire
000088 dff8                      	rcall	SPI_Transmit
000089 2f9a                      	mov		reg_spi,reg_addr1						;sélection de l'adresse H
00008a dff6                      	rcall	SPI_Transmit
00008b 2f9b                      	mov		reg_spi,reg_addr2						;sélection de l'adresse L
00008c dff4                      	rcall	SPI_Transmit
00008d e090                      	ldi		reg_spi,0x00							;lecture de la réponse
00008e dff2                      	rcall	SPI_Transmit
00008f 9ac4                      	sbi		PORTB,4									;set SS
000090 9508                      	ret
                                 
                                 SPI_INC:
                                 	.include "screen.asm"
                                 
                                 
                                 .def reg_cpt1 = r28
                                 .def reg_cpt2 = r29
                                 .def reg_screen = r30
                                 
                                 .macro screenL[]					;choix du côté de l'écran à gauche
                                 	sbi		PORTB,0
                                 	cbi		PORTB,1
                                 .endmacro
                                 .macro screenR[]					;choix du côté de l'écran à droite
                                 	sbi		PORTB,1
                                 	cbi		PORTB,0
                                 .endmacro
                                 .macro Enable[]						;validation de la commande sur l'écran
                                 	cbi		PORTB,3
                                 	nop								;on attent l'écran
                                 	nop
                                 	sbi		PORTB,3
                                 .endmacro
                                 .macro SetPosX[]					;pos de 0 à 7 (à changer à chaque fois)
                                 	ori		reg_screen,0xB8
                                 	out		PORTC,reg_screen
                                 	RS_clear[]
                                 	Enable[]
                                 	RS_set[]
                                 .endmacro
                                 .macro SetPosY[]					;pos de 0 à 64 (auto)
                                 	ori		reg_screen,0x40
                                 	out		PORTC,reg_screen
                                 	RS_clear[]
                                 	Enable[]
                                 	RS_set[]
                                 .endmacro
                                 .macro RS_clear[]					;changement de bit instruction/données
                                 	cbi		PORTB,2
                                 .endmacro
                                 .macro RS_set[]						;changement de bit instruction/données
                                 	sbi		PORTB,2
                                 .endmacro
                                 .macro ScreenWrite[]				;affichage sur l'écran
                                 	out		PORTB,reg_screen
                                 	Enable[]
                                 .endmacro
                                 
                                 
                                 SCREEN_Init:
000091 9ac3                      	sbi		PORTB,3					;set E and clear RS
000092 98c2                      	cbi		PORTB,2
000093 e3ef                      	ldi		reg_screen,63			;instruction de début de l'écran
000094 bbe5                      	out		PORTC,reg_screen
000095 98c3
000096 0000
000097 0000
000098 9ac3                      	Enable[]						;validation
000099 9ac2                      	RS_set[]						;mode données
00009a c054                      	rjmp	SCREEN_INC
                                 
                                 
                                 ; sous programme de temposirsation
                                 tempo:
00009b efcf                      	ldi		reg_cpt1,255
                                 boucletempo:
00009c 95ca                      	dec		reg_cpt1
00009d 0000                      	nop
00009e f7e9                      	brne	boucletempo
00009f 95da                      	dec		reg_cpt2
0000a0 f7d1                      	brne	tempo
0000a1 9508                      	ret
                                 
                                 ;full reg_addr1/2
                                 writeFullSreen:
0000a2 9ac0
0000a3 98c1                      	screenL[]						;set side screen
0000a4 e0c0                      	ldi		reg_cpt1,0				;reset var
0000a5 e0d0                      	ldi		reg_cpt2,0
                                 loop1:
0000a6 e0e0                      	ldi		reg_screen,0			;set pos X = 0
0000a7 6be8
0000a8 bbe5
0000a9 98c2
0000aa 98c3
0000ab 0000
0000ac 0000
0000ad 9ac3
0000ae 9ac2                      	SetPosX[]
0000af 2fed                      	mov		reg_screen,reg_cpt2		;set pos Y = 0
0000b0 64e0
0000b1 bbe5
0000b2 98c2
0000b3 98c3
0000b4 0000
0000b5 0000
0000b6 9ac3
0000b7 9ac2                      	SetPosY[]
                                 loop2:
0000b8 dfcd                      	rcall Read_Mem					;lecture de la mémoire spi
0000b9 2fe9                      	mov		reg_screen,reg_spi
0000ba bbe8
0000bb 98c3
0000bc 0000
0000bd 0000
0000be 9ac3                      	ScreenWrite[]					;écriture sur l'écran
0000bf 95a3                      	inc		reg_addr1				;incrément de l'adresse LOW
0000c0 f160                      	brcs	addr_carry				;test du carry
                                 
0000c1 95c3                      	inc		reg_cpt1				;incrément du compteur 1
0000c2 ffc6                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
0000c3 cff4                      	rjmp	loop2
                                 
0000c4 95d3                      	inc		reg_cpt2				;incrément du copteur 2
0000c5 ffd3                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
0000c6 cfdf                      	rjmp	loop1
                                 
0000c7 9ac1
0000c8 98c0                      	screenR[]						;idem ci-dessus avec le côté gauche
0000c9 e0c0                      	ldi		reg_cpt1,0
0000ca e0d0                      	ldi		reg_cpt2,0
                                 loop3:
0000cb e0e0                      	ldi		reg_screen,0
0000cc 6be8
0000cd bbe5
0000ce 98c2
0000cf 98c3
0000d0 0000
0000d1 0000
0000d2 9ac3
0000d3 9ac2                      	SetPosX[]
0000d4 e0e0                      	ldi		reg_screen,0
0000d5 64e0
0000d6 bbe5
0000d7 98c2
0000d8 98c3
0000d9 0000
0000da 0000
0000db 9ac3
0000dc 9ac2                      	SetPosY[]
                                 loop4:
0000dd dfa8                      	rcall Read_Mem
0000de 2fe9                      	mov		reg_screen,reg_spi
0000df bbe8
0000e0 98c3
0000e1 0000
0000e2 0000
0000e3 9ac3                      	ScreenWrite[]
0000e4 95a3                      	inc		reg_addr1
0000e5 f038                      	brcs	addr_carry
                                 
0000e6 95c3                      	inc		reg_cpt1
0000e7 ffc6                      	sbrs	reg_cpt1,6
0000e8 cff4                      	rjmp	loop4
                                 
0000e9 95d3                      	inc		reg_cpt2
0000ea ffd3                      	sbrs	reg_cpt2,3
0000eb cfdf                      	rjmp	loop3
0000ec 9508                      	ret
                                 
                                 addr_carry:
0000ed 95b3                      	inc		reg_addr2				;si carry on incrémente l'adresse HIGH
0000ee 9508                      	ret
                                 SCREEN_INC:
                                 
                                 	;sei
                                 
                                 start:
0000ef 9986                      	sbic	PIND,6						;blink led
0000f0 9896                      	cbi		PORTD,6
0000f1 9b86                      	sbis	PIND,6
0000f2 9a96                      	sbi		PORTD,6
0000f3 efda                      	ldi		reg_cpt2,250
0000f4 dfa6                      	rcall	tempo
0000f5 efda                      	ldi		reg_cpt2,250
0000f6 dfa4                      	rcall	tempo
0000f7 efda                      	ldi		reg_cpt2,250
0000f8 dfa2                      	rcall	tempo
0000f9 efda                      	ldi		reg_cpt2,250
0000fa dfa0                      	rcall	tempo
0000fb efda                      	ldi		reg_cpt2,250
0000fc df9e                      	rcall	tempo
                                 	;rcall	Read_Mem
0000fd cff1                          rjmp	start


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16A" register use summary:
x  :   0 y  :   0 z  :   0 r0 :   1 r1 :   4 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  13 r17:   4 r18:   0 r19:   0 r20:  10 
r21:   2 r22:   0 r23:  13 r24:   8 r25:  11 r26:   3 r27:   2 r28:   8 
r29:  13 r30:  18 r31:   0 
Registers used: 14 out of 35 (40.0%)

"ATmega16A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   2 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   2 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  19 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   0 cpc   :   0 
cpi   :   0 cpse  :   0 dec   :   2 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   8 inc   :   7 jmp   :   0 
ld    :   0 ldd   :   0 ldi   :  34 lds   :   0 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   5 movw  :   1 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :  15 or    :   0 ori   :   4 out   :  32 pop   :   0 
push  :   0 rcall :  14 ret   :   8 reti  :  21 rjmp  :  16 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  21 sbic  :   3 sbis  :   4 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   5 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 23 out of 113 (20.4%)

"ATmega16A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0001fc    456      0    456   16384   2.8%
[.dseg] 0x000060 0x000060      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
