
AVRASM ver. 2.2.7  D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm Mon Dec 23 20:12:41 2019

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16adef.inc'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(74): warning: Register r18 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(75): warning: Register r31 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(81): warning: Register r18 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(85): warning: Register r28 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(87): warning: Register r29 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(88): warning: Register r30 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(144): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\lettre.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(146): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\io.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(148): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\uart.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(150): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\adc.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(152): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\timer.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(154): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\spi.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(156): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\screen.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16adef.inc'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(144): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\lettre.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(146): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\io.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(148): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\uart.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(150): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\adc.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(152): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\timer.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(154): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\spi.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(156): Including file 'D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\screen.asm'
D:\école\GE4\bn1\Bas-Niveau\projet_bn1\projet_bn1\main.asm(283): warning: end of .dseg at 0x466 is beyond end of memory at 0x45f
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16A.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m16Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega16A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega16A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M16ADEF_INC_
                                 #define _M16ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega16A
                                 #pragma AVRPART ADMIN PART_NAME ATmega16A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x94
                                 .equ	SIGNATURE_002	= 0x03
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SE	= 6	; Sleep Enable
                                 .equ	SM2	= 7	; Sleep Mode Select
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special function I/O register
                                 ;.equ	PSR10	= 0	; Prescaler reset
                                 .equ	PSR2	= 1	; Prescaler reset
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 16384
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1c00
                                 .equ	NRWW_STOP_ADDR	= 0x1fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1bff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x1f80
                                 .equ	SECONDBOOTSTART	= 0x1f00
                                 .equ	THIRDBOOTSTART	= 0x1e00
                                 .equ	FOURTHBOOTSTART	= 0x1c00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M16ADEF_INC_ */
                                 
                                 
                                 ; main.asm
                                 ;
                                 ; Created: 25/10/2019 13:42:48
                                 ; Author : jsoudier01
                                 ;
                                 ;code programme
                                 
                                 ;.nolist 
                                 ;.include "m16def.inc"
                                 ;.list 
                                 
                                 .equ C_A = 0
                                 .equ C_B = 5
                                 .equ C_C = 10
                                 .equ C_D = 15
                                 .equ C_E = 20
                                 .equ C_F = 25
                                 .equ C_G = 30
                                 .equ C_H = 35
                                 .equ C_I = 40
                                 .equ C_J = 45
                                 .equ C_K = 50
                                 .equ C_L = 55
                                 .equ C_M = 60
                                 .equ C_N = 65
                                 .equ C_O = 70
                                 .equ C_P = 75
                                 .equ C_Q = 80
                                 .equ C_R = 85
                                 .equ C_S = 90
                                 .equ C_T = 95
                                 .equ C_U = 100
                                 .equ C_V = 105
                                 .equ C_W = 110
                                 .equ C_X = 115
                                 .equ C_Y = 120
                                 .equ C_Z = 125
                                 .equ C_0 = 130
                                 .equ C_1 = 135
                                 .equ C_2 = 140
                                 .equ C_3 = 145
                                 .equ C_4 = 150
                                 .equ C_5 = 155
                                 .equ C_6 = 160
                                 .equ C_7 = 165
                                 .equ C_8 = 170
                                 .equ C_9 = 175
                                 .equ C_IN = 180
                                 .equ C_EX = 185
                                 .equ C_PT = 190
                                 .equ C_DA = 195
                                 .equ C_PAO = 200
                                 .equ C_PAF = 205
                                 .equ C_PL = 210
                                 .equ C_MO = 215
                                 .equ C_SL = 220
                                 .equ C_MUL = 225
                                 .equ C_DP = 230
                                 .equ C_EG = 235
                                 .equ C_# = 240
                                 .equ C_CH = 245
                                 .equ CHAR_SIZE = 6
                                 
                                 
                                 .def tri = r1						; TimerInterruptRegister.
                                 
                                 .def reg_init = r16
                                 
                                 .def reg_spi = r18
                                 .def reg_addrL = r19
                                 .def reg_addrH = r20
                                 
                                 .def reg_lettre = r18
                                 .def reg_out = r31
                                 
                                 .def reg_cpt1 = r21
                                 .def reg_cpt2 = r22
                                 .def reg_cpt3 = r23
                                 
                                 .def reg_screen = r18
                                 
                                 .def reg_bt1 = r24
                                 .def reg_vol = r25
                                 .def reg_son = r28
                                 
                                 .def reg_TX = r29
                                 .def reg_RX = r30
                                 
                                 
                                 .dseg
000060                           img: .byte 1024	; reserve une image
000460                           addrL: .byte 1  ;addr de départ
000461                           addrH: .byte 1
000462                           btL:   .byte 1
000463                           btH:   .byte 1
000464                           TX:    .byte 1
000465                           POS:   .byte 1
                                 
                                 .cseg  ; codesegment
                                 .org	0x00
000000 c02f                         rjmp	RESET 
                                 
                                 ; interrupt-vector commands, 1 Byte each:
                                 /*	reti							; 1:  $000(1) RESET External Pin, Power-on Reset, Brown-out Reset, Watchdog Reset, and JTAG AVR Reset
                                 	reti							; 2:  $002 INT0 External Interrupt Request 0 
                                 	reti							; 3:  $004 INT1 External Interrupt Request 1 
                                 	reti							; 4:  $006 TIMER2 COMP Timer/Counter2 Compare Match 
                                 	reti							; 5:  $008 TIMER2 OVF Timer/Counter2 Overflow 
                                 	reti							; 6:  $00A TIMER1 CAPT Timer/Counter1 Capture Event
                                 	reti							; 7:  $00C TIMER1 COMPA Timer/Counter1 Cmp Match A 
                                 	reti							; 8:  $00E TIMER1 COMPB Timer/Counter1 Cmpe Match B
                                 	rjmp TI_Interrupt				; 9:  $010 TIMER1 OVF Timer/Counter1 Overflow
                                 	reti							; 10: $012 TIMER0 OVF Timer/Counter0 Overflow
                                 	reti							; 11: $014 SPI, STC Serial Transfer Complete
                                 	rjmp UART_Interrupt				; 12: $016 USART, RXC USART, Rx Complete
                                 	reti							; 13: $018 USART, UDRE USART Data Register Empty 
                                 	reti							; 14: $01A USART, TXC USART, Tx Complete 
                                 	reti							; 15: $01C ADC ADC Conversion Complete 
                                 	reti							; 16: $01E EE_RDY EEPROM Ready
                                 	reti							; 17: $020 ANA_COMP Analog Comparator 
                                 	reti							; 18: $022 TWI Two-wire Serial Interface
                                 	reti							; 19: $024 INT2 External Interrupt Request 2
                                 	reti							; 20: $026 TIMER0 COMP Timer/Counter0 Compare Match
                                 	reti							; 21 $028 SPM_RDY Store Program Memory Reazdy
                                 	*/
                                 .org 0x10
000010 940c 0074                 	jmp		TI_Interrupt
                                 .org 0x16
000016 940c 005c                 	jmp		UART_Interrupt
                                 
                                 .org 0x30							; se placer à la case mémoire 10 en hexa
                                 reset:								; adresse du vecteur de reset
000030 e004                      	ldi		r16,high(RAMEND)		; initialisation de la pile
000031 bf0e                      	out		SPH,r16
000032 e50f                      	ldi		r16,low(RAMEND)
000033 bf0d                      	out		SPL,r16
                                 
000034 ef7f                      	ldi		reg_cpt3,255
000035 d07b                      	rcall	tempo
                                 
                                 
                                 	;ajout des programmes pour la gestion des modules
                                 	.include "lettre.asm"
000036 c008                      
                                 
                                 conv_lettre:
000037 99e1                      	sbic	EECR,EEWE
000038 cffe                      	rjmp	conv_lettre
                                 
000039 e0f0                      	ldi		reg_out,0
00003a bbff                      	out		EEARH,reg_out
00003b bb2e                      	out		EEARL,reg_lettre
                                 	
00003c 9ae0                      	sbi		EECR,EERE
00003d b3fd                      	in		reg_out,EEDR
00003e 9508                      	ret
                                 LETTRE_INC:
                                 	.include "io.asm"
                                 
                                 
                                 IO_Init:
00003f e000                      	ldi		reg_init,0x00			;porta en entrée
000040 bb0a                      	out		DDRA,reg_init
000041 eb0f                      	ldi		reg_init,0xBF			;portb en entrée sur miso
000042 bb07                      	out		DDRB,reg_init
000043 ef0f                      	ldi		reg_init,0xFF			;portc en sortie
000044 bb04                      	out		DDRC,reg_init
000045 ee02                      	ldi		reg_init,0xE2			;portd en sortie sur TX, BUZZER et LED
000046 bb01                      	out		DDRD,reg_init
000047 c000                      IO_INC:
                                 	.include "uart.asm"
                                 
                                 .equ baud = 103								;9600 =>103
                                 
                                 USART_Init:									; Set baud rate to UBRR0 
000048 e6d7                      	ldi		reg_TX,baud
000049 b9d9                      	out		UBRRL, reg_TX					; Enable receiver and transmitter  
00004a e0d0                      	ldi		reg_TX,0 
00004b bdd0                      	out		UBRRH, reg_TX    
00004c e0d2                      	ldi		reg_TX,(1<<U2X)
00004d b9db                      	out		UCSRA,reg_TX
00004e e9d8                      	ldi		reg_TX, (1<<RXEN)|(1<<TXEN)|(1<<RXCIE)   
00004f b9da                      	out		UCSRB,reg_TX					; Set frame format: 8data, 2stop bit   
000050 e0de                      	ldi		reg_TX, (1<<USBS)|(3<<UCSZ0)   
000051 bdd0                      	out		UCSRC,reg_TX  
                                 
000052 c00d                      	rjmp	UART_INC					;go to main
                                 
                                 USART_Transmit:								; Wait for empty transmit buffer
000053 93d0 0464                 	sts		TX,reg_TX
000055 b1db                      	in		reg_TX, UCSRA   
000056 ffd5                      	sbrs	reg_TX, UDRE   
000057 cffb                      	rjmp	USART_Transmit					; Put data (r16) into buffer, sends the data   
000058 91d0 0464                 	lds		reg_TX,TX
00005a b9dc                      	out		UDR,reg_TX   
00005b 9508                      	ret 
                                 
                                 UART_Interrupt:
00005c b61f                      	in		tri,SREG						; save content of flag reg.
00005d b1ec                      	in		reg_RX,UDR
00005e be1f                      	out		SREG,tri						; restore flag register
00005f 9518                      UART_INC:
                                 	.include "adc.asm"
                                 
                                 
                                 ADC_Init:
000060 e600                      	ldi		reg_init,(1<<ADLAR)|(1<<REFS0)														;ext ref / left adjust / mux toADC0
000061 b907                      	out		ADMUX,reg_init
000062 ec06                      	ldi		reg_init,(1<<ADEN)|(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)						;adc enable / adc start / no auto trig / no interrupt / div 64
000063 b906                      	out		ADCSRA,reg_init
000064 c000                      ADC_INC:
                                 	.include "timer.asm"
                                 
                                 
                                 .macro b0[]
                                 	sbis	PINA,1
                                 .endmacro
                                 .macro b0n[]
                                 	sbic	PINA,1
                                 .endmacro
                                 .macro b1[]
                                 	sbis	PINA,2
                                 .endmacro
                                 .macro b1n[]
                                 	sbic	PINA,2
                                 .endmacro
                                 .macro b2[]
                                 	sbis	PINA,3
                                 .endmacro
                                 .macro b2n[]
                                 	sbic	PINA,3
                                 .endmacro
                                 .macro b3[]
                                 	sbis	PINA,4
                                 .endmacro
                                 .macro b3n[]
                                 	sbic	PINA,4
                                 .endmacro
                                 
                                 
                                 TIMER_Init:
000065 e090                      	ldi		reg_vol,0
000066 e0c2                      	ldi		reg_son,(1<<CS11)
000067 bd9f                      	out		TCCR1A,reg_vol
000068 bdce                      	out		TCCR1B,reg_son				;démarrage du timer à 16KHz => soit à 8k
000069 b798                      	in		reg_vol,TIFR				;clear flag
00006a 7f9b                      	andi	reg_vol,0xFB
00006b bf98                      	out		TIFR,reg_vol
00006c b799                      	in		reg_vol,TIMSK				;interrupt enable
00006d 6094                      	ori		reg_vol,(1<<TOIE1)
00006e bf99                      	out		TIMSK,reg_vol
00006f e694                      	ldi		reg_vol,100
000070 e0c0                      	ldi		reg_son,0
000071 bd9c                      	out		TCNT1L,reg_vol				;on met le résultat dans le timer
000072 bdcd                      	out		TCNT1H,reg_son
000073 c01b                      	rjmp	TIMER_INC
                                 
                                 TI_Interrupt:
000074 b61f                      	in		tri,SREG					; save content of flag reg.
                                 
                                 	;gestion des boutons
                                 	;in		reg_bt1,PINA				;on lit le port bouton
                                 	;andi	reg_bt1,0xFE				;on garde les boutons
                                 	;sts		btL,reg_bt1					;on stocke le résultat
                                 	;in		reg_bt1,PIND
                                 	;andi	reg_bt1,0x1C
                                 	;sts		btH,reg_bt1
                                 
000075 9986                      	sbic	PIND,6						;si buzzer on
000076 d012                      	rcall	BUZZ_OFF					;on met on
000077 9b86                      	sbis	PIND,6						;sinon
000078 d006                      	rcall	BUZZ_ON
                                 
                                 	;gestion de la led
000079 9986                      	sbic	PIND,6						;blink led
00007a 9896                      	cbi		PORTD,6
00007b 9b86                      	sbis	PIND,6
00007c 9a96                      	sbi		PORTD,6
                                 
                                 
                                 	
00007d be1f                      	out		SREG,tri					; restore flag register
00007e 9518                      	reti 								; Return from interrupt
                                 
                                 BUZZ_ON:
                                 	;gestion du volume
00007f b195                      	in		reg_vol,ADCH				;on lit la valeur de l'adc convertie
                                 
                                 	;gestion du son
000080 9f9c                      	mul		reg_vol,reg_son				;on mulitplie le son et le volume
000081 01e0                      	movw	reg_son,r0					;on met le résultat dans reg_son et reg_vol
000082 bd9c                      	out		TCNT1L,reg_vol				;on met le résultat dans le timer
000083 bdcd                      	out		TCNT1H,reg_son
                                 
                                 	;gestion volume suite
000084 b196                      	in		reg_vol,ADCSRA
000085 6490                      	ori		reg_vol,(1<<ADSC)			;relance d'une conversion
000086 b996                      	out		ADCSRA,reg_vol
                                 
000087 9a95                      	sbi		PORTD,5
                                 
000088 9508                      	ret
                                 
                                 BUZZ_OFF:
000089 9590                      	com		reg_vol						;on fait (1-duty)
00008a 95c0                      	com		reg_son
00008b bd9c                      	out		TCNT1L,reg_vol				;on met le résultat dans le timer
00008c bdcd                      	out		TCNT1H,reg_son
                                 
00008d 9895                      	cbi		PORTD,5
                                 
00008e 9508                      	ret
                                 TIMER_INC:
                                 	.include "spi.asm"
                                 
                                 
                                 SPI_Init:
                                 	;ldi r25,(1<<DD_MOSI)|(1<<DD_CLK)
                                 	;out DDR_SPI,r25   ;ne mache pas mais peut être est définit dans I/O
00008f e521                      	ldi		reg_spi,(1<<SPE)|(1<<MSTR)|(1<<SPR0)	; ON / MASTER / fosc/16
000090 b92d                      	out		SPCR,reg_spi
000091 9ac4                      	sbi		PORTB,4									;set SS
000092 98c4                      	cbi		PORTB,4
000093 e024                      	ldi		reg_spi,0x04							;sélection du mode lecture de la mémoire
000094 d002                      	rcall	SPI_Transmit
000095 9ac4                      	sbi		PORTB,4
000096 c010                      	rjmp	SPI_INC
                                 
                                 SPI_Transmit:										;attente transmission
000097 b92f                      	out		SPDR,reg_spi							;envoi msg
                                 Wait_SPI:
000098 9b77                      	sbis	SPSR,SPIF								;test si fini
000099 cffe                      	rjmp	Wait_SPI
00009a b12f                      	in		reg_spi,SPDR							;lecture de la réponse
00009b 9508                      	ret
                                 
                                 Read_Mem:
00009c 98c4                      	cbi		PORTB,4									;clear SS
00009d e023                      	ldi		reg_spi,0x03							;instruction de lecture mémoire
00009e dff8                      	rcall	SPI_Transmit
00009f 2f24                      	mov		reg_spi,reg_addrH						;sélection de l'adresse H
0000a0 dff6                      	rcall	SPI_Transmit
0000a1 2f23                      	mov		reg_spi,reg_addrL						;sélection de l'adresse L
0000a2 dff4                      	rcall	SPI_Transmit
0000a3 e020                      	ldi		reg_spi,0x00							;lecture de la réponse
0000a4 dff2                      	rcall	SPI_Transmit
0000a5 9ac4                      	sbi		PORTB,4									;set SS
0000a6 9508                      	ret
                                 
                                 SPI_INC:
                                 	.include "screen.asm"
                                 
                                 
                                 
                                 .macro screenL[]					;choix du côté de l'écran à gauche
                                 	sbi		PORTB,0
                                 	cbi		PORTB,1
                                 .endmacro
                                 .macro screenR[]					;choix du côté de l'écran à droite
                                 	sbi		PORTB,1
                                 	cbi		PORTB,0
                                 .endmacro
                                 .macro Enable[]						;validation de la commande sur l'écran
                                 	cbi		PORTB,3
                                 	;nop								;on attent l'écran
                                 	ldi		reg_cpt3,250
                                 	rcall	tempo
                                 	sbi		PORTB,3
                                 .endmacro
                                 .macro SetPosX[]					;pos de 0 à 7 (à changer à chaque fois)
                                 	RS_clear[]
                                 	ori		reg_screen,0xB8
                                 	out		PORTC,reg_screen
                                 	Enable[]
                                 	RS_set[]
                                 .endmacro
                                 .macro SetPosY[]					;pos de 0 à 64 (auto)
                                 	RS_clear[]
                                 	ori		reg_screen,0x40
                                 	out		PORTC,reg_screen
                                 	Enable[]
                                 	RS_set[]
                                 .endmacro
                                 .macro RS_clear[]					;changement de bit instruction/données
                                 	cbi		PORTB,2
                                 .endmacro
                                 .macro RS_set[]						;changement de bit instruction/données
                                 	sbi		PORTB,2
                                 .endmacro
                                 .macro ScreenWrite[]				;affichage sur l'écran
                                 	out		PORTC,reg_screen
                                 	Enable[]
                                 .endmacro
                                 .macro CLR_RAM[]
                                 	ldi		reg_cpt1,0
                                 	ldi		reg_cpt2,0
                                 	ldi		reg_spi,0
                                 	ldi		XL,LOW(img)
                                 	ldi		XH,HIGH(img)
                                 loopCLR:
                                 	st		X,reg_spi
                                 	inc		XL
                                 	cpi		XL,0
                                 	brne	carry_clr
                                 	inc		XH
                                 carry_clr:
                                 
                                 	inc		reg_cpt1
                                 	cpi		reg_cpt1,0
                                 	brne	loopCLR
                                 
                                 	inc		reg_cpt2
                                 	cpi		reg_cpt2,4
                                 	brne	loopCLR
                                 .endmacro
                                 .macro createImgFull[]
                                 	ldi		reg_cpt1,0
                                 	ldi		reg_cpt2,0
                                 	ldi		XL,LOW(img)
                                 	ldi		XH,HIGH(img)
                                 loopImg:
                                 	rcall	Read_Mem					;lecture de la mémoire spi
                                 	st		X,reg_spi
                                 
                                 	inc		XL
                                 	cpi		XL,0
                                 	brne	addr_carry1
                                 	inc		XH
                                 addr_carry1:
                                 
                                 	inc		reg_addrL				;incrément de l'adresse LOW
                                 	cpi		reg_addrL,0
                                 	brne	addr_carry				;test du carry
                                 	inc		reg_addrH
                                 addr_carry:
                                 
                                 	;cpi		reg_cpt2,4
                                 	ldi		reg_cpt1,HIGH(img)
                                 	ldi		reg_cpt2,4
                                 	add		reg_cpt1,reg_cpt2
                                 	cp		XH,reg_cpt1
                                 	brne	loopImg
                                 	ldi		reg_cpt1,LOW(img)
                                 	cp		XL,reg_cpt1
                                 	brne	loopImg
                                 .endmacro
                                 
                                 
                                 SCREEN_Init:
0000a7 9ac3                      	sbi		PORTB,3					;set E and clear RS
0000a8 98c2                      	cbi		PORTB,2
0000a9 e32f                      	ldi		reg_screen,63			;instruction de début de l'écran
0000aa bb25                      	out		PORTC,reg_screen
0000ab 98c3
0000ac ef7a
0000ad d003
0000ae 9ac3                      	Enable[]						;validation
0000af 9ac2                      	RS_set[]						;mode données
0000b0 c068                      	rjmp	SCREEN_INC
                                 
                                 ; sous programme de temposirsation
                                 tempo:
0000b1 957a                      	dec		reg_cpt3
0000b2 0000                      	nop
0000b3 f7e9                      	brne	tempo
0000b4 9508                      	ret
                                 
                                 ;full reg_addrL/H
                                 writeFullSreen:
0000b5 9ac1
0000b6 98c0                      	screenR[]						;set side screen
0000b7 e060                      	ldi		reg_cpt2,0				;reset var
0000b8 e6a0                      	ldi		XL,LOW(img)
0000b9 e0b0                      	ldi		XH,HIGH(img)
                                 loop1:
0000ba e050                      	ldi		reg_cpt1,0
0000bb e020                      	ldi		reg_screen,0			;set pos Y = 0
0000bc 98c2
0000bd 6420
0000be bb25
0000bf 98c3
0000c0 ef7a
0000c1 dfef
0000c2 9ac3
0000c3 9ac2                      	SetPosY[]
0000c4 2f26                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
0000c5 98c2
0000c6 6b28
0000c7 bb25
0000c8 98c3
0000c9 ef7a
0000ca dfe6
0000cb 9ac3
0000cc 9ac2                      	SetPosX[]
                                 loop2:
                                 	;rcall Read_Mem					;lecture de la mémoire spi
                                 	;ldi		reg_spi,5
                                 
                                 
                                 
                                 	/*mov		reg_indice,reg_cpt1
                                 	andi	reg_indice,0x07
                                 	cpi		reg_indice,6
                                 	brlt	saut
                                 	ldi		reg_indice,11
                                 saut:
                                 	ldi		reg_lettre,0
                                 	rcall	conv_lettre
                                 	mov		reg_spi,reg_out*/
                                 	/*ldi		reg_lettre,5
                                 	ldi		reg_indice,0
                                 	cpi		reg_cpt1,0
                                 	breq	saut
                                 	ldi		reg_indice,1
                                 	cpi		reg_cpt1,1
                                 	breq	saut
                                 	ldi		reg_indice,2
                                 	cpi		reg_cpt1,2
                                 	breq	saut
                                 	ldi		reg_indice,3
                                 	cpi		reg_cpt1,3
                                 	breq	saut
                                 	ldi		reg_indice,4
                                 	cpi		reg_cpt1,4
                                 	breq	saut
                                 	ldi		reg_out,0
                                 	cpi		reg_cpt1,5
                                 	brsh	saut2
                                 saut:
                                 	rcall	conv_lettre
                                 	;mov		reg_out,reg_indice
                                 saut2:
                                 	mov		reg_spi,reg_out*/
                                 	
                                 
                                 
                                 	;mov		reg_screen,reg_spi
0000cd 912c                      	ld		reg_screen,X
0000ce 95a3                      	inc		XL
0000cf 30a0                      	cpi		XL,0
0000d0 f409                      	brne	loopAff
0000d1 95b3                      	inc		XH
                                 loopAff:
0000d2 bb25
0000d3 98c3
0000d4 ef7a
0000d5 dfdb
0000d6 9ac3                      	ScreenWrite[]					;écriture sur l'écran
                                 
0000d7 9553                      	inc		reg_cpt1				;incrément du compteur 1
0000d8 ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
0000d9 cff3                      	rjmp	loop2
                                 
0000da 9563                      	inc		reg_cpt2				;incrément du copteur 2
0000db ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
0000dc cfdd                      	rjmp	loop1
                                 
0000dd 9ac0
0000de 98c1                      	screenL[]						;set side screen
0000df e060                      	ldi		reg_cpt2,0				;reset var
                                 loop3:
0000e0 e050                      	ldi		reg_cpt1,0
0000e1 e020                      	ldi		reg_screen,0			;set pos Y = 0
0000e2 98c2
0000e3 6420
0000e4 bb25
0000e5 98c3
0000e6 ef7a
0000e7 dfc9
0000e8 9ac3
0000e9 9ac2                      	SetPosY[]
0000ea 2f26                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
0000eb 98c2
0000ec 6b28
0000ed bb25
0000ee 98c3
0000ef ef7a
0000f0 dfc0
0000f1 9ac3
0000f2 9ac2                      	SetPosX[]
                                 loop4:
                                 	;rcall Read_Mem					;lecture de la mémoire spi
                                 	;ldi		reg_spi,5
0000f3 912c                      	ld		reg_screen,X
0000f4 95a3                      	inc		XL
0000f5 30a0                      	cpi		XL,0
0000f6 f409                      	brne	loopAff1
0000f7 95b3                      	inc		XH
                                 loopAff1:
                                 
                                 
                                 	;mov		reg_screen,reg_spi
0000f8 bb25
0000f9 98c3
0000fa ef7a
0000fb dfb5
0000fc 9ac3                      	ScreenWrite[]					;écriture sur l'écran
0000fd 9533                      	inc		reg_addrL				;incrément de l'adresse LOW
0000fe 3030                      	cpi		reg_addrL,0
0000ff f409                      	brne	addr_carry2				;test du carry
000100 9543                      	inc		reg_addrH
                                 addr_carry2:
                                 
000101 9553                      	inc		reg_cpt1				;incrément du compteur 1
000102 ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
000103 cfef                      	rjmp	loop4
                                 
000104 9563                      	inc		reg_cpt2				;incrément du copteur 2
000105 ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
000106 cfd9                      	rjmp	loop3
000107 9508                      	ret
                                 
                                 ;load reg_addrL, reg_addrH, reg_lettre
                                 addImgChar:
000108 e6a0                      	ldi		XL,LOW(img)
000109 e0b0                      	ldi		XH,HIGH(img)
00010a e050                      	ldi		reg_cpt1,0
00010b e061                      	ldi		reg_cpt2,1
00010c 0fb4                      	add		XH,reg_addrH
00010d 1fa3                      	adc		XL,reg_addrL
                                 testAdd:
00010e df28                      	rcall	conv_lettre
00010f 93fc                      	st		X,reg_out
000110 9523                      	inc		reg_lettre
000111 95a3                      	inc		XL
000112 30a0                      	cpi		XL,0
000113 f409                      	brne	testAdd1
000114 95b3                      	inc		XH
                                 testAdd1:
000115 9553                      	inc		reg_cpt1
000116 3055                      	cpi		reg_cpt1,5
000117 f7b1                      	brne	testAdd
000118 9508                      	ret
                                 SCREEN_INC:
                                 
                                 	;sei
                                 
                                 
                                 
000119 e000                      	ldi		reg_init,0
                                 
                                 loopMain:
                                 	
00011a e050
00011b e060
00011c e020
00011d e6a0
00011e e0b0
00011f 932c
000120 95a3
000121 30a0
000122 f409
000123 95b3
000124 9553
000125 3050
000126 f7c1
000127 9563
000128 3064
000129 f7a9                      	CLR_RAM[]
                                 	;ldi		reg_addrL,0
                                 	;ldi		reg_addrH,0
                                 	;createImgFull[]
                                 
                                 
00012a e430                      	ldi		reg_addrL,64
00012b e040                      	ldi		reg_addrH,0
00012c e525                      	ldi		reg_lettre,C_R
00012d dfda                      	rcall	addImgChar
                                 
00012e e436                      	ldi		reg_addrL,CHAR_SIZE+64
00012f e040                      	ldi		reg_addrH,0
000130 e624                      	ldi		reg_lettre,C_U
000131 dfd6                      	rcall	addImgChar
                                 	
000132 e43c                      	ldi		reg_addrL,CHAR_SIZE*2+64
000133 e040                      	ldi		reg_addrH,0
000134 e426                      	ldi		reg_lettre,C_O
000135 dfd2                      	rcall	addImgChar
                                 	
000136 e532                      	ldi		reg_addrL,CHAR_SIZE*3+64
000137 e040                      	ldi		reg_addrH,0
000138 e22d                      	ldi		reg_lettre,C_J
000139 dfce                      	rcall	addImgChar
                                 	
00013a e538                      	ldi		reg_addrL,CHAR_SIZE*4+64
00013b e040                      	ldi		reg_addrH,0
00013c e421                      	ldi		reg_lettre,C_N
00013d dfca                      	rcall	addImgChar
                                 	
00013e e53e                      	ldi		reg_addrL,CHAR_SIZE*5+64
00013f e040                      	ldi		reg_addrH,0
000140 e426                      	ldi		reg_lettre,C_O
000141 dfc6                      	rcall	addImgChar
                                 	
000142 e634                      	ldi		reg_addrL,CHAR_SIZE*6+64
000143 e040                      	ldi		reg_addrH,0
000144 e025                      	ldi		reg_lettre,C_B
000145 dfc2                      	rcall	addImgChar
                                 
000146 e03c                      	ldi		reg_addrL,CHAR_SIZE*2
000147 e040                      	ldi		reg_addrH,0
000148 e525                      	ldi		reg_lettre,C_R
000149 dfbe                      	rcall	addImgChar
                                 
00014a e132                      	ldi		reg_addrL,CHAR_SIZE*3
00014b e040                      	ldi		reg_addrH,0
00014c e124                      	ldi		reg_lettre,C_E
00014d dfba                      	rcall	addImgChar
                                 
00014e e138                      	ldi		reg_addrL,CHAR_SIZE*4
00014f e040                      	ldi		reg_addrH,0
000150 e624                      	ldi		reg_lettre,C_U
000151 dfb6                      	rcall	addImgChar
                                 
000152 e13e                      	ldi		reg_addrL,CHAR_SIZE*5
000153 e040                      	ldi		reg_addrH,0
000154 e426                      	ldi		reg_lettre,C_O
000155 dfb2                      	rcall	addImgChar
                                 
000156 e234                      	ldi		reg_addrL,CHAR_SIZE*6
000157 e040                      	ldi		reg_addrH,0
000158 e22d                      	ldi		reg_lettre,C_J
000159 dfae                      	rcall	addImgChar
                                 
00015a e6a2                      	ldi		XL,LOW(btL)
00015b e0b4                      	ldi		XH,HIGH(btL)
00015c 915c                      	ld		reg_cpt1,X
                                 
00015d e830                      	ldi		reg_addrL,128
00015e e040                      	ldi		reg_addrH,0
00015f ef20                      	ldi		reg_lettre,C_#
000160 9bc9                      	b0[]
000161 dfa6                      	rcall	addImgChar
                                 
000162 e836                      	ldi		reg_addrL,CHAR_SIZE+128
000163 e040                      	ldi		reg_addrH,0
000164 ef20                      	ldi		reg_lettre,C_#
000165 9bca                      	b1[]
000166 dfa1                      	rcall	addImgChar
                                 
000167 e83c                      	ldi		reg_addrL,CHAR_SIZE*2+128
000168 e040                      	ldi		reg_addrH,0
000169 ef20                      	ldi		reg_lettre,C_#
00016a 9bcb                      	b2[]
00016b df9c                      	rcall	addImgChar
                                 
00016c e932                      	ldi		reg_addrL,CHAR_SIZE*3+128
00016d e040                      	ldi		reg_addrH,0
00016e ef20                      	ldi		reg_lettre,C_#
00016f 9bcc                      	b3[]
000170 df97                      	rcall	addImgChar
                                 
000171 2f60                      	mov		reg_cpt2,reg_init
000172 9bca                      	b1[]
000173 e060                      	ldi		reg_cpt2,0
000174 9bcc                      	b3[]
000175 e460                      	ldi		reg_cpt2,64
000176 2f06                      	mov		reg_init,reg_cpt2
                                 
000177 e23a                      	ldi		reg_addrL,CHAR_SIZE*7
000178 0f36                      	add		reg_addrL,reg_cpt2
                                 
                                 	;ldi		reg_addrL,CHAR_SIZE*7+64
000179 e040                      	ldi		reg_addrH,0
00017a ef25                      	ldi		reg_lettre,C_CH
00017b df8c                      	rcall	addImgChar
                                 	
00017c df38                      	rcall	writeFullSreen
                                 
00017d cf9c                      	rjmp	loopMain
                                 
                                 start:
                                 
00017e cfff                          rjmp	start


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16A" register use summary:
x  :   5 y  :   0 z  :   0 r0 :   1 r1 :   4 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  19 r17:   0 r18:  48 r19:  22 r20:  20 
r21:  13 r22:  17 r23:   9 r24:   0 r25:  18 r26:  13 r27:   9 r28:   9 
r29:  15 r30:   1 r31:   4 
Registers used: 17 out of 35 (48.6%)

"ATmega16A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   2 adiw  :   0 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   9 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  18 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   0 cpc   :   0 
cpi   :   8 cpse  :   0 dec   :   1 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  10 inc   :  18 jmp   :   2 
ld    :   3 ldd   :   0 ldi   : 104 lds   :   1 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   6 movw  :   1 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   0 ori   :   6 out   :  38 pop   :   0 
push  :   0 rcall :  34 ret   :   9 reti  :   2 rjmp  :  17 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  21 sbic  :   3 sbis  :   9 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   5 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 sts   :   1 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 30 out of 113 (26.5%)

"ATmega16A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%  Warn
--------------------------------------------------------------------
[.cseg] 0x000000 0x0002fe    680      0    680   16384   4.2%
[.dseg] 0x000060 0x000466      0   1030   1030    1024 100.6%  OVER
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 7 warnings
