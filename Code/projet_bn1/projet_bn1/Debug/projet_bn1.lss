
AVRASM ver. 2.2.7  D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm Sat Jan 04 10:37:04 2020

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16adef.inc'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(22): warning: Register r28 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(23): warning: Register r29 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(32): warning: Register r31 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(39): warning: Register r30 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(105): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\io.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(107): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\uart.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(109): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\adc.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(111): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\timer.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(113): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\spi.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(115): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\screen.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(117): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\char_array.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16adef.inc'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(105): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\io.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(107): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\uart.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(109): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\adc.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(111): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\timer.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(113): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\spi.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(115): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\screen.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(117): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\char_array.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16A.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m16Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega16A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega16A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M16ADEF_INC_
                                 #define _M16ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega16A
                                 #pragma AVRPART ADMIN PART_NAME ATmega16A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x94
                                 .equ	SIGNATURE_002	= 0x03
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SE	= 6	; Sleep Enable
                                 .equ	SM2	= 7	; Sleep Mode Select
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special function I/O register
                                 ;.equ	PSR10	= 0	; Prescaler reset
                                 .equ	PSR2	= 1	; Prescaler reset
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 16384
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1c00
                                 .equ	NRWW_STOP_ADDR	= 0x1fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1bff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x1f80
                                 .equ	SECONDBOOTSTART	= 0x1f00
                                 .equ	THIRDBOOTSTART	= 0x1e00
                                 .equ	FOURTHBOOTSTART	= 0x1c00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M16ADEF_INC_ */
                                 
                                 
                                 ; main.asm
                                 ;
                                 ; Created: 25/10/2019 13:42:48
                                 ; Author : jsoudier01
                                 ;
                                 ;code programme
                                 
                                 ;.nolist 
                                 ;.include "m16def.inc"
                                 ;.list 
                                 
                                 .def tri = r1						; TimerInterruptRegister.
                                 
                                 .def reg_init = r16
                                 
                                 ;.def reg_test1 = r15
                                 ;.def reg_test2 = r14
                                 ;.def reg_test3 = r13
                                 ;.def reg_bt1 = r24
                                 
                                 .def reg_posX = r28
                                 .def reg_posY = r29
                                 ;.def reg_work = r24
                                 
                                 .def reg_spi = r17
                                 .def reg_addrL = r19
                                 .def reg_addrH = r20
                                 
                                 .def reg_cpt1 = r21
                                 .def reg_cpt2 = r22
                                 .def reg_cpt3 = r31
                                 .def reg_screen = r18
                                 
                                 .def reg_cptT0 = r23
                                 
                                 .def reg_vol = r25
                                 
                                 .def reg_TX = r30
                                 .def reg_RX = r24
                                 
                                 .dseg
000060                           	num_son:	.byte 1
000061                           	num_son2:	.byte 1
000062                           	C_Wait:		.byte 5
000067                           	Table:		.byte 8
00006f                           	conv:		.byte 1
000070                           	convB:		.byte 1
000071                           	conv2:		.byte 1
000072                           	dead:		.byte 1
                                 
                                 .cseg  ; codesegment
                                 .org	0x00
000000 c02f                         rjmp	RESET 
                                 
                                 ; interrupt-vector commands, 1 Byte each:
                                 /*	reti							; 1:  $000(1) RESET External Pin, Power-on Reset, Brown-out Reset, Watchdog Reset, and JTAG AVR Reset
                                 	reti							; 2:  $002 INT0 External Interrupt Request 0 
                                 	reti							; 3:  $004 INT1 External Interrupt Request 1 
                                 	reti							; 4:  $006 TIMER2 COMP Timer/Counter2 Compare Match 
                                 	reti							; 5:  $008 TIMER2 OVF Timer/Counter2 Overflow 
                                 	reti							; 6:  $00A TIMER1 CAPT Timer/Counter1 Capture Event
                                 	reti							; 7:  $00C TIMER1 COMPA Timer/Counter1 Cmp Match A 
                                 	reti							; 8:  $00E TIMER1 COMPB Timer/Counter1 Cmpe Match B
                                 	rjmp TI_Interrupt				; 9:  $010 TIMER1 OVF Timer/Counter1 Overflow
                                 	reti							; 10: $012 TIMER0 OVF Timer/Counter0 Overflow
                                 	reti							; 11: $014 SPI, STC Serial Transfer Complete
                                 	rjmp UART_Interrupt				; 12: $016 USART, RXC USART, Rx Complete
                                 	reti							; 13: $018 USART, UDRE USART Data Register Empty 
                                 	reti							; 14: $01A USART, TXC USART, Tx Complete 
                                 	reti							; 15: $01C ADC ADC Conversion Complete 
                                 	reti							; 16: $01E EE_RDY EEPROM Ready
                                 	reti							; 17: $020 ANA_COMP Analog Comparator 
                                 	reti							; 18: $022 TWI Two-wire Serial Interface
                                 	reti							; 19: $024 INT2 External Interrupt Request 2
                                 	reti							; 20: $026 TIMER0 COMP Timer/Counter0 Compare Match
                                 	reti							; 21 $028 SPM_RDY Store Program Memory Reazdy
                                 	*/
                                 .org 0x0C
00000c 9518                      	reti
                                 .org 0x0A
00000a 9518                      	reti
                                 .org 0x10
000010 940c 007d                 	jmp		TI1_Interrupt
                                 .org 0x12
000012 940c 00a1                 	jmp		TI0_interrupt
                                 .org 0x16
000016 940c 0050                 	jmp		UART_Interrupt
                                 
                                 .org 0x30							; se placer à la case mémoire 10 en hexa
                                 reset:								; adresse du vecteur de reset
000030 e004                      	ldi		r16,high(RAMEND)		; initialisation de la pile
000031 bf0e                      	out		SPH,r16
000032 e50f                      	ldi		r16,low(RAMEND)
000033 bf0d                      	out		SPL,r16
                                 
000034 efff                      	ldi		reg_cpt3,255
000035 d094                      	rcall	tempo_US
                                 
000036 e1cf                      	ldi		reg_posX,31
000037 e0da                      	ldi		reg_posY,10
                                 
                                 
                                 	;ajout des programmes pour la gestion des modules
                                 	.include "io.asm"
                                 
                                 
                                 IO_Init:
000038 e000                      	ldi		reg_init,0x00			;porta en entrée
000039 bb0a                      	out		DDRA,reg_init
00003a eb0f                      	ldi		reg_init,0xBF			;portb en entrée sur miso
00003b bb07                      	out		DDRB,reg_init
00003c ef0f                      	ldi		reg_init,0xFF			;portc en sortie
00003d bb04                      	out		DDRC,reg_init
00003e ee02                      	ldi		reg_init,0xE2			;portd en sortie sur TX, BUZZER et LED
00003f bb01                      	out		DDRD,reg_init
000040 c000                      IO_INC:
                                 	.include "uart.asm"
                                 
                                 .equ baud = 51								;9600 =>103
                                 
                                 USART_Init:									; Set baud rate to UBRR0 
000041 e3e3                      	ldi		reg_TX,baud
000042 b9e9                      	out		UBRRL, reg_TX					; Enable receiver and transmitter  
000043 e0e0                      	ldi		reg_TX,0 
000044 bde0                      	out		UBRRH, reg_TX    
000045 e0e0                      	ldi		reg_TX,0
000046 b9eb                      	out		UCSRA,reg_TX
000047 e9e8                      	ldi		reg_TX,(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)   
000048 b9ea                      	out		UCSRB,reg_TX					; Set frame format: 8data, 2stop bit   
000049 e8ee                      	ldi		reg_TX,(1<<URSEL)|(1<<USBS)|(3<<UCSZ0)   
00004a bde0                      	out		UCSRC,reg_TX  
                                 
00004b c00d                      	rjmp	UART_INC					;go to main
                                 
                                 ;mov		reg_TX,reg_XXXX
                                 ;andi		reg_TX,   0x80 (posX), 0x40 (posY), 0x00 (Kill)
                                 USART_Transmit:								; Wait for empty transmit buffer
00004c 9b5d                      	sbis	UCSRA,UDRE 
00004d cffe                      	rjmp	USART_Transmit					; Put data (r16) into buffer, sends the data   
00004e b9ec                      	out		UDR,reg_TX   
00004f 9508                      	ret 
                                 
                                 UART_Interrupt:
000050 b61f                      	in		tri,SREG						; save content of flag reg.
000051 b18c                      	in		reg_RX,UDR
000052 3080                      	cpi		reg_RX,0
000053 f411                      	brne	END_UART
000054 9380 0072                 	sts		dead,reg_RX
                                 END_UART:
000056 738f                      	andi	reg_RX,0x3F
000057 be1f                      	out		SREG,tri						; restore flag register
000058 9518                      	reti 									; Return from interrupt
                                 UART_INC:
                                 	.include "adc.asm"
                                 
                                 
                                 ADC_Init:
000059 e600                      	ldi		reg_init,(1<<ADLAR)|(1<<REFS0)														;ext ref / left adjust / mux toADC0
00005a b907                      	out		ADMUX,reg_init
00005b ec06                      	ldi		reg_init,(1<<ADEN)|(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)						;adc enable / adc start / no auto trig / no interrupt / div 64
00005c b906                      	out		ADCSRA,reg_init
00005d c000                      ADC_INC:
                                 	.include "timer.asm"
                                 
                                 
                                 .macro bGa[]
                                 	sbis	PINA,1
                                 .endmacro
                                 .macro bGan[]
                                 	sbic	PINA,1
                                 .endmacro
                                 .macro bBa[]
                                 	sbis	PINA,2
                                 .endmacro
                                 .macro bBan[]
                                 	sbic	PINA,2
                                 .endmacro
                                 .macro bDr[]
                                 	sbis	PINA,3
                                 .endmacro
                                 .macro bDrn[]
                                 	sbic	PINA,3
                                 .endmacro
                                 .macro bHa[]
                                 	sbis	PINA,4
                                 .endmacro
                                 .macro bHan[]
                                 	sbic	PINA,4
                                 .endmacro
                                 .macro bB[]
                                 	sbis	PINA,5
                                 .endmacro
                                 .macro bBn[]
                                 	sbic	PINA,5
                                 .endmacro
                                 .macro bA[]
                                 	sbis	PINA,6
                                 .endmacro
                                 .macro bAn[]
                                 	sbic	PINA,6
                                 .endmacro
                                 .macro bSta[]
                                 	sbis	PINA,7
                                 .endmacro
                                 .macro bStan[]
                                 	sbic	PINA,7
                                 .endmacro
                                 .macro bSel[]
                                 	sbis	PIND,2
                                 .endmacro
                                 .macro bSeln[]
                                 	sbic	PIND,2
                                 .endmacro
                                 .macro bL[]
                                 	sbis	PIND,3
                                 .endmacro
                                 .macro bLn[]
                                 	sbic	PIND,3
                                 .endmacro
                                 .macro bR[]
                                 	sbis	PIND,4
                                 .endmacro
                                 .macro bRn[]
                                 	sbic	PIND,4
                                 .endmacro
                                 
                                 TIMER_Init:
00005e e095                      	ldi		reg_vol,(1<<CS02)|(1<<CS00)
00005f bf93                      	out		TCCR0,reg_vol
000060 b799                      	in		reg_vol,TIMSK
000061 6091                      	ori		reg_vol,(1<<TOIE0)
000062 bf99                      	out		TIMSK,reg_vol
000063 e070                      	ldi		reg_cptT0,0
                                 
000064 e892                      	ldi		reg_vol,(1<<WGM11)|(1<<COM1A1)			;timer1
000065 bd9f                      	out		TCCR1A,reg_vol
000066 e19a                      	ldi		reg_vol,(1<<WGM13)|(1<<WGM12)|(1<<CS11)
000067 bd9e                      	out		TCCR1B,reg_vol				;démarrage du timer à 16KHz => soit à 8k
000068 b798                      	in		reg_vol,TIFR				;clear flag
000069 7f9b                      	andi	reg_vol,0xFB
00006a bf98                      	out		TIFR,reg_vol
00006b b799                      	in		reg_vol,TIMSK				;interrupt enable
00006c 6394                      	ori		reg_vol,(1<<TICIE1)|(1<<TOIE1)|(1<<OCIE1A)
00006d bf99                      	out		TIMSK,reg_vol
                                 
00006e e090                      	ldi		reg_vol,0
00006f bd9b                      	out		OCR1AH,reg_vol
000070 e091                      	ldi		reg_vol,1
000071 bd9a                      	out		OCR1AL,reg_vol
                                 
000072 e694                      	ldi		reg_vol,100
000073 bd97                      	out		ICR1H,reg_vol
000074 ef9f                      	ldi		reg_vol,255
000075 bd96                      	out		ICR1L,reg_vol
                                 
000076 e194                      	ldi		reg_vol,20
000077 9390 0060                 	sts		num_son,reg_vol
000079 e092                      	ldi		reg_vol,2
00007a 9390 0061                 	sts		num_son2,reg_vol
                                 	
                                 
00007c c02b                      	rjmp	TIMER_INC
                                 
                                 
                                 TI1_Interrupt:
00007d b61f                      	in		tri,SREG					; save content of flag reg.
                                 
00007e 9190 0061                 	lds		reg_vol,num_son2				;chargement de l'addresse du caractère
000080 3092                      	cpi		reg_vol,2
000081 f4c8                      	brsh	No_sound
                                 
                                 conv_son:
000082 99e1                      	sbic	EECR,EEWE					;test de d'écriture dans l'eeprom
000083 cffe                      	rjmp	conv_son
                                 
                                 	
000084 bb9f                      	out		EEARH,reg_vol
000085 9190 0060                 	lds		reg_vol,num_son
000087 bb9e                      	out		EEARL,reg_vol
                                 	
000088 9ae0                      	sbi		EECR,EERE				;test de fin de lecture
000089 b39d                      	in		reg_vol,EEDR			;lecture
00008a bd97                      	out		ICR1H,reg_vol			;set freq
                                 
                                 
                                 	;gestion du volume
00008b e090                      	ldi		reg_vol,0
00008c bd9b                      	out		OCR1AH,reg_vol
00008d b195                      	in		reg_vol,ADCH				;on lit la valeur de l'adc convertie
00008e bd9a                      	out		OCR1AL,reg_vol
                                 
00008f b196                      	in		reg_vol,ADCSRA
000090 6490                      	ori		reg_vol,(1<<ADSC)			;relance d'une conversion
000091 b996                      	out		ADCSRA,reg_vol
000092 e090                      	ldi		reg_vol,0
000093 bd9d                      	out		TCNT1H,reg_vol
000094 bd9c                      	out		TCNT1L,reg_vol
                                 
                                 	;gestion de la led
000095 9986                      	sbic	PIND,6						;blink led
000096 9896                      	cbi		PORTD,6
000097 9b86                      	sbis	PIND,6
000098 9a96                      	sbi		PORTD,6
                                 
                                 	
                                 
000099 be1f                      	out		SREG,tri					; restore flag register
00009a 9518                      	reti 								; Return from interrupt
                                 
                                 No_sound:
00009b e090                      	ldi		reg_vol,0
00009c bd9a                      	out		OCR1AL,reg_vol
00009d e090                      	ldi		reg_vol,0
00009e bd9d                      	out		TCNT1H,reg_vol
00009f bd9c                      	out		TCNT1L,reg_vol
0000a0 9518                      	reti
                                 
                                 TI0_interrupt:
0000a1 b61f                      	in		tri,SREG					; save content of flag reg.
0000a2 9573                      	inc		reg_cptT0
0000a3 3170                      	cpi		reg_cptT0,16
0000a4 f409                      	brne	END_T0
0000a5 e070                      	ldi		reg_cptT0,0
                                 END_T0:
0000a6 be1f                      	out		SREG,tri					; restore flag register
0000a7 9518                      TIMER_INC:
                                 	.include "spi.asm"
                                 
                                 
                                 .equ WREN = 0x06
                                 .equ WRDI = 0x04
                                 .equ READ = 0x03
                                 .equ WRITE = 0x02
                                 
                                 .macro WR_DI[]
                                 	cbi		PORTB,4
                                 	ldi		reg_spi,WRDI
                                 	rcall	SPI_Transmit
                                 	sbi		PORTB,4
                                 .endmacro
                                 
                                 SPI_Init:
0000a8 e511                      	ldi		reg_spi,(1<<SPE)|(1<<MSTR)|(1<<SPR0)	; ON / MASTER / fosc/16
0000a9 b91d                      	out		SPCR,reg_spi
0000aa 9ac4                      	sbi		PORTB,4									;set SS
0000ab 98c4
0000ac e014
0000ad d002
0000ae 9ac4                      	WR_DI[]
0000af c010                      	rjmp	SPI_INC
                                 
                                 SPI_Transmit:										;attente transmission
0000b0 b91f                      	out		SPDR,reg_spi							;envoi msg
                                 Wait_SPI:
0000b1 9b77                      	sbis	SPSR,SPIF								;test si fini
0000b2 cffe                      	rjmp	Wait_SPI
0000b3 b11f                      	in		reg_spi,SPDR							;lecture de la réponse
0000b4 9508                      	ret
                                 
                                 Read_Mem:
0000b5 98c4                      	cbi		PORTB,4									;clear SS
0000b6 e013                      	ldi		reg_spi,READ							;instruction de lecture mémoire
0000b7 dff8                      	rcall	SPI_Transmit
0000b8 2f14                      	mov		reg_spi,reg_addrH						;sélection de l'adresse H
0000b9 dff6                      	rcall	SPI_Transmit
0000ba 2f13                      	mov		reg_spi,reg_addrL						;sélection de l'adresse L
0000bb dff4                      	rcall	SPI_Transmit
0000bc e010                      	ldi		reg_spi,0x00							;lecture de la réponse
0000bd dff2                      	rcall	SPI_Transmit
0000be 9ac4                      	sbi		PORTB,4									;set SS
0000bf 9508                      	ret
                                 SPI_INC:
                                 	.include "screen.asm"
                                 
                                 
                                 .macro screenL[]					;choix du côté de l'écran à gauche
                                 	sbi		PORTB,0
                                 	cbi		PORTB,1
                                 .endmacro
                                 
                                 .macro screenR[]					;choix du côté de l'écran à droite
                                 	sbi		PORTB,1
                                 	cbi		PORTB,0
                                 .endmacro
                                 
                                 .macro Enable[]						;validation de la commande sur l'écran
                                 	cbi		PORTB,3
                                 	ldi		reg_cpt3,250
                                 	rcall	tempo_US
                                 	sbi		PORTB,3
                                 .endmacro
                                 
                                 .macro SetPosX[]					;pos de 0 à 7 (à changer à chaque fois)
                                 	RS_clear[]
                                 	ori		reg_screen,0xB8
                                 	out		PORTC,reg_screen
                                 	Enable[]
                                 	RS_set[]
                                 .endmacro
                                 
                                 .macro SetPosY[]					;pos de 0 à 64 (auto)
                                 	RS_clear[]
                                 	ori		reg_screen,0x40
                                 	out		PORTC,reg_screen
                                 	Enable[]
                                 	RS_set[]
                                 .endmacro
                                 
                                 .macro RS_clear[]					;changement de bit instruction/données
                                 	cbi		PORTB,2
                                 .endmacro
                                 
                                 .macro RS_set[]						;changement de bit instruction/données
                                 	sbi		PORTB,2
                                 .endmacro
                                 
                                 .macro ScreenWrite[]				;affichage sur l'écran
                                 	out		PORTC,reg_screen
                                 	Enable[]
                                 .endmacro
                                 
                                 .macro placePosPerso[]
                                 	mov		reg_screen,reg_posY
                                 	andi	reg_screen,7
                                 	ldi		XL,LOW(Table)
                                 	ldi		XH,HIGH(Table)
                                 	add		XL,reg_screen
                                 	ld		reg_screen,X
                                 	sts		conv,reg_screen
                                 
                                 	ldi		reg_screen,255
                                 	cpi		reg_posY,8
                                 	brlo	END_PERSO
                                 	cpi		reg_posY,16
                                 	ldi		reg_screen,191
                                 	brlo	END_PERSO
                                 	ldi		reg_screen,127
                                 END_PERSO:
                                 	sub		reg_screen,reg_posX
                                 	sts		convB,reg_screen
                                 	ldi		reg_screen,7
                                 	cpi		reg_posY,8
                                 	brlo	END_PERSO2
                                 	cpi		reg_posY,16
                                 	ldi		reg_screen,6
                                 	brlo	END_PERSO2
                                 	ldi		reg_screen,5
                                 END_PERSO2:
                                 	sts		conv2,reg_screen
                                 .endmacro
                                 
                                 .macro SetPosPerso[]
                                 	cpi		reg_posX,31
                                 	breq	END_SetPerso
                                 	lds		reg_screen,conv2
                                 	cp		reg_cpt2,reg_screen
                                 	brne	END_SetPerso
                                 	lds		reg_screen,convB
                                 	andi	reg_screen,0x3F
                                 	cp		reg_cpt1,reg_screen
                                 	brne	END_SetPerso
                                 	lds		reg_screen,conv
                                 	or		reg_spi,reg_screen
                                 END_SetPerso:
                                 .endmacro
                                 
                                 .macro ClearPosPerso[]
                                 	lds		reg_screen,conv2
                                 	cp		reg_cpt2,reg_screen
                                 	brne	END_ClearPerso
                                 	lds		reg_screen,convB
                                 	andi	reg_screen,0x3F
                                 	cp		reg_cpt1,reg_screen
                                 	brne	END_ClearPerso
                                 	lds		reg_screen,conv
                                 	com		reg_screen
                                 	and		reg_spi,reg_screen
                                 END_ClearPerso:
                                 .endmacro
                                 
                                 SCREEN_Init:
0000c0 9ac3                      	sbi		PORTB,3					;set E and clear RS
0000c1 98c2                      	cbi		PORTB,2
0000c2 e32f                      	ldi		reg_screen,63			;instruction de début de l'écran
0000c3 bb25                      	out		PORTC,reg_screen
0000c4 98c3
0000c5 effa
0000c6 d003
0000c7 9ac3                      	Enable[]						;validation
0000c8 9ac2                      	RS_set[]						;mode données
0000c9 c108                      	rjmp	SCREEN_INC
                                 
                                 tempo_US:
0000ca 95fa                      	dec		reg_cpt3
0000cb 0000                      	nop
0000cc f7e9                      	brne	tempo_US
0000cd 9508                      	ret
                                 
                                 ;full reg_addrL/H
                                 writeFullSreen:
0000ce 2f2d
0000cf 7027
0000d0 e6a7
0000d1 e0b0
0000d2 0fa2
0000d3 912c
0000d4 9320 006f
0000d6 ef2f
0000d7 30d8
0000d8 f020
0000d9 31d0
0000da eb2f
0000db f008
0000dc e72f
0000dd 1b2c
0000de 9320 0070
0000e0 e027
0000e1 30d8
0000e2 f020
0000e3 31d0
0000e4 e026
0000e5 f008
0000e6 e025
0000e7 9320 0071                 	placePosPerso[]
0000e9 9ac1
0000ea 98c0                      	screenR[]						;set side screen
0000eb e060                      	ldi		reg_cpt2,0				;reset var
                                 loop1:
0000ec e050                      	ldi		reg_cpt1,0
0000ed e020                      	ldi		reg_screen,0			;set pos Y = 0
0000ee 98c2
0000ef 6420
0000f0 bb25
0000f1 98c3
0000f2 effa
0000f3 dfd6
0000f4 9ac3
0000f5 9ac2                      	SetPosY[]
0000f6 2f26                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
0000f7 98c2
0000f8 6b28
0000f9 bb25
0000fa 98c3
0000fb effa
0000fc dfcd
0000fd 9ac3
0000fe 9ac2                      	SetPosX[]
                                 loop2:
0000ff dfb5                      	rcall	Read_Mem					;lecture de la mémoire spi
000100 2f21                      	mov		reg_screen,reg_spi
000101 bb25
000102 98c3
000103 effa
000104 dfc5
000105 9ac3                      	ScreenWrite[]					;écriture sur l'écran
000106 9533                      	inc		reg_addrL				;incrément de l'adresse LOW
000107 3030                      	cpi		reg_addrL,0
000108 f409                      	brne	addr_carry1				;test du carry
000109 9543                      	inc		reg_addrH
                                 addr_carry1:
                                 
00010a 9553                      	inc		reg_cpt1				;incrément du compteur 1
00010b ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
00010c cff2                      	rjmp	loop2
                                 
00010d 9563                      	inc		reg_cpt2				;incrément du copteur 2
00010e ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
00010f cfdc                      	rjmp	loop1
                                 
000110 9ac0
000111 98c1                      	screenL[]						;set side screen
000112 e060                      	ldi		reg_cpt2,0				;reset var
                                 loop3:
000113 e050                      	ldi		reg_cpt1,0
000114 e020                      	ldi		reg_screen,0			;set pos Y = 0
000115 98c2
000116 6420
000117 bb25
000118 98c3
000119 effa
00011a dfaf
00011b 9ac3
00011c 9ac2                      	SetPosY[]
00011d 2f26                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
00011e 98c2
00011f 6b28
000120 bb25
000121 98c3
000122 effa
000123 dfa6
000124 9ac3
000125 9ac2                      	SetPosX[]
                                 loop4:
000126 df8e                      	rcall	Read_Mem					;lecture de la mémoire spi
000127 3078                      	cpi		reg_cptT0,8
000128 f468                      	brsh	PRINT
000129 9120 0071
00012b 1762
00012c f449
00012d 9120 0070
00012f 732f
000130 1752
000131 f421
000132 9120 006f
000134 9520
000135 2312                      	ClearPosPerso[]
                                 PRINT:
000136 3078                      	cpi		reg_cptT0,8
000137 f070                      	brlo	PRINT1
000138 31cf
000139 f061
00013a 9120 0071
00013c 1762
00013d f441
00013e 9120 0070
000140 732f
000141 1752
000142 f419
000143 9120 006f
000145 2b12                      	SetPosPerso[]
                                 PRINT1:
000146 2f21                      	mov		reg_screen,reg_spi
000147 bb25
000148 98c3
000149 effa
00014a df7f
00014b 9ac3                      	ScreenWrite[]					;écriture sur l'écran
00014c 9533                      	inc		reg_addrL				;incrément de l'adresse LOW
00014d 3030                      	cpi		reg_addrL,0
00014e f409                      	brne	addr_carry2				;test du carry
00014f 9543                      	inc		reg_addrH
                                 addr_carry2:
                                 
000150 9553                      	inc		reg_cpt1				;incrément du compteur 1
000151 ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
000152 cfd3                      	rjmp	loop4
                                 
000153 9563                      	inc		reg_cpt2				;incrément du copteur 2
000154 ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
000155 cfbd                      	rjmp	loop3
000156 9508                      	ret
                                 
                                 
                                 clearFullSreen:
000157 9ac1
000158 98c0                      	screenR[]						;set side screen
000159 e060                      	ldi		reg_cpt2,0				;reset var
                                 loop5:
00015a e050                      	ldi		reg_cpt1,0
00015b e020                      	ldi		reg_screen,0			;set pos Y = 0
00015c 98c2
00015d 6420
00015e bb25
00015f 98c3
000160 effa
000161 df68
000162 9ac3
000163 9ac2                      	SetPosY[]
000164 2f26                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
000165 98c2
000166 6b28
000167 bb25
000168 98c3
000169 effa
00016a df5f
00016b 9ac3
00016c 9ac2                      	SetPosX[]
                                 loop6:
00016d e020                      	ldi		reg_screen,0
00016e bb25
00016f 98c3
000170 effa
000171 df58
000172 9ac3                      	ScreenWrite[]					;écriture sur l'écran
                                 
000173 9553                      	inc		reg_cpt1				;incrément du compteur 1
000174 ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
000175 cff7                      	rjmp	loop6
                                 
000176 9563                      	inc		reg_cpt2				;incrément du copteur 2
000177 ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
000178 cfe1                      	rjmp	loop5
                                 
000179 9ac0
00017a 98c1                      	screenL[]						;set side screen
00017b e060                      	ldi		reg_cpt2,0				;reset var
                                 loop7:
00017c e050                      	ldi		reg_cpt1,0
00017d e020                      	ldi		reg_screen,0			;set pos Y = 0
00017e 98c2
00017f 6420
000180 bb25
000181 98c3
000182 effa
000183 df46
000184 9ac3
000185 9ac2                      	SetPosY[]
000186 2f26                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
000187 98c2
000188 6b28
000189 bb25
00018a 98c3
00018b effa
00018c df3d
00018d 9ac3
00018e 9ac2                      	SetPosX[]
                                 loop8:
00018f e020                      	ldi		reg_screen,0
000190 bb25
000191 98c3
000192 effa
000193 df36
000194 9ac3                      	ScreenWrite[]					;écriture sur l'écran
                                 
000195 9553                      	inc		reg_cpt1				;incrément du compteur 1
000196 ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
000197 cff7                      	rjmp	loop8
                                 
000198 9563                      	inc		reg_cpt2				;incrément du copteur 2
000199 ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
00019a cfe1                      	rjmp	loop7
00019b 9508                      	ret
                                 
                                 writeChar:
00019c 9ac0
00019d 98c1                      	screenL[]
00019e e02a                      	ldi		reg_screen,10
00019f 0f23                      	add		reg_screen,reg_addrL
0001a0 98c2
0001a1 6420
0001a2 bb25
0001a3 98c3
0001a4 effa
0001a5 df24
0001a6 9ac3
0001a7 9ac2                      	SetPosY[]
0001a8 e024                      	ldi		reg_screen,4
0001a9 98c2
0001aa 6b28
0001ab bb25
0001ac 98c3
0001ad effa
0001ae df1b
0001af 9ac3
0001b0 9ac2                      	SetPosX[]
0001b1 e6a2                      	ldi		XL,LOW(C_Wait)
0001b2 e0b0                      	ldi		XH,HIGH(C_Wait)
0001b3 912d                      	ld		reg_screen,X+
0001b4 bb25
0001b5 98c3
0001b6 effa
0001b7 df12
0001b8 9ac3                      	ScreenWrite[]
0001b9 912d                      	ld		reg_screen,X+
0001ba bb25
0001bb 98c3
0001bc effa
0001bd df0c
0001be 9ac3                      	ScreenWrite[]
0001bf 912d                      	ld		reg_screen,X+
0001c0 bb25
0001c1 98c3
0001c2 effa
0001c3 df06
0001c4 9ac3                      	ScreenWrite[]
0001c5 912d                      	ld		reg_screen,X+
0001c6 bb25
0001c7 98c3
0001c8 effa
0001c9 df00
0001ca 9ac3                      	ScreenWrite[]
0001cb 912d                      	ld		reg_screen,X+
0001cc bb25
0001cd 98c3
0001ce effa
0001cf defa
0001d0 9ac3                      	ScreenWrite[]
0001d1 9508                      SCREEN_INC:
                                 	.include "char_array.asm"
                                 
0001d2 e6a2                      	ldi		XL,LOW(C_Wait)			;load '#'
0001d3 e0b0                      	ldi		XH,HIGH(C_Wait)
0001d4 e104                      	ldi		reg_init,0x14
0001d5 930d                      	st		X+,reg_init
0001d6 ef0f                      	ldi		reg_init,0xFF
0001d7 930d                      	st		X+,reg_init
0001d8 e104                      	ldi		reg_init,0x14
0001d9 930d                      	st		X+,reg_init
0001da ef0f                      	ldi		reg_init,0xFF
0001db 930d                      	st		X+,reg_init
0001dc e104                      	ldi		reg_init,0x14
0001dd 930c                      	st		X,reg_init
0001de e6a7                      	ldi		XL,LOW(Table)			;load table
0001df e0b0                      	ldi		XH,HIGH(Table)
0001e0 e800                      	ldi		reg_init,0x80
0001e1 930d                      	st		X+,reg_init
0001e2 e400                      	ldi		reg_init,0x40
0001e3 930d                      	st		X+,reg_init
0001e4 e200                      	ldi		reg_init,0x20
0001e5 930d                      	st		X+,reg_init
0001e6 e100                      	ldi		reg_init,0x10
0001e7 930d                      	st		X+,reg_init
0001e8 e008                      	ldi		reg_init,0x08
0001e9 930d                      	st		X+,reg_init
0001ea e004                      	ldi		reg_init,0x04
0001eb 930d                      	st		X+,reg_init
0001ec e002                      	ldi		reg_init,0x02
0001ed 930d                      	st		X+,reg_init
0001ee e001                      	ldi		reg_init,0x01
0001ef 930c                      	st		X,reg_init
0001f0 e001                      	ldi		reg_init,1
0001f1 9300 0072                 	sts		dead,reg_init
0001f3 c000                      	rjmp	CHAR_INC
                                 
                                 .macro Fenetre_Debut[]				;affichage de "JOUER / RESEAU / MENTION"
                                 	ldi		reg_addrL,0x00
                                 	ldi		reg_addrH,0x60
                                 	add		reg_addrH,reg_init
                                 	rcall	writeFullSreen
                                 
                                 .endmacro
                                 
                                 .macro CONNECTED[]				;affichage de "connecte"
                                 	ldi		reg_addrL,0x00
                                 	ldi		reg_addrH,0x6C
                                 	rcall	writeFullSreen
                                 .endmacro
                                 
                                 .macro NO_CONNECTED[]				;affichage de "non connecte"
                                 	ldi		reg_addrL,0x00
                                 	ldi		reg_addrH,0x70
                                 	rcall	writeFullSreen
                                 .endmacro
                                 
                                 .macro MENTION_MA[]			;affichage des mentions
                                 	ldi		reg_addrL,0x00
                                 	ldi		reg_addrH,0x74
                                 	rcall	writeFullSreen
                                 .endmacro
                                 
                                 .macro CONN1[]
                                 	rcall	clearFullSreen
                                 	ldi		reg_addrL,0
                                 	rcall	writeChar
                                 .endmacro
                                 
                                 .macro CONN2[]
                                 	ldi		reg_addrL,6
                                 	rcall	writeChar
                                 .endmacro
                                 
                                 .macro CONN3[]
                                 	ldi		reg_addrL,12
                                 	rcall	writeChar
                                 .endmacro
                                 CHAR_INC:
                                 	
0001f4 9478                      	sei
0001f5 e008                      	ldi		reg_init,8
                                 
                                 loopMain:
0001f6 2f60                      	mov		reg_cpt2,reg_init				;récupération de la position du curseur
0001f7 9bcc                      	bHa[]									;test du bouton "vers le haut"
0001f8 c009                      	rjmp	UP
0001f9 9bca                      	bBa[]									;test du bouton "vers le bas"
0001fa c00e                      	rjmp	DOWN
                                 END:
0001fb 9bce                      	bA[]									;test du bouton validation
0001fc c013                      	rjmp	CHOIX
                                 END_CHOIX:
0001fd e030
0001fe e640
0001ff 0f40
000200 decd                      	Fenetre_Debut[]							;affichage des caractères de la page principale
000201 cff4                      	rjmp	loopMain						;boucle infini
                                 
                                 UP:
000202 3008                      	cpi		reg_init,8						;test si on est tout en haut
000203 f3b9                      	breq	END
000204 3004                      	cpi		reg_init,4						;test si on est au milieu
000205 e008                      	ldi		reg_init,8
000206 f3a1                      	breq	END
000207 e004                      	ldi		reg_init,4
000208 cff2                      	rjmp	END
                                 
                                 DOWN:
000209 3000                      	cpi		reg_init,0							;idem
00020a f381                      	breq	END
00020b 3004                      	cpi		reg_init,4
00020c e000                      	ldi		reg_init,0
00020d f369                      	breq	END
00020e e004                      	ldi		reg_init,4
00020f cfeb                      	rjmp	END
                                 
                                 CHOIX:
000210 3008                      	cpi		reg_init,8						;test du curseur pour éguiller la fonction
000211 f019                      	breq	GAME
000212 3004                      	cpi		reg_init,4
000213 f061                      	breq	RESEAU
000214 c027                      	rjmp	MENTION
                                 
                                 GAME:
000215 e030                      	ldi		reg_addrL,0
000216 e040                      	ldi		reg_addrH,0
000217 e0c2                      	ldi		reg_posX,2
000218 deb5                      	rcall	writeFullSreen
                                 
000219 9bcd                      	bB[]
00021a e008                      	ldi		reg_init,8
00021b 9bcd                      	bB[]
00021c e1cf                      	ldi		reg_posX,31
00021d 9bcd                      	bB[]
00021e cfd7                      	rjmp	loopMain
00021f cff5                      	rjmp	GAME
                                 
                                 RESEAU:
000220 df36
000221 e030
000222 df79                      	CONN1[]
                                 
000223 e4e1                      	ldi		reg_TX,65								;ping en UART
000224 de27                      	rcall	USART_Transmit
                                 
000225 e036
000226 df75                      	CONN2[]
                                 
000227 efff                      	ldi		reg_cpt3,255
000228 d01b                      	rcall	tempo_MS
                                 
000229 e03c
00022a df71                      	CONN3[]
                                 
                                 loopReseau1:
                                 
00022b fd01                      	sbrc	reg_init,1
00022c c00a                      	rjmp	loopReseau2
                                 
00022d 3481                      	cpi		reg_RX,65								;résultat du ping
00022e f021                      	breq	loopReseau3
00022f e030
000230 e740
000231 de9c                      	NO_CONNECTED[]
                                 
000232 c004                      	rjmp	loopReseau2
                                 
                                 loopReseau3:
                                 
000233 e002                      	ldi		reg_init,2
000234 e030
000235 e64c
000236 de97                      	CONNECTED[]
                                 
                                 
                                 loopReseau2:
000237 9bcd                      	bB[]
000238 e008                      	ldi		reg_init,8
000239 9bcd                      	bB[]
00023a cfbb                      	rjmp	loopMain
00023b cfef                      	rjmp	loopReseau1
                                 	
                                 
                                 MENTION:
00023c e030
00023d e744
00023e de8f                      	MENTION_MA[]									;affichage des mentions
00023f 9bcd                      	bB[]
000240 e008                      	ldi		reg_init,8
000241 9bcd                      	bB[]
000242 cfb3                      	rjmp	loopMain
000243 cff8                      	rjmp	MENTION
                                 
                                 ; sous programme de temporisation
                                 tempo_MS:
000244 ef2f                      	ldi	reg_screen, 255
                                 boucletempo_MS:
000245 0000                      	nop
000246 952a                      	dec	reg_screen
000247 f7e9                      	brne boucletempo_MS
000248 95fa                      	dec	reg_cpt3
000249 f7d1                      	brne tempo_MS
00024a 9508                      	ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16A" register use summary:
x  :  19 y  :   0 z  :   0 r0 :   0 r1 :   6 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  62 r17:  13 r18:  82 r19:  14 r20:   9 
r21:  14 r22:  19 r23:   6 r24:   5 r25:  49 r26:   5 r27:   4 r28:   5 
r29:   6 r30:  12 r31:  24 
Registers used: 18 out of 35 (51.4%)

"ATmega16A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   3 adiw  :   0 and   :   1 
andi  :   5 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   8 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 brlt  :   0 brmi  :   0 
brne  :  11 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  39 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :   4 cpc   :   0 
cpi   :  19 cpse  :   0 dec   :   3 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  11 inc   :  13 jmp   :   3 
ld    :   6 ldd   :   0 ldi   : 127 lds   :   8 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :  10 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   2 or    :   1 ori   :  13 out   :  60 pop   :   0 
push  :   0 rcall :  39 ret   :   8 reti  :   6 rjmp  :  34 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  42 sbic  :   2 sbis  :  13 
sbiw  :   0 sbr   :   0 sbrc  :   1 sbrs  :   8 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  13 std   :   0 sts   :   7 
sub   :   1 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 36 out of 113 (31.9%)

"ATmega16A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000496   1096      0   1096   16384   6.7%
[.dseg] 0x000060 0x000073      0     19     19    1024   1.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
