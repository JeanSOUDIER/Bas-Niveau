
AVRASM ver. 2.2.7  D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm Thu Jan 16 12:49:47 2020

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16adef.inc'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(23): warning: Register r17 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(29): warning: Register r30 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(33): warning: Register r28 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(34): warning: Register r29 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(35): warning: Register r28 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(36): warning: Register r29 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(85): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\io.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(87): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\uart.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(89): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\adc.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(91): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\timer.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(93): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\spi.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(95): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\screen.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(97): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\char_array.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(99): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\csgo.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16adef.inc'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(85): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\io.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(87): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\uart.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(89): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\adc.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(91): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\timer.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(93): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\spi.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(95): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\screen.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(97): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\char_array.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(99): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\csgo.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16A.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m16Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega16A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega16A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M16ADEF_INC_
                                 #define _M16ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega16A
                                 #pragma AVRPART ADMIN PART_NAME ATmega16A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x94
                                 .equ	SIGNATURE_002	= 0x03
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SE	= 6	; Sleep Enable
                                 .equ	SM2	= 7	; Sleep Mode Select
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special function I/O register
                                 ;.equ	PSR10	= 0	; Prescaler reset
                                 .equ	PSR2	= 1	; Prescaler reset
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 16384
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1c00
                                 .equ	NRWW_STOP_ADDR	= 0x1fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1bff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x1f80
                                 .equ	SECONDBOOTSTART	= 0x1f00
                                 .equ	THIRDBOOTSTART	= 0x1e00
                                 .equ	FOURTHBOOTSTART	= 0x1c00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M16ADEF_INC_ */
                                 
                                 
                                 ; main.asm
                                 ;
                                 ; Created: 25/10/2019 13:42:48
                                 ; Author : jsoudier01 & atessier01
                                 ;
                                 ;code programme
                                 
                                 .def tri = r1						;timerInterruptRegister.
                                 
                                 .def reg_init = r16					;registre d'initialisation de tout les paramètre et temporaire
                                 
                                 ;.def reg_posX = r28				;position du personnage en X
                                 ;.def reg_posY = r29				;position du personnage en Y
                                 
                                 .def reg_spi = r24					;registre d'envoi et réception en spi & tempo MS
                                 .def reg_addrL = r19				;registres de sélection d'adresse dans la mémoire SPI (LOW)
                                 .def reg_addrH = r20				;registres de sélection d'adresse dans la mémoire SPI (HIGH)
                                 
                                 .def reg_cpt1 = r21					;registre temporaire de comptage pour l'affichage sur l'écran
                                 .def reg_cpt2 = r22					;idem
                                 .def reg_cpt3 = r17					;registre de comptage tempo
                                 .def reg_screen = r17				;registre d'affichage sur l'écran
                                 
                                 .def reg_cptT0 = r23				;prescaler du timer0 pour ralentire le clignotement
                                 
                                 .def reg_vol = r25					;registre de son et de volume
                                 
                                 .def reg_TX = r30					;registre d'envoi en bluetooth
                                 .def reg_RX = r18					;registre de réception en bluetooth
                                 
                                 ;.def reg_csgo_orientation = r13		;orientation du personnage
                                 .def reg_csgo_mapL = r28				;position du personnage dans la map
                                 .def reg_csgo_mapH = r29
                                 .def reg_calcul1 = r28
                                 .def reg_calcul2 = r29
                                 
                                 .dseg
000060                           	num_son:		.byte 1				;variable SRAM de son (LOW)
000061                           	num_son2:		.byte 1				;idem (HIGH)
000062                           	C_Wait:			.byte 5				;variable avec le caractère de chargement pour les images
000067                           	Table:			.byte 8				;table de conversion
00006f                           	conv:			.byte 1				;varaible de convertion de la poistion du personnage X
000070                           	convB:			.byte 1				;idem Y
000071                           	conv2:			.byte 1				;idem afficher ou non
000072                           	dead:			.byte 1				;variable de test si le personnage est en vie
000073                           	pos_rand:		.byte 1				;position de départ du personnage (case 0 à 181)
000074                           	pos_x:			.byte 1				;position en x du joueur
000075                           	pos_y:			.byte 1				;position en y du joueur
000076                           	numero_mapL:	.byte 1				;adresse de la case actuelle dans la mémoire
000077                           	numero_mapH:	.byte 1
000078                           	pos_x_adv:		.byte 1				;position en x de l'adversaire
000079                           	pos_y_adv:		.byte 1				;position en y de l'adversaire
00007a                           	orientation:	.byte 1				;orientation du personnage
00007b                           	adv_ok:			.byte 1				;si l'adversaire est juste devant nous
                                 
                                 .cseg  ; codesegment
                                 .org	0x00
000000 c02f                         rjmp	RESET						;vecteur de reset
                                 .org 0x0C							; 7:  $00C TIMER1 COMPA Timer/Counter1 Cmp Match A 
00000c 9518                      	reti
                                 .org 0x0A							; 6:  $00A TIMER1 CAPT Timer/Counter1 Capture Event
00000a 9518                      	reti
                                 .org 0x10							; 9:  $010 TIMER1 OVF Timer/Counter1 Overflow
000010 940c 0083                 	jmp		TI1_Interrupt
                                 .org 0x12							; 10: $012 TIMER0 OVF Timer/Counter0 Overflow
000012 940c 00a7                 	jmp		TI0_interrupt
                                 .org 0x16							; 12: $016 USART, RXC USART, Rx Complete
000016 940c 004f                 	jmp		UART_Interrupt
                                 
                                 .org 0x30							; se placer à la case mémoire 30 en hexa
                                 RESET:								; adresse du vecteur de reset
000030 e004                      	ldi		r16,high(RAMEND)		; initialisation de la pile
000031 bf0e                      	out		SPH,r16
000032 e50f                      	ldi		r16,low(RAMEND)
000033 bf0d                      	out		SPL,r16
                                 
000034 ef1f                      	ldi		reg_cpt3,255			;tempo de début
000035 d09a                      	rcall	tempo_US
                                 
000036 efdf                      	ldi		reg_csgo_mapH,255				;on n'affiche pas le pseronnage
                                 
                                 
                                 	;ajout des programmes pour la gestion des modules
                                 	.include "io.asm"
                                 
                                 
                                 IO_Init:
000037 e000                      	ldi		reg_init,0x00			;porta en entrée
000038 bb0a                      	out		DDRA,reg_init
000039 eb0f                      	ldi		reg_init,0xBF			;portb en entrée sur miso
00003a bb07                      	out		DDRB,reg_init
00003b ef0f                      	ldi		reg_init,0xFF			;portc en sortie
00003c bb04                      	out		DDRC,reg_init
00003d ee02                      	ldi		reg_init,0xE2			;portd en sortie sur TX, BUZZER et LED
00003e bb01                      	out		DDRD,reg_init
00003f c000                      IO_INC:
                                 	.include "uart.asm"
                                 
                                 
                                 .macro PosPerso[]
                                 	cpi		reg_TX,0x80
                                 	brlo	POSITION_Y
                                 	andi	reg_RX,0x3F						;sinon c'est une position
                                 	sts		pos_x_adv,reg_TX
                                 	rjmp	END_POSITION
                                 POSITION_Y:
                                 	cpi		reg_TX,0
                                 	breq	END_POSITION
                                 	andi	reg_RX,0x3F						;sinon c'est une position
                                 	sts		pos_y_adv,reg_TX
                                 END_POSITION:
                                 .endmacro
                                 
                                 USART_Init:									; Set baud rate to UBRR0 
000040 e3e3                      	ldi		reg_TX,baud
000041 b9e9                      	out		UBRRL, reg_TX					; Enable receiver and transmitter  
000042 e0e0                      	ldi		reg_TX,0 
000043 bde0                      	out		UBRRH, reg_TX    
000044 e0e0                      	ldi		reg_TX,0
000045 b9eb                      	out		UCSRA,reg_TX
000046 e9e8                      	ldi		reg_TX,(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)   
000047 b9ea                      	out		UCSRB,reg_TX					; Set frame format: 8data, 2stop bit   
000048 e8ee                      	ldi		reg_TX,(1<<URSEL)|(1<<USBS)|(3<<UCSZ0)   
000049 bde0                      	out		UCSRC,reg_TX  
                                 
00004a c00c                      	rjmp	UART_INC					;go to main
                                 
                                 ;mov		reg_TX,reg_XXXX
                                 ;ori		reg_TX,   0x80 (posX), 0x40 (posY), 0x00 (Kill)
                                 USART_Transmit:								; Wait for empty transmit buffer
00004b 9b5d                      	sbis	UCSRA,UDRE 
00004c cffe                      	rjmp	USART_Transmit					; Put data (r16) into buffer, sends the data   
00004d b9ec                      	out		UDR,reg_TX   
00004e 9508                      	ret 
                                 
                                 UART_Interrupt:
00004f b61f                      	in		tri,SREG						; save content of flag reg.
000050 b12c                      	in		reg_RX,UDR
000051 3020                      	cpi		reg_RX,0						;test si on recoit un coup
000052 f411                      	brne	END_UART
000053 9320 0072                 	sts		dead,reg_RX
                                 END_UART:
000055 be1f                      	out		SREG,tri						; restore flag register
000056 9518                      	reti 									; Return from interrupt
                                 
                                 
                                 	;CODE POUR METTRE A JOUR LA POSITION DE L'ADVERSAIRE
                                 	;sts		pos_x_adv,registre_X
                                 	;sts		pos_y_adv,registreY
                                 UART_INC:
                                 	.include "adc.asm"
                                 
000057 e600                      	ldi		reg_init,(1<<ADLAR)|(1<<REFS0)							;ext ref / left adjust / mux to ADC0
000058 b907                      	out		ADMUX,reg_init
000059 ec06                      	ldi		reg_init,(1<<ADEN)|(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)		;adc enable / adc start / no auto trig / no interrupt / div 64
00005a b906                      	out		ADCSRA,reg_init
00005b c008                      	rjmp	ADC_INC
                                 
                                 rand:
00005c 94f8                      	cli																;désactivation des interruptions
00005d 9936                      	sbic	ADCSRA,ADSC												;test de fin de conversion
00005e cffd                      	rjmp	rand
00005f b195                      	in		reg_vol,ADCH											;lecture de la valeur converti
000060 9390 0073                 	sts		pos_rand,reg_vol										;stockage de la position du personnage
000062 9478                      	sei																;réactivation des interruptions
000063 9508                      	ret
                                 ADC_INC:
                                 	.include "timer.asm"
                                 
                                 	sbis	PINA,1
                                 .endmacro
                                 .macro bGan[]
                                 	sbic	PINA,1
                                 .endmacro
                                 .macro bBa[]
                                 	sbis	PINA,2
                                 .endmacro
                                 .macro bBan[]
                                 	sbic	PINA,2
                                 .endmacro
                                 .macro bDr[]
                                 	sbis	PINA,3
                                 .endmacro
                                 .macro bDrn[]
                                 	sbic	PINA,3
                                 .endmacro
                                 .macro bHa[]
                                 	sbis	PINA,4
                                 .endmacro
                                 .macro bHan[]
                                 	sbic	PINA,4
                                 .endmacro
                                 .macro bB[]
                                 	sbis	PINA,5
                                 .endmacro
                                 .macro bBn[]
                                 	sbic	PINA,5
                                 .endmacro
                                 .macro bA[]
                                 	sbis	PINA,6
                                 .endmacro
                                 .macro bAn[]
                                 	sbic	PINA,6
                                 .endmacro
                                 .macro bSta[]
                                 	sbis	PINA,7
                                 .endmacro
                                 .macro bStan[]
                                 	sbic	PINA,7
                                 .endmacro
                                 .macro bSel[]
                                 	sbis	PIND,2
                                 .endmacro
                                 .macro bSeln[]
                                 	sbic	PIND,2
                                 .endmacro
                                 .macro bL[]
                                 	sbis	PIND,3
                                 .endmacro
                                 .macro bLn[]
                                 	sbic	PIND,3
                                 .endmacro
                                 .macro bR[]
                                 	sbis	PIND,4
                                 .endmacro
                                 .macro bRn[]
                                 	sbic	PIND,4
                                 .endmacro
                                 
                                 TIMER_Init:
000064 e095                      	ldi		reg_vol,(1<<CS02)|(1<<CS00)				;timer0 pour le clignotement de la position du personage (normal mode)
000065 bf93                      	out		TCCR0,reg_vol							;prescaler max de 1024
000066 b799                      	in		reg_vol,TIMSK
000067 6091                      	ori		reg_vol,(1<<TOIE0)						;en interruption
000068 bf99                      	out		TIMSK,reg_vol
000069 e070                      	ldi		reg_cptT0,0
                                 
00006a e892                      	ldi		reg_vol,(1<<WGM11)|(1<<COM1A1)			;timer1 pour le son et le réglage du volume (fast PWM mode)
00006b bd9f                      	out		TCCR1A,reg_vol
00006c e19a                      	ldi		reg_vol,(1<<WGM13)|(1<<WGM12)|(1<<CS11)	;prescaler par 8 soit 8MHz/(8*2*ICR1)
00006d bd9e                      	out		TCCR1B,reg_vol
00006e b798                      	in		reg_vol,TIFR							;clear flag
00006f 7f9b                      	andi	reg_vol,0xFB
000070 bf98                      	out		TIFR,reg_vol
000071 b799                      	in		reg_vol,TIMSK							;interrupt enable
000072 6394                      	ori		reg_vol,(1<<TICIE1)|(1<<TOIE1)|(1<<OCIE1A)
000073 bf99                      	out		TIMSK,reg_vol
                                 
000074 e090                      	ldi		reg_vol,0								;réglage du volume au départ
000075 bd9b                      	out		OCR1AH,reg_vol
000076 e091                      	ldi		reg_vol,1
000077 bd9a                      	out		OCR1AL,reg_vol
                                 
000078 e694                      	ldi		reg_vol,100								;réglage de la fréquence de départ
000079 bd97                      	out		ICR1H,reg_vol
00007a ef9f                      	ldi		reg_vol,255
00007b bd96                      	out		ICR1L,reg_vol
                                 
00007c e194                      	ldi		reg_vol,20								;réglage du pointage dans l'eeprom de l'atmega qui contient le son
00007d 9390 0060                 	sts		num_son,reg_vol
00007f e092                      	ldi		reg_vol,2
000080 9390 0061                 	sts		num_son2,reg_vol
                                 	
                                 
000082 c02b                      	rjmp	TIMER_INC
                                 
                                 
                                 TI1_Interrupt:
000083 b61f                      	in		tri,SREG								;save content of flag reg.
                                 
000084 9190 0061                 	lds		reg_vol,num_son2						;chargement de l'addresse du son à jouer
000086 3092                      	cpi		reg_vol,2
000087 f4c8                      	brsh	No_sound
                                 
                                 conv_son:
000088 99e1                      	sbic	EECR,EEWE								;test de d'écriture dans l'eeprom
000089 cffe                      	rjmp	conv_son
                                 
                                 	
00008a bb9f                      	out		EEARH,reg_vol							;recherche de l'adresse à lire depuis la SRAM
00008b 9190 0060                 	lds		reg_vol,num_son
00008d bb9e                      	out		EEARL,reg_vol
                                 	
00008e 9ae0                      	sbi		EECR,EERE								;test de fin de lecture
00008f b39d                      	in		reg_vol,EEDR							;lecture
000090 bd97                      	out		ICR1H,reg_vol							;set freq
                                 
                                 
                                 	;gestion du volume
000091 e090                      	ldi		reg_vol,0
000092 bd9b                      	out		OCR1AH,reg_vol
000093 b195                      	in		reg_vol,ADCH							;on lit la valeur de l'adc convertie
000094 bd9a                      	out		OCR1AL,reg_vol
                                 
000095 b196                      	in		reg_vol,ADCSRA
000096 6490                      	ori		reg_vol,(1<<ADSC)						;relance d'une conversion
000097 b996                      	out		ADCSRA,reg_vol
000098 e090                      	ldi		reg_vol,0
000099 bd9d                      	out		TCNT1H,reg_vol							;affectation du volume
00009a bd9c                      	out		TCNT1L,reg_vol
                                 
                                 	;gestion de la led
00009b 9986                      	sbic	PIND,6									;blink led
00009c 9896                      	cbi		PORTD,6
00009d 9b86                      	sbis	PIND,6
00009e 9a96                      	sbi		PORTD,6
                                 
                                 	
                                 
00009f be1f                      	out		SREG,tri								;restore flag register
0000a0 9518                      	reti 											;return from interrupt
                                 
                                 No_sound:
0000a1 e090                      	ldi		reg_vol,0								;pas de son à jouer
0000a2 bd9a                      	out		OCR1AL,reg_vol
0000a3 e090                      	ldi		reg_vol,0
0000a4 bd9d                      	out		TCNT1H,reg_vol
0000a5 bd9c                      	out		TCNT1L,reg_vol
0000a6 9518                      	reti
                                 
                                 TI0_interrupt:
0000a7 b61f                      	in		tri,SREG								;save content of flag reg.
0000a8 9573                      	inc		reg_cptT0								;variable de comptage pour diviseur la fréquence
0000a9 3170                      	cpi		reg_cptT0,16
0000aa f409                      	brne	END_T0
0000ab e070                      	ldi		reg_cptT0,0
                                 END_T0:
0000ac be1f                      	out		SREG,tri								;restore flag register
0000ad 9518                      TIMER_INC:
                                 	.include "spi.asm"
                                 
                                 .equ WRDI = 0x04
                                 .equ READ = 0x03
                                 .equ WRITE = 0x02
                                 
                                 .macro WR_DI[]										;macro pour mettre la mémoire SPI en lecture
                                 	cbi		PORTB,4									;clear CS
                                 	ldi		reg_spi,WRDI							;send ordre de lecture
                                 	rcall	SPI_Transmit							;envoi
                                 	sbi		PORTB,4									;set CS
                                 .endmacro
                                 
                                 SPI_Init:
0000ae e581                      	ldi		reg_spi,(1<<SPE)|(1<<MSTR)|(1<<SPR0)	; ON / MASTER / fosc/16
0000af b98d                      	out		SPCR,reg_spi
0000b0 9ac4                      	sbi		PORTB,4									;set SS
0000b1 98c4
0000b2 e084
0000b3 d002
0000b4 9ac4                      	WR_DI[]
0000b5 c010                      	rjmp	SPI_INC
                                 
                                 SPI_Transmit:										;attente transmission
0000b6 b98f                      	out		SPDR,reg_spi							;envoi msg
                                 Wait_SPI:
0000b7 9b77                      	sbis	SPSR,SPIF								;test si fini
0000b8 cffe                      	rjmp	Wait_SPI
0000b9 b18f                      	in		reg_spi,SPDR							;lecture de la réponse
0000ba 9508                      	ret
                                 
                                 Read_Mem:
0000bb 98c4                      	cbi		PORTB,4									;clear SS
0000bc e083                      	ldi		reg_spi,READ							;instruction de lecture mémoire
0000bd dff8                      	rcall	SPI_Transmit
0000be 2f84                      	mov		reg_spi,reg_addrH						;sélection de l'adresse H
0000bf dff6                      	rcall	SPI_Transmit
0000c0 2f83                      	mov		reg_spi,reg_addrL						;sélection de l'adresse L
0000c1 dff4                      	rcall	SPI_Transmit
0000c2 e080                      	ldi		reg_spi,0x00							;lecture de la réponse
0000c3 dff2                      	rcall	SPI_Transmit
0000c4 9ac4                      	sbi		PORTB,4									;set SS
0000c5 9508                      	ret
                                 SPI_INC:
                                 	.include "screen.asm"
                                 
                                 	sbi		PORTB,0
                                 	cbi		PORTB,1
                                 .endmacro
                                 
                                 .macro screenR[]					;choix du côté de l'écran à droite
                                 	sbi		PORTB,1
                                 	cbi		PORTB,0
                                 .endmacro
                                 
                                 .macro Enable[]						;validation de la commande sur l'écran
                                 	cbi		PORTB,3
                                 	ldi		reg_cpt3,250
                                 	rcall	tempo_US
                                 	sbi		PORTB,3
                                 .endmacro
                                 
                                 .macro SetPosX[]					;pos de 0 à 7 (à changer à chaque fois)
                                 	RS_clear[]
                                 	ori		reg_screen,0xB8
                                 	out		PORTC,reg_screen
                                 	Enable[]
                                 	RS_set[]
                                 .endmacro
                                 
                                 .macro SetPosY[]					;pos de 0 à 64 (auto)
                                 	RS_clear[]
                                 	ori		reg_screen,0x40
                                 	out		PORTC,reg_screen
                                 	Enable[]
                                 	RS_set[]
                                 .endmacro
                                 
                                 .macro RS_clear[]					;changement de bit instruction/données
                                 	cbi		PORTB,2
                                 .endmacro
                                 
                                 .macro RS_set[]						;changement de bit instruction/données
                                 	sbi		PORTB,2
                                 .endmacro
                                 
                                 .macro ScreenWrite[]				;affichage sur l'écran
                                 	out		PORTC,reg_screen
                                 	Enable[]
                                 .endmacro
                                 
                                 .macro placePosPerso[]				;converti la position xy du personnage pour faire un test à l'affichage sur l'ecran
                                 	lds		reg_screen,pos_x
                                 	mov		reg_calcul1,reg_screen	;test Y
                                 	andi	reg_screen,7
                                 	ldi		XL,LOW(Table)			;table de convertion 2^(8-X) = Y
                                 	ldi		XH,HIGH(Table)
                                 	add		XL,reg_screen			;test X
                                 	ld		reg_screen,X
                                 	sts		conv,reg_screen
                                 
                                 	ldi		reg_screen,255			;convertion des positions par 8 pixels
                                 	cpi		reg_calcul1,8
                                 	brlo	END_PERSO
                                 	cpi		reg_calcul1,16
                                 	ldi		reg_screen,191
                                 	brlo	END_PERSO
                                 	ldi		reg_screen,127
                                 END_PERSO:
                                 	lds		reg_calcul1,pos_y
                                 	sub		reg_screen,reg_calcul1	;affectation de la SRAM
                                 	sts		convB,reg_screen
                                 	lds		reg_calcul1,pos_x
                                 	ldi		reg_screen,7
                                 	cpi		reg_calcul1,8
                                 	brlo	END_PERSO2
                                 	cpi		reg_calcul1,16
                                 	ldi		reg_screen,6
                                 	brlo	END_PERSO2
                                 	ldi		reg_screen,5
                                 END_PERSO2:
                                 	sts		conv2,reg_screen
                                 .endmacro
                                 
                                 .macro SetPosPerso[]				;affiche le point à l'endroit calculé
                                 	lds		reg_calcul1,pos_X
                                 	cpi		reg_calcul1,255
                                 	breq	END_SetPerso
                                 	lds		reg_screen,conv2
                                 	cp		reg_cpt2,reg_screen
                                 	brne	END_SetPerso
                                 	lds		reg_screen,convB
                                 	andi	reg_screen,0x3F
                                 	cp		reg_cpt1,reg_screen
                                 	brne	END_SetPerso
                                 	lds		reg_screen,conv
                                 	or		reg_spi,reg_screen
                                 END_SetPerso:
                                 .endmacro
                                 
                                 .macro ClearPosPerso[]				;efface le point à l'endroit calculé
                                 	lds		reg_screen,conv2
                                 	cp		reg_cpt2,reg_screen
                                 	brne	END_ClearPerso
                                 	lds		reg_screen,convB
                                 	andi	reg_screen,0x3F
                                 	cp		reg_cpt1,reg_screen
                                 	brne	END_ClearPerso
                                 	lds		reg_screen,conv
                                 	com		reg_screen
                                 	and		reg_spi,reg_screen
                                 END_ClearPerso:
                                 .endmacro
                                 
                                 SCREEN_Init:
0000c6 9ac3                      	sbi		PORTB,3					;set E and clear RS
0000c7 98c2                      	cbi		PORTB,2
0000c8 e31f                      	ldi		reg_screen,63			;instruction de début de l'écran pour activer l'affichage
0000c9 bb15                      	out		PORTC,reg_screen
0000ca 98c3
0000cb ef1a
0000cc d003
0000cd 9ac3                      	Enable[]						;validation
0000ce 9ac2                      	RS_set[]						;mode données
0000cf c110                      	rjmp	SCREEN_INC
                                 
                                 tempo_US:							;boucle de temporisation
0000d0 951a                      	dec		reg_cpt3
0000d1 0000                      	nop
0000d2 f7e9                      	brne	tempo_US
0000d3 9508                      	ret
                                 
                                 ;full reg_addrL/H
                                 writeFullSreen:						;fonction d'affichage de la mémoire SPI vers l'écran
0000d4 9110 0074
0000d6 2fc1
0000d7 7017
0000d8 e6a7
0000d9 e0b0
0000da 0fa1
0000db 911c
0000dc 9310 006f
0000de ef1f
0000df 30c8
0000e0 f020
0000e1 31c0
0000e2 eb1f
0000e3 f008
0000e4 e71f
0000e5 91c0 0075
0000e7 1b1c
0000e8 9310 0070
0000ea 91c0 0074
0000ec e017
0000ed 30c8
0000ee f020
0000ef 31c0
0000f0 e016
0000f1 f008
0000f2 e015
0000f3 9310 0071                 	placePosPerso[]
0000f5 9ac1
0000f6 98c0                      	screenR[]						;set side screen
0000f7 e060                      	ldi		reg_cpt2,0				;reset var
                                 loop1:
0000f8 e050                      	ldi		reg_cpt1,0
0000f9 e010                      	ldi		reg_screen,0			;set pos Y = 0
0000fa 98c2
0000fb 6410
0000fc bb15
0000fd 98c3
0000fe ef1a
0000ff dfd0
000100 9ac3
000101 9ac2                      	SetPosY[]
000102 2f16                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
000103 98c2
000104 6b18
000105 bb15
000106 98c3
000107 ef1a
000108 dfc7
000109 9ac3
00010a 9ac2                      	SetPosX[]
                                 loop2:
00010b dfaf                      	rcall	Read_Mem				;lecture de la mémoire spi
00010c 2f18                      	mov		reg_screen,reg_spi
00010d bb15
00010e 98c3
00010f ef1a
000110 dfbf
000111 9ac3                      	ScreenWrite[]					;écriture sur l'écran
000112 9533                      	inc		reg_addrL				;incrément de l'adresse LOW
000113 3030                      	cpi		reg_addrL,0
000114 f409                      	brne	addr_carry1				;test du carry
000115 9543                      	inc		reg_addrH
                                 addr_carry1:
                                 
000116 9553                      	inc		reg_cpt1				;incrément du compteur 1
000117 ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
000118 cff2                      	rjmp	loop2
                                 
000119 9563                      	inc		reg_cpt2				;incrément du copteur 2
00011a ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
00011b cfdc                      	rjmp	loop1
                                 
00011c 9ac0
00011d 98c1                      	screenL[]						;set side screen
00011e e060                      	ldi		reg_cpt2,0				;reset var
                                 loop3:
00011f e050                      	ldi		reg_cpt1,0
000120 e010                      	ldi		reg_screen,0			;set pos Y = 0
000121 98c2
000122 6410
000123 bb15
000124 98c3
000125 ef1a
000126 dfa9
000127 9ac3
000128 9ac2                      	SetPosY[]
000129 2f16                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
00012a 98c2
00012b 6b18
00012c bb15
00012d 98c3
00012e ef1a
00012f dfa0
000130 9ac3
000131 9ac2                      	SetPosX[]
                                 loop4:
000132 df88                      	rcall	Read_Mem				;lecture de la mémoire spi
000133 3078                      	cpi		reg_cptT0,8
000134 f468                      	brsh	PRINT
000135 9110 0071
000137 1761
000138 f449
000139 9110 0070
00013b 731f
00013c 1751
00013d f421
00013e 9110 006f
000140 9510
000141 2381                      	ClearPosPerso[]
                                 PRINT:
000142 3078                      	cpi		reg_cptT0,8
000143 f080                      	brlo	PRINT1
000144 91c0 0074
000146 3fcf
000147 f061
000148 9110 0071
00014a 1761
00014b f441
00014c 9110 0070
00014e 731f
00014f 1751
000150 f419
000151 9110 006f
000153 2b81                      	SetPosPerso[]
                                 PRINT1:
000154 2f18                      	mov		reg_screen,reg_spi
000155 bb15
000156 98c3
000157 ef1a
000158 df77
000159 9ac3                      	ScreenWrite[]					;écriture sur l'écran
00015a 9533                      	inc		reg_addrL				;incrément de l'adresse LOW
00015b 3030                      	cpi		reg_addrL,0
00015c f409                      	brne	addr_carry2				;test du carry
00015d 9543                      	inc		reg_addrH
                                 addr_carry2:
                                 
00015e 9553                      	inc		reg_cpt1				;incrément du compteur 1
00015f ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
000160 cfd1                      	rjmp	loop4
                                 
000161 9563                      	inc		reg_cpt2				;incrément du copteur 2
000162 ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
000163 cfbb                      	rjmp	loop3
000164 9508                      	ret
                                 
                                 
                                 clearFullSreen:						;fonction pour effacer l'écran (ressemble beaucoup à "writeFullSreen")
000165 9ac1
000166 98c0                      	screenR[]						;set side screen
000167 e060                      	ldi		reg_cpt2,0				;reset var
                                 loop5:
000168 e050                      	ldi		reg_cpt1,0
000169 e010                      	ldi		reg_screen,0			;set pos Y = 0
00016a 98c2
00016b 6410
00016c bb15
00016d 98c3
00016e ef1a
00016f df60
000170 9ac3
000171 9ac2                      	SetPosY[]
000172 2f16                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
000173 98c2
000174 6b18
000175 bb15
000176 98c3
000177 ef1a
000178 df57
000179 9ac3
00017a 9ac2                      	SetPosX[]
                                 loop6:
00017b e010                      	ldi		reg_screen,0
00017c bb15
00017d 98c3
00017e ef1a
00017f df50
000180 9ac3                      	ScreenWrite[]					;écriture sur l'écran
                                 
000181 9553                      	inc		reg_cpt1				;incrément du compteur 1
000182 ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
000183 cff7                      	rjmp	loop6
                                 
000184 9563                      	inc		reg_cpt2				;incrément du copteur 2
000185 ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
000186 cfe1                      	rjmp	loop5
                                 
000187 9ac0
000188 98c1                      	screenL[]						;set side screen
000189 e060                      	ldi		reg_cpt2,0				;reset var
                                 loop7:
00018a e050                      	ldi		reg_cpt1,0
00018b e010                      	ldi		reg_screen,0			;set pos Y = 0
00018c 98c2
00018d 6410
00018e bb15
00018f 98c3
000190 ef1a
000191 df3e
000192 9ac3
000193 9ac2                      	SetPosY[]
000194 2f16                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
000195 98c2
000196 6b18
000197 bb15
000198 98c3
000199 ef1a
00019a df35
00019b 9ac3
00019c 9ac2                      	SetPosX[]
                                 loop8:
00019d e010                      	ldi		reg_screen,0
00019e bb15
00019f 98c3
0001a0 ef1a
0001a1 df2e
0001a2 9ac3                      	ScreenWrite[]					;écriture sur l'écran
                                 
0001a3 9553                      	inc		reg_cpt1				;incrément du compteur 1
0001a4 ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
0001a5 cff7                      	rjmp	loop8
                                 
0001a6 9563                      	inc		reg_cpt2				;incrément du copteur 2
0001a7 ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
0001a8 cfe1                      	rjmp	loop7
0001a9 9508                      	ret
                                 
                                 writeChar:							;affiche un caractère de la SRAM sur l'écran
0001aa 9ac0
0001ab 98c1                      	screenL[]
0001ac e01a                      	ldi		reg_screen,10
0001ad 0f13                      	add		reg_screen,reg_addrL	;placement sur l'écran
0001ae 98c2
0001af 6410
0001b0 bb15
0001b1 98c3
0001b2 ef1a
0001b3 df1c
0001b4 9ac3
0001b5 9ac2                      	SetPosY[]
0001b6 e014                      	ldi		reg_screen,4
0001b7 98c2
0001b8 6b18
0001b9 bb15
0001ba 98c3
0001bb ef1a
0001bc df13
0001bd 9ac3
0001be 9ac2                      	SetPosX[]
0001bf e6a2                      	ldi		XL,LOW(C_Wait)			;placement dans la SRAM
0001c0 e0b0                      	ldi		XH,HIGH(C_Wait)
0001c1 911d                      	ld		reg_screen,X+			;affichage du caractère en 5*8
0001c2 bb15
0001c3 98c3
0001c4 ef1a
0001c5 df0a
0001c6 9ac3                      	ScreenWrite[]
0001c7 911d                      	ld		reg_screen,X+
0001c8 bb15
0001c9 98c3
0001ca ef1a
0001cb df04
0001cc 9ac3                      	ScreenWrite[]
0001cd 911d                      	ld		reg_screen,X+
0001ce bb15
0001cf 98c3
0001d0 ef1a
0001d1 defe
0001d2 9ac3                      	ScreenWrite[]
0001d3 911d                      	ld		reg_screen,X+
0001d4 bb15
0001d5 98c3
0001d6 ef1a
0001d7 def8
0001d8 9ac3                      	ScreenWrite[]
0001d9 911d                      	ld		reg_screen,X+
0001da bb15
0001db 98c3
0001dc ef1a
0001dd def2
0001de 9ac3                      	ScreenWrite[]
0001df 9508                      SCREEN_INC:
                                 	.include "char_array.asm"
                                 
0001e0 e6a2                      	ldi		XL,LOW(C_Wait)			;load '#'
0001e1 e0b0                      	ldi		XH,HIGH(C_Wait)
0001e2 e104                      	ldi		reg_init,0x14
0001e3 930d                      	st		X+,reg_init
0001e4 ef0f                      	ldi		reg_init,0xFF
0001e5 930d                      	st		X+,reg_init
0001e6 e104                      	ldi		reg_init,0x14
0001e7 930d                      	st		X+,reg_init
0001e8 ef0f                      	ldi		reg_init,0xFF
0001e9 930d                      	st		X+,reg_init
0001ea e104                      	ldi		reg_init,0x14
0001eb 930c                      	st		X,reg_init
0001ec e6a7                      	ldi		XL,LOW(Table)			;load table decod bin to hex (Y = 2^(8-X))
0001ed e0b0                      	ldi		XH,HIGH(Table)
0001ee e800                      	ldi		reg_init,0x80
0001ef 930d                      	st		X+,reg_init
0001f0 e400                      	ldi		reg_init,0x40
0001f1 930d                      	st		X+,reg_init
0001f2 e200                      	ldi		reg_init,0x20
0001f3 930d                      	st		X+,reg_init
0001f4 e100                      	ldi		reg_init,0x10
0001f5 930d                      	st		X+,reg_init
0001f6 e008                      	ldi		reg_init,0x08
0001f7 930d                      	st		X+,reg_init
0001f8 e004                      	ldi		reg_init,0x04
0001f9 930d                      	st		X+,reg_init
0001fa e002                      	ldi		reg_init,0x02
0001fb 930d                      	st		X+,reg_init
0001fc e001                      	ldi		reg_init,0x01
0001fd 930c                      	st		X,reg_init
0001fe e001                      	ldi		reg_init,1
0001ff 9300 0072                 	sts		dead,reg_init			;personnage en vie
000201 c000                      	rjmp	CHAR_INC
                                 
                                 .macro Fenetre_Debut[]				;affichage de "JOUER / RESEAU / MENTION"
                                 	ldi		reg_addrL,0x00
                                 	ldi		reg_addrH,0x60
                                 	add		reg_addrH,reg_init
                                 	rcall	writeFullSreen
                                 
                                 .endmacro
                                 
                                 .macro CONNECTED[]					;affichage de "connecte"
                                 	ldi		reg_addrL,0x00
                                 	ldi		reg_addrH,0x6C
                                 	rcall	writeFullSreen
                                 .endmacro
                                 
                                 .macro NO_CONNECTED[]				;affichage de "non connecte"
                                 	ldi		reg_addrL,0x00
                                 	ldi		reg_addrH,0x70
                                 	rcall	writeFullSreen
                                 .endmacro
                                 
                                 .macro MENTION_MA[]					;affichage des mentions
                                 	ldi		reg_addrL,0x00
                                 	ldi		reg_addrH,0x74
                                 	rcall	writeFullSreen
                                 .endmacro
                                 
                                 .macro CONN1[]						;affichage du chargement pendant le test de connection
                                 	rcall	clearFullSreen
                                 	ldi		reg_addrL,0
                                 	rcall	writeChar
                                 .endmacro
                                 
                                 .macro CONN2[]						;affichage du chargement pendant le test de connection suite
                                 	ldi		reg_addrL,6
                                 	rcall	writeChar
                                 .endmacro
                                 
                                 .macro CONN3[]						;affichage du chargement pendant le test de connection suite 2
                                 	ldi		reg_addrL,12
                                 	rcall	writeChar
                                 .endmacro
                                 CHAR_INC:
                                 	.include "csgo.asm"
                                 
                                 
                                 csgo_init:
000202 e000                      	ldi		r16,0x00					;placement orientation Nord
000203 9300 007a                 	sts		orientation,r16
000205 e008                      	ldi		r16,0x08					;placement à la case 124 de la mémoire
000206 9300 0076                 	sts		numero_mapL,r16
000208 e408                      	ldi		r16,0x48
000209 9300 0077                 	sts		numero_mapH,r16
00020b e000                      	ldi		r16,0x00
00020c 9300 0078                 	sts		pos_x_adv,r16
00020e 9300 0079                 	sts		pos_y_adv,r16
000210 9300 0075                 	sts		pos_y,r16
000212 ef0f                      	ldi		r16,255
000213 9300 0074                 	sts		pos_x,r16
                                 	;rjmp	Affichage_Image
000215 c0c7                      	rjmp	CSGO_INC
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Mouvement du personnage
                                 Avancer:
000216 9130 0076                 	lds		reg_addrL,numero_mapL		;on se replace à la case actuelle dans la mémoire
000218 9140 0077                 	lds		reg_addrH,numero_mapH
00021a 9100 007a                 	lds		r16,orientation
00021c 0f30                      	add		reg_addrL,r16				;on se place à la case mémoire qui contient l'adresse de la case qui est en face de nous
00021d de9d                      	rcall	Read_Mem					;cette adresse vaut 0xFF si on est face à un mur
00021e 2f08                      	mov		r16,reg_spi
00021f 3f0f                      	cpi		r16,255						;si la donnée ne vaut pas 0xFF
000220 f409                      	brne	Mouvement_Confirme			;alors on confirme le mouvement et cette donnée devient la prochaine adresse
000221 c120                      	rjmp	Jeu_En_Cours				;sinon on revient au Jeu_En_Cours
                                 Mouvement_Confirme:
000222 e018                      	ldi		r17,0x08					;on calcule l'adresse de la nouvelle case à partir de son numéro: addr = 0x4800 + 8*n
000223 9f01                      	mul		r16,r17
000224 9200 0076                 	sts		numero_mapL,r0
000226 9210 0077                 	sts		numero_mapH,r1
000228 e408                      	ldi		r16,0x48
000229 9150 0077                 	lds		reg_cpt1, numero_mapH
00022b 0f50                      	add		reg_cpt1,r16
00022c 9350 0077                 	sts		numero_mapH,reg_cpt1
00022e 9100 0077                 	lds		r16,numero_mapH				;on stocke la nouvelle position en x y de la mémoire spi vers la ram et on l'enovie par bluetooth
000230 9110 0076                 	lds		r17,numero_mapL
000232 5f1a                      	subi	r17,-0x06
000233 de87                      	rcall	Read_Mem					;on récupère la position x
000234 9380 0074                 	sts		pos_x,reg_spi
000236 2fe8                      	mov		reg_TX,reg_spi				;on envoie la position x par bluetooth
000237 68e0                      	ori		reg_TX,0x80					;code pour la position x
000238 5f1f                      	subi	r17,-0x01
000239 de81                      	rcall	Read_Mem					;on récupère la position y
00023a 9380 0075                 	sts		pos_y,reg_spi
00023c 2fe8                      	mov		reg_TX,reg_spi				;on envoie la positoin y par bluetooth
00023d 64e0                      	ori		reg_TX,0x40					;code pour la position y
00023e c010                      	rjmp	Affichage_Image
                                 Tourner_Gauche:
00023f 9100 007a                 	lds		r16,orientation				;on augmente d'un l'orientation
000241 5f0f                      	subi	r16,-0x01
000242 fd02                      	sbrc	r16,2
000243 e000                      	ldi		r16,0x00
000244 9300 007a                 	sts		orientation,r16
000246 c008                      	rjmp	Affichage_Image
                                 Tourner_Droite:
000247 9100 007a                 	lds		r16,orientation				;on diminue d'un l'orientation
000249 5001                      	subi	r16,0x01
00024a fd07                      	sbrc	r16,7
00024b e003                      	ldi		r16,0x03
00024c 9300 007a                 	sts		orientation,r16
00024e c000                      	rjmp	Affichage_Image
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Mise à jour de l'affichage
                                 Affichage_Image:
00024f 9130 0076                 	lds		reg_addrL,numero_mapL		;on se replace à la case actuelle dans la mémoire
000251 9140 0077                 	lds		reg_addrH,numero_mapH
000253 9100 007a                 	lds		r16,orientation				;on se place à la bonne orientation
000255 3000                      	cpi		r16,0x00
000256 f031                      	breq	Orientation_Nord
000257 3001                      	cpi		r16,0x01
000258 f059                      	breq	Orientation_Ouest
000259 3002                      	cpi		r16,0x02
00025a f071                      	breq	Orientation_Sud
00025b 3003                      	cpi		r16,0x03
00025c f099                      	breq	Orientation_Est
                                 Orientation_Nord:
00025d 5f3c                      	subi	reg_addrL,-0x04				;placement à la vue Nord-Ouest
00025e de5c                      	rcall	Read_Mem					;lecture de la mémoire spi
00025f 2f08                      	mov		r16,reg_spi
000260 e110                      	ldi		r17,0x10					;sélection du quartet de l'orientation Nord
000261 9f10                      	mul		r17,r16
000262 2d01                      	mov		r16,r1
000263 c011                      	rjmp	Determination_Image_1
                                 Orientation_Ouest:
000264 5f3c                      	subi	reg_addrL,-0x04				;placement à la vue Nord-Ouest
000265 de55                      	rcall	Read_Mem					;lecture de la mémoire spi
000266 2f08                      	mov		r16,reg_spi
000267 700f                      	andi	r16,0x0F					;sélection du quartet de l'orientation Ouest
000268 c00c                      	rjmp	Determination_Image_1
                                 Orientation_Sud:
000269 5f3b                      	subi	reg_addrL,-0x05				;placement à la vue Sud-Est
00026a de50                      	rcall	Read_Mem					;lecture de la mémoire spi
00026b 2f08                      	mov		r16,reg_spi
00026c e110                      	ldi		r17,0x10					;sélection du quartet de l'orientation Sud
00026d 9f10                      	mul		r17,r16
00026e 2d01                      	mov		r16,r1
00026f c005                      	rjmp	Determination_Image_1
                                 Orientation_Est:
000270 5f3b                      	subi	reg_addrL,-0x05				;placement à la vue Sud-Est
000271 de49                      	rcall	Read_Mem					;lecture de la mémoire spi
000272 2f08                      	mov		r16,reg_spi
000273 700f                      	andi	r16,0x0F					;sélection du quartet de l'orientation Est
000274 c000                      	rjmp	Determination_Image_1
                                 Determination_Image_1:
000275 3008                      	cpi		r16,0x08					;on vérifie si l'image correspond au code 8 (mur très proche)
000276 f411                      	brne	Determination_Image_2		;sinon, on calcule à quelle image correspond le code
000277 e004                      	ldi		r16,0x04					;si on est contre un mur proche, on charge le code 0x04
000278 c005                      	rjmp	CREATION_IMAGE
                                 Determination_Image_2:
000279 e014                      	ldi		r17,0x04					;on regarde à quelle image correspond le code
00027a 9f10                      	mul		r17,r16
00027b 2d00                      	mov		r16,r0
00027c 5f08                      	subi	r16,-0x08
00027d c004                      	rjmp	DETECTION_ADVERSAIRE
                                 CREATION_IMAGE:
00027e e030                      	ldi		reg_addrL,0x00				;on va chercher l'image correspondant au code dans la mémoire et on l'affiche
00027f 2f40                      	mov		reg_addrH,r16
000280 de53                      	rcall	writeFullSreen
000281 c0c0                      	rjmp	Jeu_En_Cours
                                 
                                 DETECTION_ADVERSAIRE:
000282 9150 007a                 	lds		reg_cpt1,orientation				;on se place à la bonne orientation
000284 3050                      	cpi		reg_cpt1,0x00
000285 f031                      	breq	Detection_Nord
000286 3051                      	cpi		reg_cpt1,0x01
000287 f0e1                      	breq	Detection_Ouest
000288 3052                      	cpi		reg_cpt1,0x02
000289 f091                      	breq	Detection_Sud
00028a 3053                      	cpi		reg_cpt1,0x03
00028b f041                      	breq	Detection_Est
                                 Detection_Nord:
00028c 9150 0074                 	lds		reg_cpt1,pos_x
00028e 9160 0078                 	lds		reg_cpt2,pos_x_adv
000290 5f6f                      	subi	reg_cpt2,-0x01
000291 1756                      	cp		reg_cpt1,reg_cpt2
000292 f0c9                      	breq	CI_X_OK
000293 c02b                      	rjmp	Adversaire_Pas_OK
                                 Detection_Est:
000294 9150 0075                 	lds		reg_cpt1,pos_y
000296 9160 0079                 	lds		reg_cpt2,pos_y_adv
000298 5f6f                      	subi	reg_cpt2,-0x01
000299 1756                      	cp		reg_cpt1,reg_cpt2
00029a f0c1                      	breq	CI_Y_OK
00029b c023                      	rjmp	Adversaire_Pas_OK
                                 Detection_Sud:
00029c 9150 0074                 	lds		reg_cpt1,pos_x
00029e 9160 0078                 	lds		reg_cpt2,pos_x_adv
0002a0 5061                      	subi	reg_cpt2,0x01
0002a1 1756                      	cp		reg_cpt1,reg_cpt2
0002a2 f049                      	breq	CI_X_OK
0002a3 c01b                      	rjmp	Adversaire_Pas_OK
                                 Detection_Ouest:
0002a4 9150 0075                 	lds		reg_cpt1,pos_y
0002a6 9150 0079                 	lds		reg_cpt1,pos_y_adv
0002a8 5061                      	subi	reg_cpt2,0x01
0002a9 1756                      	cp		reg_cpt1,reg_cpt2
0002aa f041                      	breq	CI_Y_OK
0002ab c013                      	rjmp	Adversaire_Pas_OK
                                 CI_X_OK:
0002ac 9150 0075                 	lds		reg_cpt1,pos_y
0002ae 9150 0079                 	lds		reg_cpt1,pos_y_adv
0002b0 1756                      	cp		reg_cpt1,reg_cpt2
0002b1 f041                      	breq	Adversaire_OK
0002b2 c00c                      	rjmp	Adversaire_Pas_OK
                                 CI_Y_OK:
0002b3 9150 0074                 	lds		reg_cpt1,pos_x
0002b5 9160 0078                 	lds		reg_cpt2,pos_x_adv
0002b7 1756                      	cp		reg_cpt1,reg_cpt2
0002b8 f009                      	breq	Adversaire_OK
0002b9 c005                      	rjmp	Adversaire_Pas_OK
                                 Adversaire_OK:
0002ba e051                      	ldi		reg_cpt1,0x01
0002bb 9350 007b                 	sts		adv_ok,reg_cpt1
0002bd 5e00                      	subi	r16,-0x20
0002be cfbf                      	rjmp	CREATION_IMAGE
                                 Adversaire_Pas_OK:
0002bf e050                      	ldi		reg_cpt1,0x00
0002c0 9350 007b                 	sts		adv_ok,reg_cpt1
0002c2 cfbb                      	rjmp	CREATION_IMAGE
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Attaque de la cible
                                 Attaquer:
0002c3 9100 007b                 	lds		r16,adv_ok
0002c5 3001                      	cpi		r16,0x01
0002c6 f009                      	breq	ON_ENVOIE_LA_SAUCE
0002c7 c07a                      	rjmp	Jeu_En_Cours
                                 ON_ENVOIE_LA_SAUCE:
0002c8 e0e0                      	ldi		reg_TX,0x00			;on envoie par bluetooth le signal de fin de jeu
0002c9 dd81                      	rcall	USART_Transmit
0002ca e030                      	ldi		reg_addrL,0x00		;on affiche l'écran de victoire
0002cb e54c                      	ldi		reg_addrH,0x5C
0002cc de07                      	rcall	writeFullSreen
0002cd ef1f                      	ldi		reg_cpt3,255
0002ce d0a0                      	rcall	tempo_MS
0002cf ef1f                      	ldi		reg_cpt3,255
0002d0 d09e                      	rcall	tempo_MS
0002d1 ef1f                      	ldi		reg_cpt3,255
0002d2 d09c                      	rcall	tempo_MS
0002d3 ef1f                      	ldi		reg_cpt3,255
0002d4 d09a                      	rcall	tempo_MS
0002d5 ef1f                      	ldi		reg_cpt3,255
0002d6 d098                      	rcall	tempo_MS
0002d7 ef1f                      	ldi		reg_cpt3,255
0002d8 d096                      	rcall	tempo_MS
0002d9 ef1f                      	ldi		reg_cpt3,255
0002da d094                      	rcall	tempo_MS
0002db 940c 0327                 	jmp	GAME
                                 	
                                 CSGO_INC:
                                 	
0002dd 9478                      	sei
                                 
                                 	/*rcall	rand
                                 	lds		reg_init,pos_rand
                                 	sbrs	reg_init,7
                                 	cbi		PORTD,6
                                 	sbrc	reg_init,7
                                 	sbi		PORTD,6*/
                                 
0002de e008                      	ldi		reg_init,8						;initialisation du curseur
                                 
                                 	
                                 
                                 loopMain:									;premier menu
0002df 2f60                      	mov		reg_cpt2,reg_init				;récupération de la position du curseur
0002e0 9bcc                      	bHa[]									;test du bouton "vers le haut"
0002e1 c009                      	rjmp	UP
0002e2 9bca                      	bBa[]									;test du bouton "vers le bas"
0002e3 c00e                      	rjmp	DOWN
                                 END:
0002e4 e030
0002e5 e640
0002e6 0f40
0002e7 ddec                      	Fenetre_Debut[]							;affichage des caractères de la page principale
0002e8 9bce                      	bA[]									;test du bouton validation
0002e9 c00f                      	rjmp	CHOIX
                                 END_CHOIX:
0002ea cff4                      	rjmp	loopMain						;boucle infini
                                 
                                 UP:
0002eb 3008                      	cpi		reg_init,8						;test si on est tout en haut
0002ec f3b9                      	breq	END
0002ed 3004                      	cpi		reg_init,4						;test si on est au milieu
0002ee e008                      	ldi		reg_init,8
0002ef f3a1                      	breq	END
0002f0 e004                      	ldi		reg_init,4
0002f1 cff2                      	rjmp	END
                                 
                                 DOWN:
0002f2 3000                      	cpi		reg_init,0						;idem
0002f3 f381                      	breq	END
0002f4 3004                      	cpi		reg_init,4
0002f5 e000                      	ldi		reg_init,0
0002f6 f369                      	breq	END
0002f7 e004                      	ldi		reg_init,4
0002f8 cfeb                      	rjmp	END
                                 
                                 CHOIX:
0002f9 3004                      	cpi		reg_init,4						;test du curseur pour éguiller la fonction
0002fa f061                      	breq	RESEAU
0002fb 3000                      	cpi		reg_init,0
0002fc f011                      	breq	MENTION
0002fd e000                      	ldi		reg_init,0
0002fe c028                      	rjmp	GAME
                                 
                                 MENTION:
0002ff e030
000300 e744
000301 ddd2                      	MENTION_MA[]							;affichage des mentions
000302 9bcd                      	bB[]
000303 e008                      	ldi		reg_init,8
000304 9bcd                      	bB[]
000305 cfd9                      	rjmp	loopMain
000306 cff8                      	rjmp	MENTION
                                 
                                 	RESEAU:										;boucle du test de connection réseau
000307 de5d
000308 e030
000309 dea0                      	CONN1[]
                                 
00030a e0e1                      	ldi		reg_TX,1						;ping en UART
00030b dd3f                      	rcall	USART_Transmit
                                 
00030c e036
00030d de9c                      	CONN2[]
                                 
00030e ef1f                      	ldi		reg_cpt3,255
00030f d05f                      	rcall	tempo_MS
                                 
000310 e03c
000311 de98                      	CONN3[]
                                 
                                 loopReseau1:
                                 
000312 fd01                      	sbrc	reg_init,1
000313 c00e                      	rjmp	loopReseau2
                                 
000314 3021                      	cpi		reg_RX,1						;résultat du ping
000315 f041                      	breq	loopReseau3
                                 
000316 e0e1                      	ldi		reg_TX,1						;ping en UART
000317 dd33                      	rcall	USART_Transmit
                                 
000318 ef1f                      	ldi		reg_cpt3,255
000319 d055                      	rcall	tempo_MS
                                 
00031a e030
00031b e740
00031c ddb7                      	NO_CONNECTED[]
                                 
00031d c004                      	rjmp	loopReseau2
                                 
                                 loopReseau3:
                                 
00031e e002                      	ldi		reg_init,2						;une fois connecter on le reste !!!
00031f e030
000320 e64c
000321 ddb2                      	CONNECTED[]
                                 
                                 
                                 loopReseau2:
000322 9bcd                      	bB[]
000323 e008                      	ldi		reg_init,8
000324 9bcd                      	bB[]
000325 cfb9                      	rjmp	loopMain
000326 cfeb                      	rjmp	loopReseau1
                                 
                                 
                                 GAME:
000327 9bcc                      	bHa[]									;choix du mode de jeu
000328 e000                      	ldi		reg_init,0
000329 9bca                      	bBa[]
00032a e004                      	ldi		reg_init,4
                                 
00032b e030                      	ldi		reg_addrL,0x00					;affichage en fonction du curseur
00032c e748                      	ldi		reg_addrH,0x78
00032d 0f40                      	add		reg_addrH,reg_init
00032e dda5                      	rcall	writeFullSreen
                                 
00032f 9bce                      	bA[]
000330 e4d8                      	ldi		reg_csgo_mapH,0x48
000331 9bce                      	bA[]
000332 c007                      	rjmp	Lancement_Jeu					;lancement du jeu (1 mode disponible pour l'instant
                                 
000333 9bcd                      	bB[]									;test de retour à l'écran principale
000334 e008                      	ldi		reg_init,8
000335 9bcd                      	bB[]
000336 efdf                      	ldi		reg_csgo_mapH,255
000337 9bcd                      	bB[]
000338 cfa6                      	rjmp	loopMain
000339 cfed                      	rjmp	GAME
                                 
                                 Lancement_Jeu:								;on détermine dans quel mode de jeu on est
00033a 3000                      	cpi		reg_init,0
00033b f009                      	breq	MME
00033c c001                      	rjmp	Cible
                                 MME:
                                 	;on teste si on est bien connecté, si oui:
                                 	;pos rand devient la position du joueur
00033d cf11                      	rjmp	Affichage_Image
                                 Cible:
                                 	;pos rand devient la position de la cible
00033e 9130 0076                 	lds		reg_addrL,numero_mapL		;on se replace à la case actuelle dans la mémoire
000340 9140 0077                 	lds		reg_addrH,numero_mapH
                                 
                                 Jeu_En_Cours:								;boucle du jeu en cours
000342 9bc9                      	bGa[]								
000343 cefb                      	rjmp	Tourner_Gauche
000344 9bcb                      	bDr[]
000345 cf01                      	rjmp	Tourner_Droite
000346 9bcc                      	bHa[]
000347 cece                      	rjmp	Avancer
000348 9bce                      	bA[]
000349 cf79                      	rjmp	Attaquer
00034a 9110 0072                 	lds		reg_cpt3,dead					;on teste si on est mort
00034c 3010                      	cpi		reg_cpt3,0
00034d f499                      	brne	en_vie
00034e e030                      	ldi		reg_addrL,0x00					;on affiche l'écran de défaite
00034f e548                      	ldi		reg_addrH,0x58
000350 dd83                      	rcall	writeFullSreen
000351 ef1f                      	ldi		reg_cpt3,255					;on attend un peu
000352 d01c                      	rcall	tempo_MS
000353 ef1f                      	ldi		reg_cpt3,255
000354 d01a                      	rcall	tempo_MS
000355 ef1f                      	ldi		reg_cpt3,255
000356 d018                      	rcall	tempo_MS
000357 ef1f                      	ldi		reg_cpt3,255
000358 d016                      	rcall	tempo_MS
000359 ef1f                      	ldi		reg_cpt3,255
00035a d014                      	rcall	tempo_MS
00035b ef1f                      	ldi		reg_cpt3,255
00035c d012                      	rcall	tempo_MS
00035d ef1f                      	ldi		reg_cpt3,255
00035e d010                      	rcall	tempo_MS
00035f 940c 0327                 	jmp	GAME								;et on revient au menu
                                 en_vie:
000361 e614                      	ldi		reg_cpt3,100					;sinon on reboucle sur le jeu
000362 d00c                      	rcall	tempo_MS
000363 38e0
000364 f020
000365 732f
000366 93e0 0078
000368 c005
000369 30e0
00036a f019
00036b 732f
00036c 93e0 0079                 	PosPerso[]
00036e cee0                      	rjmp	Affichage_Image
                                 	;rjmp	Jeu_En_Cours
                                 
                                 
                                 
                                 ; sous programme de temporisation, dure approximativement 127.49us si charge 1 dans reg_cpt3
                                 tempo_MS:
00036f ef8f                      	ldi	reg_spi, 255
                                 boucletempo_MS:
000370 0000                      	nop
000371 958a                      	dec	reg_spi
000372 f7e9                      	brne boucletempo_MS
000373 951a                      	dec	reg_cpt3
000374 f7d1                      	brne tempo_MS
000375 9508                      	ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16A" register use summary:
x  :  19 y  :   0 z  :   0 r0 :   2 r1 :   9 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 121 r17: 134 r18:   6 r19:  25 r20:  16 
r21:  40 r22:  33 r23:   6 r24:  24 r25:  51 r26:   5 r27:   4 r28:  10 
r29:   3 r30:  22 r31:   0 
Registers used: 18 out of 35 (51.4%)

"ATmega16A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   6 adiw  :   0 and   :   1 
andi  :   8 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  25 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 brlt  :   0 brmi  :   0 
brne  :  14 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  39 cbr   :   0 
clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :  10 cpc   :   0 
cpi   :  34 cpse  :   0 dec   :   3 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  12 inc   :  13 jmp   :   5 
ld    :   6 ldd   :   0 ldi   : 167 lds   :  40 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :  21 movw  :   0 mul   :   4 muls  :   0 mulsu :   0 
neg   :   0 nop   :   2 or    :   1 ori   :  15 out   :  60 pop   :   0 
push  :   0 rcall :  67 ret   :   9 reti  :   6 rjmp  :  65 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  42 sbic  :   3 sbis  :  21 
sbiw  :   0 sbr   :   0 sbrc  :   3 sbrs  :   8 sec   :   0 seh   :   0 
sei   :   2 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  13 std   :   0 sts   :  26 
sub   :   1 subi  :  14 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 39 out of 113 (34.5%)

"ATmega16A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006ec   1694      0   1694   16384  10.3%
[.dseg] 0x000060 0x00007c      0     28     28    1024   2.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
