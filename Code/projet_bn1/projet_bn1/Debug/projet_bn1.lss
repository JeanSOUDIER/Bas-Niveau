
AVRASM ver. 2.2.7  D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm Wed Jan 01 14:22:21 2020

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16adef.inc'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(28): warning: Register r31 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(34): warning: Register r18 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(37): warning: Register r28 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(39): warning: Register r29 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(40): warning: Register r27 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(90): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\lettre.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(92): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\io.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(94): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\uart.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(96): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\adc.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(98): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\timer.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(100): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\spi.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(102): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\screen.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(104): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\char_array.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16adef.inc'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(90): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\lettre.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(92): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\io.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(94): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\uart.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(96): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\adc.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(98): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\timer.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(100): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\spi.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(102): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\screen.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(104): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\char_array.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16A.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m16Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega16A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega16A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M16ADEF_INC_
                                 #define _M16ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega16A
                                 #pragma AVRPART ADMIN PART_NAME ATmega16A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x94
                                 .equ	SIGNATURE_002	= 0x03
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SE	= 6	; Sleep Enable
                                 .equ	SM2	= 7	; Sleep Mode Select
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special function I/O register
                                 ;.equ	PSR10	= 0	; Prescaler reset
                                 .equ	PSR2	= 1	; Prescaler reset
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 16384
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1c00
                                 .equ	NRWW_STOP_ADDR	= 0x1fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1bff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x1f80
                                 .equ	SECONDBOOTSTART	= 0x1f00
                                 .equ	THIRDBOOTSTART	= 0x1e00
                                 .equ	FOURTHBOOTSTART	= 0x1c00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M16ADEF_INC_ */
                                 
                                 
                                 ; main.asm
                                 ;
                                 ; Created: 25/10/2019 13:42:48
                                 ; Author : jsoudier01
                                 ;
                                 ;code programme
                                 
                                 ;.nolist 
                                 ;.include "m16def.inc"
                                 ;.list 
                                 
                                 .def tri = r1						; TimerInterruptRegister.
                                 
                                 .def reg_init = r16
                                 
                                 ;.def reg_test1 = r15
                                 ;.def reg_test2 = r14
                                 ;.def reg_test3 = r13
                                 ;.def reg_bt1 = r24
                                 ;r17
                                 
                                 .def reg_spi = r18
                                 .def reg_addrL = r19
                                 .def reg_addrH = r20
                                 
                                 .def reg_lettre = r24
                                 .def reg_out = r31
                                 
                                 .def reg_cpt1 = r21
                                 .def reg_cpt2 = r22
                                 .def reg_cpt3 = r23
                                 
                                 .def reg_screen = r18
                                 
                                 .def reg_vol = r25
                                 .def reg_son = r28
                                 
                                 .def reg_TX = r29
                                 .def reg_RX = r27
                                 
                                 .cseg  ; codesegment
                                 .org	0x00
000000 c02f                         rjmp	RESET 
                                 
                                 ; interrupt-vector commands, 1 Byte each:
                                 /*	reti							; 1:  $000(1) RESET External Pin, Power-on Reset, Brown-out Reset, Watchdog Reset, and JTAG AVR Reset
                                 	reti							; 2:  $002 INT0 External Interrupt Request 0 
                                 	reti							; 3:  $004 INT1 External Interrupt Request 1 
                                 	reti							; 4:  $006 TIMER2 COMP Timer/Counter2 Compare Match 
                                 	reti							; 5:  $008 TIMER2 OVF Timer/Counter2 Overflow 
                                 	reti							; 6:  $00A TIMER1 CAPT Timer/Counter1 Capture Event
                                 	reti							; 7:  $00C TIMER1 COMPA Timer/Counter1 Cmp Match A 
                                 	reti							; 8:  $00E TIMER1 COMPB Timer/Counter1 Cmpe Match B
                                 	rjmp TI_Interrupt				; 9:  $010 TIMER1 OVF Timer/Counter1 Overflow
                                 	reti							; 10: $012 TIMER0 OVF Timer/Counter0 Overflow
                                 	reti							; 11: $014 SPI, STC Serial Transfer Complete
                                 	rjmp UART_Interrupt				; 12: $016 USART, RXC USART, Rx Complete
                                 	reti							; 13: $018 USART, UDRE USART Data Register Empty 
                                 	reti							; 14: $01A USART, TXC USART, Tx Complete 
                                 	reti							; 15: $01C ADC ADC Conversion Complete 
                                 	reti							; 16: $01E EE_RDY EEPROM Ready
                                 	reti							; 17: $020 ANA_COMP Analog Comparator 
                                 	reti							; 18: $022 TWI Two-wire Serial Interface
                                 	reti							; 19: $024 INT2 External Interrupt Request 2
                                 	reti							; 20: $026 TIMER0 COMP Timer/Counter0 Compare Match
                                 	reti							; 21 $028 SPM_RDY Store Program Memory Reazdy
                                 	*/
                                 .org 0x0C
00000c 9518                      	reti
                                 .org 0x0A
00000a 9518                      	reti
                                 .org 0x10
000010 940c 0073                 	jmp		TI_Interrupt
                                 .org 0x16
000016 940c 0057                 	jmp		UART_Interrupt
                                 
                                 .org 0x30							; se placer à la case mémoire 10 en hexa
                                 reset:								; adresse du vecteur de reset
000030 e004                      	ldi		r16,high(RAMEND)		; initialisation de la pile
000031 bf0e                      	out		SPH,r16
000032 e50f                      	ldi		r16,low(RAMEND)
000033 bf0d                      	out		SPL,r16
                                 
000034 ef7f                      	ldi		reg_cpt3,255
000035 d08a                      	rcall	tempo
                                 
                                 
                                 	;ajout des programmes pour la gestion des modules
                                 	.include "lettre.asm"
                                 
                                 .equ C_B = 5
                                 .equ C_C = 10
                                 .equ C_D = 15
                                 .equ C_E = 20
                                 .equ C_F = 25
                                 .equ C_G = 30
                                 .equ C_H = 35
                                 .equ C_I = 40
                                 .equ C_J = 45
                                 .equ C_K = 50
                                 .equ C_L = 55
                                 .equ C_M = 60
                                 .equ C_N = 65
                                 .equ C_O = 70
                                 .equ C_P = 75
                                 .equ C_Q = 80
                                 .equ C_R = 85
                                 .equ C_S = 90
                                 .equ C_T = 95
                                 .equ C_U = 100
                                 .equ C_V = 105
                                 .equ C_W = 110
                                 .equ C_X = 115
                                 .equ C_Y = 120
                                 .equ C_Z = 125
                                 .equ C_0 = 130
                                 .equ C_1 = 135
                                 .equ C_2 = 140
                                 .equ C_3 = 145
                                 .equ C_4 = 150
                                 .equ C_5 = 155
                                 .equ C_6 = 160
                                 .equ C_7 = 165
                                 .equ C_8 = 170
                                 .equ C_9 = 175
                                 .equ C_IN = 180
                                 .equ C_EX = 185
                                 .equ C_PT = 190
                                 .equ C_DA = 195
                                 .equ C_PAO = 200
                                 .equ C_PAF = 205
                                 .equ C_PL = 210
                                 .equ C_MO = 215
                                 .equ C_SL = 220
                                 .equ C_MUL = 225
                                 .equ C_DP = 230
                                 .equ C_EG = 235
                                 .equ C_# = 240
                                 .equ C_CH = 245
                                 .equ CHAR_SIZE = 6
                                 
000036 c008                      rjmp		LETTRE_INC
                                 
                                 conv_lettre:
000037 99e1                      	sbic	EECR,EEWE				;test de d'écriture dans l'eeprom
000038 cffe                      	rjmp	conv_lettre
                                 
000039 e0f0                      	ldi		reg_out,0				;chargement de l'addresse du caractère
00003a bb8e                      	out		EEARL,reg_lettre
00003b bbff                      	out		EEARH,reg_out
                                 	
00003c 9ae0                      	sbi		EECR,EERE				;test de fin de lecture
00003d b3fd                      	in		reg_out,EEDR			;lecture
00003e 9508                      	ret
                                 LETTRE_INC:
                                 	.include "io.asm"
                                 
                                 
                                 IO_Init:
00003f e000                      	ldi		reg_init,0x00			;porta en entrée
000040 bb0a                      	out		DDRA,reg_init
000041 eb0f                      	ldi		reg_init,0xBF			;portb en entrée sur miso
000042 bb07                      	out		DDRB,reg_init
000043 ef0f                      	ldi		reg_init,0xFF			;portc en sortie
000044 bb04                      	out		DDRC,reg_init
000045 ee02                      	ldi		reg_init,0xE2			;portd en sortie sur TX, BUZZER et LED
000046 bb01                      	out		DDRD,reg_init
000047 c000                      IO_INC:
                                 	.include "uart.asm"
                                 
                                 .equ baud = 51								;9600 =>103
                                 
                                 USART_Init:									; Set baud rate to UBRR0 
000048 e3d3                      	ldi		reg_TX,baud
000049 b9d9                      	out		UBRRL, reg_TX					; Enable receiver and transmitter  
00004a e0d0                      	ldi		reg_TX,0 
00004b bdd0                      	out		UBRRH, reg_TX    
00004c e0d0                      	ldi		reg_TX,0
00004d b9db                      	out		UCSRA,reg_TX
00004e e9d8                      	ldi		reg_TX,(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)   
00004f b9da                      	out		UCSRB,reg_TX					; Set frame format: 8data, 2stop bit   
000050 e8de                      	ldi		reg_TX,(1<<URSEL)|(1<<USBS)|(3<<UCSZ0)   
000051 bdd0                      	out		UCSRC,reg_TX  
                                 
000052 c008                      	rjmp	UART_INC					;go to main
                                 
                                 USART_Transmit:								; Wait for empty transmit buffer
000053 9b5d                      	sbis	UCSRA,UDRE 
000054 cffe                      	rjmp	USART_Transmit					; Put data (r16) into buffer, sends the data   
000055 b9dc                      	out		UDR,reg_TX   
000056 9508                      	ret 
                                 
                                 UART_Interrupt:
000057 b61f                      	in		tri,SREG						; save content of flag reg.
000058 b1bc                      	in		reg_RX,UDR
000059 be1f                      	out		SREG,tri						; restore flag register
00005a 9518                      	reti 									; Return from interrupt
                                 UART_INC:
                                 	.include "adc.asm"
                                 
                                 
                                 ADC_Init:
00005b e600                      	ldi		reg_init,(1<<ADLAR)|(1<<REFS0)														;ext ref / left adjust / mux toADC0
00005c b907                      	out		ADMUX,reg_init
00005d ec06                      	ldi		reg_init,(1<<ADEN)|(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)						;adc enable / adc start / no auto trig / no interrupt / div 64
00005e b906                      	out		ADCSRA,reg_init
00005f c000                      ADC_INC:
                                 	.include "timer.asm"
                                 
                                 
                                 .macro bGa[]
                                 	sbis	PINA,1
                                 .endmacro
                                 .macro bGan[]
                                 	sbic	PINA,1
                                 .endmacro
                                 .macro bBa[]
                                 	sbis	PINA,2
                                 .endmacro
                                 .macro bBan[]
                                 	sbic	PINA,2
                                 .endmacro
                                 .macro bDr[]
                                 	sbis	PINA,3
                                 .endmacro
                                 .macro bDrn[]
                                 	sbic	PINA,3
                                 .endmacro
                                 .macro bHa[]
                                 	sbis	PINA,4
                                 .endmacro
                                 .macro bHan[]
                                 	sbic	PINA,4
                                 .endmacro
                                 .macro bB[]
                                 	sbis	PINA,5
                                 .endmacro
                                 .macro bBn[]
                                 	sbic	PINA,5
                                 .endmacro
                                 .macro bA[]
                                 	sbis	PINA,6
                                 .endmacro
                                 .macro bAn[]
                                 	sbic	PINA,6
                                 .endmacro
                                 .macro bSta[]
                                 	sbis	PINA,7
                                 .endmacro
                                 .macro bStan[]
                                 	sbic	PINA,7
                                 .endmacro
                                 .macro bSel[]
                                 	sbis	PIND,2
                                 .endmacro
                                 .macro bSeln[]
                                 	sbic	PIND,2
                                 .endmacro
                                 .macro bL[]
                                 	sbis	PIND,3
                                 .endmacro
                                 .macro bLn[]
                                 	sbic	PIND,3
                                 .endmacro
                                 .macro bR[]
                                 	sbis	PIND,4
                                 .endmacro
                                 .macro bRn[]
                                 	sbic	PIND,4
                                 .endmacro
                                 
                                 TIMER_Init:
000060 e892                      	ldi		reg_vol,(1<<WGM11)|(1<<COM1A1)
000061 e1ca                      	ldi		reg_son,(1<<WGM13)|(1<<WGM12)|(1<<CS11)
000062 bd9f                      	out		TCCR1A,reg_vol
000063 bdce                      	out		TCCR1B,reg_son				;démarrage du timer à 16KHz => soit à 8k
000064 b798                      	in		reg_vol,TIFR				;clear flag
000065 7f9b                      	andi	reg_vol,0xFB
000066 bf98                      	out		TIFR,reg_vol
000067 b799                      	in		reg_vol,TIMSK				;interrupt enable
000068 6394                      	ori		reg_vol,(1<<TICIE1)|(1<<TOIE1)|(1<<OCIE1A)
                                 	;out		TIMSK,reg_vol
                                 
000069 e090                      	ldi		reg_vol,0
00006a bd9b                      	out		OCR1AH,reg_vol
00006b e091                      	ldi		reg_vol,1
00006c bd9a                      	out		OCR1AL,reg_vol
                                 
00006d e694                      	ldi		reg_vol,100
00006e bd97                      	out		ICR1H,reg_vol
00006f e090                      	ldi		reg_vol,0
000070 bd96                      	out		ICR1L,reg_vol
                                 
000071 e0c0                      	ldi		reg_son,0
000072 c01f                      	rjmp	TIMER_INC
                                 
                                 
                                 TI_Interrupt:
000073 b61f                      	in		tri,SREG					; save content of flag reg.
                                 
                                 	;gestion du volume
000074 b195                      	in		reg_vol,ADCH				;on lit la valeur de l'adc convertie
                                 
                                 	/*cbi		PORTB,4									;clear SS
                                 	ldi		reg_spi,0x03							;instruction de lecture mémoire
                                 	rcall	SPI_Transmit
                                 	ldi		reg_spi,0						;sélection de l'adresse H
                                 	rcall	SPI_Transmit
                                 	mov		reg_spi,reg_son						;sélection de l'adresse L
                                 	rcall	SPI_Transmit
                                 	ldi		reg_spi,0x00							;lecture de la réponse
                                 	rcall	SPI_Transmit
                                 	sbi		PORTB,4									;set SS
                                 	out		TCNT1H,reg_spi*/
000075 95c3                      	inc		reg_son
000076 bdc7                      	out		ICR1H,reg_son
                                 
                                 
                                 
000077 2f2c                      	mov		reg_spi,reg_son
000078 9596                      	lsr		reg_vol
000079 fd26                      	sbrc	reg_spi,6
00007a 9596                      	lsr		reg_vol
00007b fd25                      	sbrc	reg_spi,5
00007c 9596                      	lsr		reg_vol
00007d fd24                      	sbrc	reg_spi,4
00007e 9596                      	lsr		reg_vol
00007f fd23                      	sbrc	reg_spi,3
000080 9596                      	lsr		reg_vol
000081 fd22                      	sbrc	reg_spi,2
000082 9596                      	lsr		reg_vol
000083 fd21                      	sbrc	reg_spi,1
000084 9596                      	lsr		reg_vol
                                 
000085 bd9a                      	out		OCR1AL,reg_vol
000086 b196                      	in		reg_vol,ADCSRA
000087 6490                      	ori		reg_vol,(1<<ADSC)			;relance d'une conversion
000088 b996                      	out		ADCSRA,reg_vol
000089 e090                      	ldi		reg_vol,0
00008a bd9d                      	out		TCNT1H,reg_vol
00008b bd9c                      	out		TCNT1L,reg_vol
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 	
                                 
                                 	;sbic	PIND,6
                                 	;cbi		PORTD,5
                                 	;sbis	PIND,6
                                 	;sbi		PORTD,5
                                 
                                 	;gestion de la led
00008c 9986                      	sbic	PIND,6						;blink led
00008d 9896                      	cbi		PORTD,6
00008e 9b86                      	sbis	PIND,6
00008f 9a96                      	sbi		PORTD,6
                                 
                                 	
                                 
000090 be1f                      	out		SREG,tri					; restore flag register
000091 9518                      	reti 								; Return from interrupt
                                 TIMER_INC:
                                 	.include "spi.asm"
                                 
                                 
                                 .equ WREN = 0x06
                                 .equ WRDI = 0x04
                                 .equ READ = 0x03
                                 .equ WRITE = 0x02
                                 
                                 .macro WR_DI[]
                                 	cbi		PORTB,4
                                 	ldi		reg_spi,WRDI
                                 	rcall	SPI_Transmit
                                 	sbi		PORTB,4
                                 	ldi		reg_cpt3,255
                                 	rcall	tempo
                                 .endmacro
                                 
                                 .macro WR_EN[]
                                 	cbi		PORTB,4									;clear SS
                                 	ldi		reg_spi,WREN							;instruction de mémoire en ecriture
                                 	rcall	SPI_Transmit
                                 	sbi		PORTB,4
                                 	ldi		reg_cpt3,255
                                 	rcall	tempo
                                 .endmacro
                                 
                                 SPI_Init:
000092 e521                      	ldi		reg_spi,(1<<SPE)|(1<<MSTR)|(1<<SPR0)	; ON / MASTER / fosc/16
000093 b92d                      	out		SPCR,reg_spi
000094 9ac4                      	sbi		PORTB,4									;set SS
000095 98c4                      	cbi		PORTB,4
000096 e024                      	ldi		reg_spi,WRDI							;sélection du mode lecture de la mémoire
000097 d002                      	rcall	SPI_Transmit
000098 9ac4                      	sbi		PORTB,4
000099 c01c                      	rjmp	SPI_INC
                                 
                                 SPI_Transmit:										;attente transmission
00009a b92f                      	out		SPDR,reg_spi							;envoi msg
                                 Wait_SPI:
00009b 9b77                      	sbis	SPSR,SPIF								;test si fini
00009c cffe                      	rjmp	Wait_SPI
00009d b12f                      	in		reg_spi,SPDR							;lecture de la réponse
00009e 9508                      	ret
                                 
                                 Read_Mem:
00009f 98c4                      	cbi		PORTB,4									;clear SS
0000a0 e023                      	ldi		reg_spi,READ							;instruction de lecture mémoire
0000a1 dff8                      	rcall	SPI_Transmit
0000a2 2f24                      	mov		reg_spi,reg_addrH						;sélection de l'adresse H
0000a3 dff6                      	rcall	SPI_Transmit
0000a4 2f23                      	mov		reg_spi,reg_addrL						;sélection de l'adresse L
0000a5 dff4                      	rcall	SPI_Transmit
0000a6 e020                      	ldi		reg_spi,0x00							;lecture de la réponse
0000a7 dff2                      	rcall	SPI_Transmit
0000a8 9ac4                      	sbi		PORTB,4									;set SS
0000a9 9508                      	ret
                                 
                                 Write_Mem_SetB:
0000aa 98c4                      	cbi		PORTB,4
0000ab e022                      	ldi		reg_spi,WRITE
0000ac dfed                      	rcall	SPI_Transmit
0000ad 2f24                      	mov		reg_spi,reg_addrH						;sélection de l'adresse H
0000ae dfeb                      	rcall	SPI_Transmit
0000af 2f23                      	mov		reg_spi,reg_addrL						;sélection de l'adresse L
0000b0 dfe9                      	rcall	SPI_Transmit
0000b1 9508                      	ret
                                 
                                 Write_Mem_SetE:
0000b2 9ac4                      	sbi		PORTB,4
0000b3 e570                      	ldi		reg_cpt3,80
0000b4 d1e4                      	rcall	tempo_MS
0000b5 9508                      SPI_INC:
                                 	.include "screen.asm"
                                 
                                 
                                 .macro screenL[]					;choix du côté de l'écran à gauche
                                 	sbi		PORTB,0
                                 	cbi		PORTB,1
                                 .endmacro
                                 
                                 .macro screenR[]					;choix du côté de l'écran à droite
                                 	sbi		PORTB,1
                                 	cbi		PORTB,0
                                 .endmacro
                                 
                                 .macro Enable[]						;validation de la commande sur l'écran
                                 	cbi		PORTB,3
                                 	ldi		reg_cpt3,250
                                 	rcall	tempo
                                 	sbi		PORTB,3
                                 .endmacro
                                 
                                 .macro SetPosX[]					;pos de 0 à 7 (à changer à chaque fois)
                                 	RS_clear[]
                                 	ori		reg_screen,0xB8
                                 	out		PORTC,reg_screen
                                 	Enable[]
                                 	RS_set[]
                                 .endmacro
                                 
                                 .macro SetPosY[]					;pos de 0 à 64 (auto)
                                 	RS_clear[]
                                 	ori		reg_screen,0x40
                                 	out		PORTC,reg_screen
                                 	Enable[]
                                 	RS_set[]
                                 .endmacro
                                 
                                 .macro RS_clear[]					;changement de bit instruction/données
                                 	cbi		PORTB,2
                                 .endmacro
                                 
                                 .macro RS_set[]						;changement de bit instruction/données
                                 	sbi		PORTB,2
                                 .endmacro
                                 
                                 .macro ScreenWrite[]				;affichage sur l'écran
                                 	out		PORTC,reg_screen
                                 	Enable[]
                                 .endmacro
                                 
                                 .macro inc_reg[]
                                 	inc		reg_screen
                                 	inc		reg_screen
                                 	inc		reg_screen
                                 	inc		reg_screen
                                 .endmacro
                                 
                                 SCREEN_Init:
0000b6 9ac3                      	sbi		PORTB,3					;set E and clear RS
0000b7 98c2                      	cbi		PORTB,2
0000b8 e32f                      	ldi		reg_screen,63			;instruction de début de l'écran
0000b9 bb25                      	out		PORTC,reg_screen
0000ba 98c3
0000bb ef7a
0000bc d003
0000bd 9ac3                      	Enable[]						;validation
0000be 9ac2                      	RS_set[]						;mode données
0000bf c096                      	rjmp	SCREEN_INC
                                 
                                 tempo:
                                 	tempo1:
0000c0 957a                      	dec		reg_cpt3
0000c1 0000                      	nop
0000c2 0000                      	nop
0000c3 0000                      	nop
0000c4 0000                      	nop
0000c5 0000                      	nop
0000c6 f7c9                      	brne	tempo1
0000c7 9508                      	ret
                                 
                                 ;load reg_addrL, reg_addrH, reg_lettre
                                 addImgChar:
0000c8 98c4
0000c9 e026
0000ca dfcf
0000cb 9ac4
0000cc ef7f
0000cd dff2                      	WR_EN[]
0000ce ef7f                      	ldi		reg_cpt3,255
0000cf dff0                      	rcall	tempo
0000d0 e750                      	ldi		reg_cpt1,0x70
0000d1 0f45                      	add		reg_addrH,reg_cpt1
0000d2 2f58                      	mov		reg_cpt1,reg_lettre
0000d3 9553                      	inc		reg_cpt1
0000d4 9553                      	inc		reg_cpt1
0000d5 9553                      	inc		reg_cpt1
0000d6 9553                      	inc		reg_cpt1
0000d7 9553                      	inc		reg_cpt1
0000d8 dfd1                      	rcall	Write_Mem_SetB
                                 loop_ADD1:
0000d9 df5d                      	rcall	conv_lettre				;convertion de la lettre
0000da 2f2f                      	mov		reg_spi,reg_out
0000db dfbe                      	rcall	SPI_Transmit
0000dc 9583                      	inc		reg_lettre
0000dd 9533                      	inc		reg_addrL
0000de 3030                      	cpi		reg_addrL,0
0000df f409                      	brne	loop_ADD
0000e0 9543                      	inc		reg_addrH
                                 loop_ADD:
0000e1 1758                      	cp		reg_cpt1,reg_lettre
0000e2 f7b1                      	brne	loop_ADD1
0000e3 dfce                      	rcall	Write_Mem_SetE
0000e4 9508                      	ret
                                 
                                 ;full reg_addrL/H
                                 writeFullSreen:
0000e5 98c4
0000e6 e024
0000e7 dfb2
0000e8 9ac4
0000e9 ef7f
0000ea dfd5                      	WR_DI[]
0000eb 9ac1
0000ec 98c0                      	screenR[]						;set side screen
0000ed e060                      	ldi		reg_cpt2,0				;reset var
                                 loop1:
0000ee e050                      	ldi		reg_cpt1,0
0000ef e020                      	ldi		reg_screen,0			;set pos Y = 0
0000f0 98c2
0000f1 6420
0000f2 bb25
0000f3 98c3
0000f4 ef7a
0000f5 dfca
0000f6 9ac3
0000f7 9ac2                      	SetPosY[]
0000f8 2f26                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
0000f9 98c2
0000fa 6b28
0000fb bb25
0000fc 98c3
0000fd ef7a
0000fe dfc1
0000ff 9ac3
000100 9ac2                      	SetPosX[]
                                 loop2:
000101 df9d                      	rcall Read_Mem					;lecture de la mémoire spi
000102 2f22                      	mov		reg_screen,reg_spi
000103 bb25
000104 98c3
000105 ef7a
000106 dfb9
000107 9ac3                      	ScreenWrite[]					;écriture sur l'écran
000108 9533                      	inc		reg_addrL				;incrément de l'adresse LOW
000109 3030                      	cpi		reg_addrL,0
00010a f409                      	brne	addr_carry1				;test du carry
00010b 9543                      	inc		reg_addrH
                                 addr_carry1:
                                 
00010c 9553                      	inc		reg_cpt1				;incrément du compteur 1
00010d ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
00010e cff2                      	rjmp	loop2
                                 
00010f 9563                      	inc		reg_cpt2				;incrément du copteur 2
000110 ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
000111 cfdc                      	rjmp	loop1
                                 
000112 9ac0
000113 98c1                      	screenL[]						;set side screen
000114 e060                      	ldi		reg_cpt2,0				;reset var
                                 loop3:
000115 e050                      	ldi		reg_cpt1,0
000116 e020                      	ldi		reg_screen,0			;set pos Y = 0
000117 98c2
000118 6420
000119 bb25
00011a 98c3
00011b ef7a
00011c dfa3
00011d 9ac3
00011e 9ac2                      	SetPosY[]
00011f 2f26                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
000120 98c2
000121 6b28
000122 bb25
000123 98c3
000124 ef7a
000125 df9a
000126 9ac3
000127 9ac2                      	SetPosX[]
                                 loop4:
000128 df76                      	rcall Read_Mem					;lecture de la mémoire spi
000129 2f22                      	mov		reg_screen,reg_spi
00012a bb25
00012b 98c3
00012c ef7a
00012d df92
00012e 9ac3                      	ScreenWrite[]					;écriture sur l'écran
00012f 9533                      	inc		reg_addrL				;incrément de l'adresse LOW
000130 3030                      	cpi		reg_addrL,0
000131 f409                      	brne	addr_carry2				;test du carry
000132 9543                      	inc		reg_addrH
                                 addr_carry2:
                                 
000133 9553                      	inc		reg_cpt1				;incrément du compteur 1
000134 ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
000135 cff2                      	rjmp	loop4
                                 
000136 9563                      	inc		reg_cpt2				;incrément du copteur 2
000137 ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
000138 cfdc                      	rjmp	loop3
000139 9508                      	ret
                                 
                                 CLR_RAM:
00013a e030                      	ldi		reg_addrL,0x00
00013b e740                      	ldi		reg_addrH,0x70
00013c e060                      	ldi		reg_cpt2,0				;reset var
                                 loop_CLR:
00013d e050                      	ldi		reg_cpt1,0
00013e 98c4
00013f e026
000140 df59
000141 9ac4
000142 ef7f
000143 df7c                      	WR_EN[]
000144 ef7f                      	ldi		reg_cpt3,255
000145 df7a                      	rcall	tempo
000146 df63                      	rcall	Write_Mem_SetB
000147 0000                      	nop
                                 loop_CLR1:
000148 e020                      	ldi		reg_spi,0
000149 df50                      	rcall	SPI_Transmit
00014a 9533                      	inc		reg_addrL				;incrément de l'adresse LOW
00014b 3030                      	cpi		reg_addrL,0
00014c f409                      	brne	addr_carry3				;test du carry
00014d 9543                      	inc		reg_addrH
                                 addr_carry3:
                                 
00014e 9553                      	inc		reg_cpt1				;incrément du compteur 1
00014f ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
000150 cff7                      	rjmp	loop_CLR1
                                 
000151 df60                      	rcall	Write_Mem_SetE
                                 
000152 9563                      	inc		reg_cpt2				;incrément du copteur 2
000153 ff64                      	sbrs	reg_cpt2,4				;test de fin de boucle = 16
000154 cfe8                      	rjmp	loop_CLR
                                 
000155 9508                      	ret
                                 SCREEN_INC:
                                 	.include "char_array.asm"
                                 
000156 e63a                      	ldi		reg_addrL,CHAR_SIZE*17+4
000157 e043                      	ldi		reg_addrH,3
000158 e28d                      	ldi		reg_lettre,C_J
000159 df6e                      	rcall	addImgChar
                                 
00015a e634                      	ldi		reg_addrL,CHAR_SIZE*16+4
00015b e043                      	ldi		reg_addrH,3
00015c e486                      	ldi		reg_lettre,C_O
00015d df6a                      	rcall	addImgChar
                                 	
00015e e53e                      	ldi		reg_addrL,CHAR_SIZE*15+4
00015f e043                      	ldi		reg_addrH,3
000160 e684                      	ldi		reg_lettre,C_U
000161 df66                      	rcall	addImgChar
                                 	
000162 e537                      	ldi		reg_addrL,CHAR_SIZE*14+3
000163 e043                      	ldi		reg_addrH,3
000164 e184                      	ldi		reg_lettre,C_E
000165 df62                      	rcall	addImgChar
                                 	
000166 e530                      	ldi		reg_addrL,CHAR_SIZE*13+2
000167 e043                      	ldi		reg_addrH,3
000168 e585                      	ldi		reg_lettre,C_R
000169 df5e                      	rcall	addImgChar
                                 	
00016a e23a                      	ldi		reg_addrL,CHAR_SIZE*7
00016b e043                      	ldi		reg_addrH,3
00016c e585                      	ldi		reg_lettre,C_R
00016d df5a                      	rcall	addImgChar
                                 	
00016e e233                      	ldi		reg_addrL,CHAR_SIZE*6-1
00016f e043                      	ldi		reg_addrH,3
000170 e184                      	ldi		reg_lettre,C_E
000171 df56                      	rcall	addImgChar
                                 
000172 e13c                      	ldi		reg_addrL,CHAR_SIZE*5-2
000173 e043                      	ldi		reg_addrH,3
000174 e58a                      	ldi		reg_lettre,C_S
000175 df52                      	rcall	addImgChar
                                 
000176 e136                      	ldi		reg_addrL,CHAR_SIZE*4-2
000177 e043                      	ldi		reg_addrH,3
000178 e184                      	ldi		reg_lettre,C_E
000179 df4e                      	rcall	addImgChar
                                 
00017a e03f                      	ldi		reg_addrL,CHAR_SIZE*3-3
00017b e043                      	ldi		reg_addrH,3
00017c e080                      	ldi		reg_lettre,C_A
00017d df4a                      	rcall	addImgChar
                                 
00017e e039                      	ldi		reg_addrL,CHAR_SIZE*2-3
00017f e043                      	ldi		reg_addrH,3
000180 e684                      	ldi		reg_lettre,C_U
000181 df46                      	rcall	addImgChar
                                 
000182 ee3a                      	ldi		reg_addrL,CHAR_SIZE*39
000183 e042                      	ldi		reg_addrH,2
000184 e38c                      	ldi		reg_lettre,C_M
000185 df42                      	rcall	addImgChar
                                 
000186 ee33                      	ldi		reg_addrL,CHAR_SIZE*38-1
000187 e042                      	ldi		reg_addrH,2
000188 e184                      	ldi		reg_lettre,C_E
000189 df3e                      	rcall	addImgChar
                                 
00018a ed3c                      	ldi		reg_addrL,CHAR_SIZE*37-2
00018b e042                      	ldi		reg_addrH,2
00018c e481                      	ldi		reg_lettre,C_N
00018d df3a                      	rcall	addImgChar
                                 
00018e ed35                      	ldi		reg_addrL,CHAR_SIZE*36-3
00018f e042                      	ldi		reg_addrH,2
000190 e58f                      	ldi		reg_lettre,C_T
000191 df36                      	rcall	addImgChar
                                 
000192 ec3f                      	ldi		reg_addrL,CHAR_SIZE*35-3
000193 e042                      	ldi		reg_addrH,2
000194 e288                      	ldi		reg_lettre,C_I
000195 df32                      	rcall	addImgChar
                                 
000196 ec39                      	ldi		reg_addrL,CHAR_SIZE*34-3
000197 e042                      	ldi		reg_addrH,2
000198 e486                      	ldi		reg_lettre,C_O
000199 df2e                      	rcall	addImgChar
                                 
00019a ec33                      	ldi		reg_addrL,CHAR_SIZE*33-3
00019b e042                      	ldi		reg_addrH,2
00019c e481                      	ldi		reg_lettre,C_N
00019d df2a                      	rcall	addImgChar
                                 
00019e c00c                      	rjmp	FEN_lab
                                 
                                 .macro CONNECTED[]				;affichage de "connecte"
                                 	rcall CLR_RAM
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*6
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_C
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*5
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_O
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*4
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_N
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*3
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_N
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*2
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_E
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_C
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,0
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_T
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*10-2
                                 	ldi		reg_addrH,1
                                 	ldi		reg_lettre,C_E
                                 	rcall	addImgChar
                                 .endmacro
                                 
                                 .macro NO_CONNECTED[]				;affichage de "non connecte"
                                 	ldi		reg_addrL,CHAR_SIZE*6
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_N
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*5
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_O
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*4
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_N
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*3
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_PT
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*2
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_C
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_O
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,0
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_N
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*10-2
                                 	ldi		reg_addrH,1
                                 	ldi		reg_lettre,C_N
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*9-2
                                 	ldi		reg_addrH,1
                                 	ldi		reg_lettre,C_E
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*8-2
                                 	ldi		reg_addrH,1
                                 	ldi		reg_lettre,C_C
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*7-2
                                 	ldi		reg_addrH,1
                                 	ldi		reg_lettre,C_T
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*6-2
                                 	ldi		reg_addrH,1
                                 	ldi		reg_lettre,C_E
                                 	rcall	addImgChar
                                 .endmacro
                                 
                                 .macro MENTION_MA[]			;affichage des mentions
                                 	rcall CLR_RAM
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*16+4
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_J
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*15+4
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_E
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*14+4
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_A
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*13+4
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_N
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*12+4
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_PT
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*11+4
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_S
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*6
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_A
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*5
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_L
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*4
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_E
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*3
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_X
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*2
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_A
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_N
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,0
                                 	ldi		reg_addrH,3
                                 	ldi		reg_lettre,C_D
                                 	rcall	addImgChar
                                 	
                                 	ldi		reg_addrL,CHAR_SIZE*10-2
                                 	ldi		reg_addrH,1
                                 	ldi		reg_lettre,C_R
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*9-2
                                 	ldi		reg_addrH,1
                                 	ldi		reg_lettre,C_E
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*8-2
                                 	ldi		reg_addrH,1
                                 	ldi		reg_lettre,C_PT
                                 	rcall	addImgChar
                                 
                                 	ldi		reg_addrL,CHAR_SIZE*7-2
                                 	ldi		reg_addrH,1
                                 	ldi		reg_lettre,C_T
                                 	rcall	addImgChar
                                 .endmacro
                                 
                                 .macro cursor[]
                                 	ldi		reg_addrL,CHAR_SIZE*40				;cursor
                                 	add		reg_addrL,reg_init					;chargement de la position
                                 	ldi		reg_addrH,2
                                 	cp		reg_addrL,reg_init					;test de carry
                                 	brsh	testMain
                                 	inc		reg_addrH
                                 testMain:
                                 	ldi		reg_lettre,C_CH						;chargement de la lettre ">"
                                 	rcall	addImgChar							;stockage de la lettre dans la mémoire
                                 .endmacro
                                 
                                 	;sei
                                 
00019f e800                      	ldi		reg_init,128
0001a0 e860                      	ldi		reg_cpt2,128
                                 
                                 loop_Aff:
0001a1 df98                      	rcall CLR_RAM
0001a2 ef30
0001a3 0f30
0001a4 e042
0001a5 1730
0001a6 f408
0001a7 9543
0001a8 ef85
0001a9 df1e                      	cursor[]
0001aa cfab                      	rjmp	Fenetre_Debut							;affichage des caractères de la page principale
                                 FEN_lab:
0001ab e030                      	ldi		reg_addrL,0x00
0001ac e740                      	ldi		reg_addrH,0x70
0001ad df37                      	rcall	writeFullSreen					;affichage de l'écran
                                 
                                 loopMain:
0001ae 2f60                      	mov		reg_cpt2,reg_init				;récupération de la position du curseur
0001af 9bcc                      	bHa[]									;test du bouton "vers le haut"
0001b0 c007                      	rjmp	UP
0001b1 9bca                      	bBa[]									;test du bouton "vers le bas"
0001b2 c00c                      	rjmp	DOWN
                                 END:
0001b3 1760                      	cp		reg_cpt2,reg_init
0001b4 f761                      	brne	loop_Aff
                                 
0001b5 9bce                      	bA[]									;test du bouton validation
0001b6 c00f                      	rjmp	CHOIX
                                 END_CHOIX:
0001b7 cff6                      	rjmp	loopMain							;boucle infini
                                 
                                 UP:
0001b8 3800                      	cpi		reg_init,128						;test si on est tout en haut
0001b9 f3c9                      	breq	END
0001ba 3400                      	cpi		reg_init,64							;test si on est au milieu
0001bb e800                      	ldi		reg_init,128
0001bc f3b1                      	breq	END
0001bd e400                      	ldi		reg_init,64
0001be cff4                      	rjmp	END
                                 
                                 DOWN:
0001bf 3000                      	cpi		reg_init,0							;idem
0001c0 f391                      	breq	END
0001c1 3400                      	cpi		reg_init,64
0001c2 e000                      	ldi		reg_init,0
0001c3 f379                      	breq	END
0001c4 e400                      	ldi		reg_init,64
0001c5 cfed                      	rjmp	END
                                 
                                 CHOIX:
0001c6 3800                      	cpi		reg_init,128						;test du curseur pour éguiller la fonction
0001c7 f019                      	breq	GAME
0001c8 3400                      	cpi		reg_init,64
0001c9 f049                      	breq	RESEAU
0001ca c081                      	rjmp	MENTION
                                 
                                 GAME:
0001cb e030                      	ldi		reg_addrL,0
0001cc e040                      	ldi		reg_addrH,0
                                 
0001cd df17                      	rcall	writeFullSreen
                                 
0001ce 9bcd                      	bB[]
0001cf e800                      	ldi		reg_init,128
0001d0 9bcd                      	bB[]
0001d1 cfcf                      	rjmp	loop_Aff
0001d2 cff8                      	rjmp	GAME
                                 
                                 RESEAU:
0001d3 df66                      	rcall	CLR_RAM
                                 
0001d4 e234                      	ldi		reg_addrL,CHAR_SIZE*6
0001d5 e043                      	ldi		reg_addrH,3
0001d6 ee81                      	ldi		reg_lettre,C_MUL
0001d7 def0                      	rcall	addImgChar
                                 
0001d8 e030                      	ldi		reg_addrL,0x00
0001d9 e740                      	ldi		reg_addrH,0x70
0001da df0a                      	rcall	writeFullSreen
                                 
0001db e4d1                      	ldi		reg_TX,65								;ping en UART
0001dc de76                      	rcall	USART_Transmit
                                 
0001dd e13e                      	ldi		reg_addrL,CHAR_SIZE*5
0001de e043                      	ldi		reg_addrH,3
0001df ee81                      	ldi		reg_lettre,C_MUL
0001e0 dee7                      	rcall	addImgChar
                                 
0001e1 e030                      	ldi		reg_addrL,0x00
0001e2 e740                      	ldi		reg_addrH,0x70
0001e3 df01                      	rcall	writeFullSreen
                                 
0001e4 ef7f                      	ldi		reg_cpt3,255
0001e5 d0b3                      	rcall	tempo_MS
                                 
0001e6 e138                      	ldi		reg_addrL,CHAR_SIZE*4
0001e7 e043                      	ldi		reg_addrH,3
0001e8 ee81                      	ldi		reg_lettre,C_MUL
0001e9 dede                      	rcall	addImgChar
                                 
0001ea e030                      	ldi		reg_addrL,0x00
0001eb e740                      	ldi		reg_addrH,0x70
0001ec def8                      	rcall	writeFullSreen
                                 
                                 loopReseau1:
                                 
0001ed fd01                      	sbrc	reg_init,1
0001ee c055                      	rjmp	loopReseau2
                                 
0001ef 34b1                      	cpi		reg_RX,65								;résultat du ping
0001f0 f189                      	breq	loopReseau3
0001f1 e234
0001f2 e043
0001f3 e481
0001f4 ded3
0001f5 e13e
0001f6 e043
0001f7 e486
0001f8 decf
0001f9 e138
0001fa e043
0001fb e481
0001fc decb
0001fd e132
0001fe e043
0001ff eb8e
000200 dec7
000201 e03c
000202 e043
000203 e08a
000204 dec3
000205 e036
000206 e043
000207 e486
000208 debf
000209 e030
00020a e043
00020b e481
00020c debb
00020d e33a
00020e e041
00020f e481
000210 deb7
000211 e334
000212 e041
000213 e184
000214 deb3
000215 e23e
000216 e041
000217 e08a
000218 deaf
000219 e238
00021a e041
00021b e58f
00021c deab
00021d e232
00021e e041
00021f e184
000220 dea7                      	NO_CONNECTED[]
                                 
000221 c022                      	rjmp	loopReseau2
                                 
                                 loopReseau3:
                                 
000222 e002                      	ldi		reg_init,2
000223 df16
000224 e234
000225 e043
000226 e08a
000227 dea0
000228 e13e
000229 e043
00022a e486
00022b de9c
00022c e138
00022d e043
00022e e481
00022f de98
000230 e132
000231 e043
000232 e481
000233 de94
000234 e03c
000235 e043
000236 e184
000237 de90
000238 e036
000239 e043
00023a e08a
00023b de8c
00023c e030
00023d e043
00023e e58f
00023f de88
000240 e33a
000241 e041
000242 e184
000243 de84                      	CONNECTED[]
                                 
                                 
                                 loopReseau2:
000244 e030                      	ldi		reg_addrL,0x00
000245 e740                      	ldi		reg_addrH,0x70
000246 de9e                      	rcall	writeFullSreen
000247 9bcd                      	bB[]
000248 e800                      	ldi		reg_init,128
000249 9bcd                      	bB[]
00024a cf56                      	rjmp	loop_Aff
00024b cfa1                      	rjmp	loopReseau1
                                 	
                                 
                                 MENTION:
00024c deed
00024d e634
00024e e043
00024f e28d
000250 de77
000251 e53e
000252 e043
000253 e184
000254 de73
000255 e538
000256 e043
000257 e080
000258 de6f
000259 e532
00025a e043
00025b e481
00025c de6b
00025d e43c
00025e e043
00025f eb8e
000260 de67
000261 e436
000262 e043
000263 e58a
000264 de63
000265 e234
000266 e043
000267 e080
000268 de5f
000269 e13e
00026a e043
00026b e387
00026c de5b
00026d e138
00026e e043
00026f e184
000270 de57
000271 e132
000272 e043
000273 e783
000274 de53
000275 e03c
000276 e043
000277 e080
000278 de4f
000279 e036
00027a e043
00027b e481
00027c de4b
00027d e030
00027e e043
00027f e08f
000280 de47
000281 e33a
000282 e041
000283 e585
000284 de43
000285 e334
000286 e041
000287 e184
000288 de3f
000289 e23e
00028a e041
00028b eb8e
00028c de3b
00028d e238
00028e e041
00028f e58f
000290 de37                      	MENTION_MA[]									;affichage des mentions
000291 e030                      	ldi		reg_addrL,0x00
000292 e740                      	ldi		reg_addrH,0x70
000293 de51                      	rcall	writeFullSreen
                                 MENTION1:
000294 9bcd                      	bB[]
000295 e860                      	ldi		reg_cpt2,128
000296 9bcd                      	bB[]
000297 cf09                      	rjmp	loop_Aff
000298 cffb                      	rjmp	MENTION1
                                 
                                 ; sous programme de temporisation
                                 tempo_MS:
000299 ef2f                      	ldi	reg_screen, 255
                                 boucletempo:
00029a 0000                      	nop
00029b 952a                      	dec	reg_screen
00029c f7e9                      	brne boucletempo
00029d 957a                      	dec	reg_cpt3
00029e f7d1                      	brne tempo_MS
00029f 9508                      	ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16A" register use summary:
x  :   0 y  :   0 z  :   0 r0 :   0 r1 :   4 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  35 r17:   0 r18:  46 r19:  79 r20:  75 
r21:  18 r22:  15 r23:  17 r24:  63 r25:  30 r26:   0 r27:   2 r28:   6 
r29:  12 r30:   0 r31:   4 
Registers used: 14 out of 35 (40.0%)

"ATmega16A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   2 adiw  :   0 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   7 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   9 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  21 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   3 cpc   :   0 
cpi   :  11 cpse  :   0 dec   :   3 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   9 inc   :  22 jmp   :   2 
ld    :   0 ldd   :   0 ldi   : 261 lds   :   0 lpm   :   0 lsl   :   0 
lsr   :   7 mov   :  12 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   7 or    :   0 ori   :   6 out   :  39 pop   :   0 
push  :   0 rcall : 106 ret   :  11 reti  :   4 rjmp  :  34 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  24 sbic  :   2 sbis  :  12 
sbiw  :   0 sbr   :   0 sbrc  :   7 sbrs  :   6 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 27 out of 113 (23.9%)

"ATmega16A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000540   1262      0   1262   16384   7.7%
[.dseg] 0x000060 0x000060      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
