
AVRASM ver. 2.2.7  D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm Sun Jan 19 16:33:56 2020

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16adef.inc'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(17): warning: Register r29 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(26): warning: Register r17 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(32): warning: Register r30 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(35): warning: Register r28 already defined by the .DEF directive
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(93): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\io.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(95): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\uart.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(97): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\adc.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(99): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\timer.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(101): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\spi.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(103): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\screen.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(105): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\char_array.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(107): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\csgo.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16adef.inc'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(93): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\io.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(95): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\uart.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(97): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\adc.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(99): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\timer.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(101): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\spi.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(103): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\screen.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(105): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\char_array.asm'
D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\main.asm(107): Including file 'D:\école\GE4\bn1\Bas-Niveau\Code\projet_bn1\projet_bn1\csgo.asm'
                                 
                                 ;********************************
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16A.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m16Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega16A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega16A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M16ADEF_INC_
                                 #define _M16ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega16A
                                 #pragma AVRPART ADMIN PART_NAME ATmega16A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x94
                                 .equ	SIGNATURE_002	= 0x03
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SE	= 6	; Sleep Enable
                                 .equ	SM2	= 7	; Sleep Mode Select
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special function I/O register
                                 ;.equ	PSR10	= 0	; Prescaler reset
                                 .equ	PSR2	= 1	; Prescaler reset
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 16384
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1c00
                                 .equ	NRWW_STOP_ADDR	= 0x1fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1bff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x1f80
                                 .equ	SECONDBOOTSTART	= 0x1f00
                                 .equ	THIRDBOOTSTART	= 0x1e00
                                 .equ	FOURTHBOOTSTART	= 0x1c00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M16ADEF_INC_ */
                                 
                                 
                                 ; Programme du jeu entre 2 Gameboy connectées en bluetooth (électif bas niveau) [fichier principale]
                                 ;
                                 ; Fichier : main.asm
                                 ;
                                 ; Microcontrôleur Atmega16A
                                 ;
                                 ; Version atmel studio : 7.0.2397
                                 ; Created: 25/10/2019 13:42:48
                                 ;
                                 ; Author : jsoudier01 & atessier01
                                 ; INSA Strasbourg
                                 ;********************************
                                 
                                 .def tri = r2							;timerInterruptRegister.
                                 
                                 .def reg_init = r29						;registre d'initialisation de tous les paramètres et temporaires
                                 
                                 .def reg_spi = r24						;registre d'envoi et réception en spi & tempo MS
                                 .def reg_addrL = r19					;registres de sélection d'adresse dans la mémoire SPI (LOW)
                                 .def reg_addrH = r20					;registres de sélection d'adresse dans la mémoire SPI (HIGH)
                                 
                                 .def reg_cpt1 = r21						;registre temporaire de comptage pour l'affichage sur l'écran
                                 .def reg_cpt2 = r22						;idem
                                 .def reg_cpt3 = r17						;registre de comptage tempo
                                 .def reg_screen = r17					;registre d'affichage sur l'écran
                                 
                                 .def reg_cptT0 = r23					;prescaler du timer0 pour ralentir le clignotement
                                 
                                 .def reg_vol = r25						;registre de son et de volume
                                 
                                 .def reg_TX = r30						;registre d'envoi en bluetooth
                                 .def reg_RX = r18						;registre de réception en bluetooth
                                 
                                 .def reg_calcul1 = r28					;registre de calcul temporaire
                                 
                                 .dseg
000060                           	num_son:		.byte 1				;variable SRAM du son (LOW)
000061                           	num_son2:		.byte 1				;idem (HIGH)
000062                           	C_Wait:			.byte 5				;variable avec le caractère de chargement pour les images
000067                           	Table:			.byte 8				;table de conversion
00006f                           	conv:			.byte 1				;varaible de conversion de la position du personnage X
000070                           	convB:			.byte 1				;idem Y
000071                           	conv2:			.byte 1				;idem afficher ou non
000072                           	dead:			.byte 1				;variable de test si le personnage est en vie
000073                           	pos_rand:		.byte 1				;position de départ du personnage (case 0 à 181)
000074                           	pos_x:			.byte 1				;position en x du joueur
000075                           	pos_y:			.byte 1				;position en y du joueur
000076                           	numero_mapL:	.byte 1				;adresse de la case actuelle dans la mémoire
000077                           	numero_mapH:	.byte 1
000078                           	pos_x_adv:		.byte 1				;position en x de l'adversaire
000079                           	pos_y_adv:		.byte 1				;position en y de l'adversaire
00007a                           	orientation:	.byte 1				;orientation du personnage
00007b                           	adv_ok:			.byte 1				;si l'adversaire est juste devant nous
                                 
                                 .cseg  ; codesegment
                                 .org	0x00
000000 c02f                         rjmp	RESET							;vecteur de reset
                                 .org 0x0C								; 7:  $00C TIMER1 COMPA Timer/Counter1 Cmp Match A 
00000c 9518                      	reti
                                 .org 0x0A								; 6:  $00A TIMER1 CAPT Timer/Counter1 Capture Event
00000a 9518                      	reti
                                 .org 0x10								; 9:  $010 TIMER1 OVF Timer/Counter1 Overflow
000010 940c 0082                 	jmp		TI1_Interrupt
                                 .org 0x12								; 10: $012 TIMER0 OVF Timer/Counter0 Overflow
000012 940c 00af                 	jmp		TI0_interrupt
                                 .org 0x16								; 12: $016 USART, RXC USART, Rx Complete
000016 940c 004e                 	jmp		UART_Interrupt
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : RESET
                                 ;
                                 ; Description : fonction de lancement du programme et d'initialisation de tous les autres fichiers
                                 ;
                                 ; Entrées : - r16 variable temporaire
                                 ;		    - r17 (reg_cpt3) varaible d'attente
                                 ;		    - r29 (reg_init) pointeur à l'écran
                                 ;
                                 ; Sorties : appel des fonctions "Init_char_array" [char_array.asm], "ADC_Init" [adc.asm], "IO_Init" [io.asm], "SCREEN_Init" [screen.asm], "SPI_Init" [spi.asm],
                                 ;			"TIMER_Init" [timer.asm], "USART_Init" [uart.asm] et "csgo_init" [csgo.asm]
                                 ;--------------------------------
                                 .org 0x30								; se placer à la case mémoire 30 en hexa
                                 RESET:									; adresse du vecteur de reset
000030 e004                      	ldi		r16,high(RAMEND)			; initialisation de la pile
000031 bf0e                      	out		SPH,r16
000032 e50f                      	ldi		r16,low(RAMEND)
000033 bf0d                      	out		SPL,r16
                                 
000034 ef1f                      	ldi		reg_cpt3,255				;tempo de début
000035 d0a7                      	rcall	tempo_US
                                 
                                 	;ajout des programmes pour la gestion des modules
                                 	.include "io.asm"
                                 
                                 ; Programme du jeu entre 2 Gameboy connectées en bluetooth (électif bas niveau) [fichier de gestion des entrées/sorties]
                                 ;
                                 ; Fichier : io.asm
                                 ;
                                 ; Microcontrôleur Atmega16A
                                 ;
                                 ; Version atmel studio : 7.0.2397
                                 ; Created: 25/10/2019 13:42:48
                                 ;
                                 ; Author : jsoudier01 & atessier01
                                 ; INSA Strasbourg
                                 ;********************************
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : IO_Init
                                 ;
                                 ; Description : initialise les entrées et sorties
                                 ;
                                 ; Entrée : - r29 (reg_init) variable temporaire
                                 ;
                                 ; Sorties : X
                                 ;--------------------------------
                                 IO_Init:
000036 e0d0                      	ldi		reg_init,0x00			;porta en entrée
000037 bbda                      	out		DDRA,reg_init
000038 ebdf                      	ldi		reg_init,0xBF			;portb en entrée sur miso
000039 bbd7                      	out		DDRB,reg_init
00003a efdf                      	ldi		reg_init,0xFF			;portc en sortie
00003b bbd4                      	out		DDRC,reg_init
00003c eed2                      	ldi		reg_init,0xE2			;portd en sortie sur TX, BUZZER et LED
00003d bbd1                      	out		DDRD,reg_init
00003e c000                      	rjmp	IO_INC
                                 IO_INC:
                                 	.include "uart.asm"
                                 
                                 ; Programme du jeu entre 2 Gameboy connectées en bluetooth (électif bas niveau) [fichier de gestion de l'uart (bluetooth)]
                                 ;
                                 ; Fichier : uart.asm
                                 ;
                                 ; Microcontrôleur Atmega16A
                                 ;
                                 ; Version atmel studio : 7.0.2397
                                 ; Created: 25/10/2019 13:42:48
                                 ;
                                 ; Author : jsoudier01 & atessier01
                                 ; INSA Strasbourg
                                 ;********************************
                                 
                                 .equ baud = 51								;9600 =>103
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : UART_X[]
                                 ;
                                 ; Description : récupère la position X du personnage ennemi en bluetooth
                                 ;
                                 ; Entrée : - r18 (reg_RX) registre de réception en UART
                                 ;
                                 ; Sorties : - r11 variable de position X ennemi
                                 ;--------------------------------
                                 .macro UART_X[]
                                 	andi	reg_RX,0x3F						;reception de la position X en interruption (SRAM inacessible en interruption pour éviter de les désactiver)
                                 	mov		r11,reg_RX
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : UART_Y[]
                                 ;
                                 ; Description : récupère la position Y du personnage ennemi en bluetooth
                                 ;
                                 ; Entrée : - r18 (reg_RX) registre de réception en UART
                                 ;
                                 ; Sorties : - r10 variable de position Y ennemi
                                 ;--------------------------------
                                 .macro UART_Y[]
                                 	andi	reg_RX,0x3F						;masque de réception
                                 	mov		r10,reg_RX
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : PosPerso[]
                                 ;
                                 ; Description : stock les données de position du personnage ennemi dans la SRAM en dehors des interruptions
                                 ;
                                 ; Entrée : - r10 variable de position Y ennemi
                                 ;		   - r11 variable de position X ennemi
                                 ;
                                 ; Sorties : - pos_x_adv (SRAM) position du personnage ennemi en X
                                 ;			- pos_y_adv (SRAM) position du personnage ennemi en Y
                                 ;--------------------------------
                                 .macro PosPerso[]
                                 	sts		pos_x_adv,r11
                                 	sts		pos_y_adv,r10
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : USART_Init
                                 ;
                                 ; Description : initialisation de l'UART
                                 ;
                                 ; Entrée : - r30 (reg_TX) variable temporaire
                                 ;
                                 ; Sorties : X
                                 ;--------------------------------
                                 USART_Init:									; Set baud rate to UBRR0 
00003f e3e3                      	ldi		reg_TX,baud
000040 b9e9                      	out		UBRRL, reg_TX					; Enable receiver and transmitter  
000041 e0e0                      	ldi		reg_TX,0 
000042 bde0                      	out		UBRRH, reg_TX    
000043 e0e0                      	ldi		reg_TX,0
000044 b9eb                      	out		UCSRA,reg_TX
000045 e9e8                      	ldi		reg_TX,(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)   
000046 b9ea                      	out		UCSRB,reg_TX					; Set frame format: 8data, 2stop bit   
000047 e8ee                      	ldi		reg_TX,(1<<URSEL)|(1<<USBS)|(3<<UCSZ0)   
000048 bde0                      	out		UCSRC,reg_TX  
000049 c014                      	rjmp	UART_INC						;go to main
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : USART_Transmit
                                 ;
                                 ; Description : transmet une donnée en UART
                                 ;
                                 ; Entrée : - r30 (reg_TX) registre de la donnée à envoyer /!\ posX : ori reg_TX,0x80 / posY : ori reg_TX,0x40 / meutre : ldi reg_TX,0 / ping : ldi reg_TX,1
                                 ;
                                 ; Sorties : X
                                 ;--------------------------------
                                 USART_Transmit:								; Wait for empty transmit buffer
00004a 9b5d                      	sbis	UCSRA,UDRE 
00004b cffe                      	rjmp	USART_Transmit					; Put data into buffer, sends the data   
00004c b9ec                      	out		UDR,reg_TX   
00004d 9508                      	ret 
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : UART_Interrupt
                                 ;
                                 ; Description : fonction d'interruption en UART
                                 ;
                                 ; Entrée : - r2 (tri) registre de sauvegarde du contexte
                                 ;		   - r18 (reg_RX) registre de réception en UART
                                 ;
                                 ; Sorties : - dead (SRAM) état du personnage
                                 ;			- appel des macros "UART_X[]" et "UART_Y[]" [uart.asm]
                                 ;--------------------------------
                                 UART_Interrupt:
00004e b62f                      	in		tri,SREG						; save content of flag reg.
00004f b12c                      	in		reg_RX,UDR
000050 3020                      	cpi		reg_RX,0						;test si on recoit un coup
000051 f419                      	brne	DEATH_POS
000052 9320 0072                 	sts		dead,reg_RX						;mise à jour de l'état du personnage
000054 c007                      	rjmp	END_UART
                                 DEATH_POS:
000055 3820                      	cpi		reg_RX,0x80						;gestion de la position
000056 f018                      	brlo	POSITON_PERSO_Y
000057 732f
000058 2eb2                      	UART_X[]
000059 c002                      	rjmp	END_UART
                                 POSITON_PERSO_Y:
00005a 732f
00005b 2ea2                      	UART_Y[]
                                 END_UART:
00005c be2f                      	out		SREG,tri						; restore flag register
00005d 9518                      UART_INC:
                                 	.include "adc.asm"
                                 
                                 ; Programme du jeu entre 2 Gameboy connectées en bluetooth (électif bas niveau) [fichier de gestion de l'ADC]
                                 ;
                                 ; Fichier : adc.asm
                                 ;
                                 ; Microcontrôleur Atmega16A
                                 ;
                                 ; Version atmel studio : 7.0.2397
                                 ; Created: 25/10/2019 13:42:48
                                 ;
                                 ; Author : jsoudier01 & atessier01
                                 ; INSA Strasbourg
                                 ;********************************
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : ADC_Init
                                 ;
                                 ; Description : intialise l'ADC
                                 ;
                                 ; Entrée : - r29 (reg_init) variable temporaire
                                 ;
                                 ; Sorties : démarre une conversion
                                 ;--------------------------------
                                 ADC_Init:
00005e e6d0                      	ldi		reg_init,(1<<ADLAR)|(1<<REFS0)							;ext ref / left adjust / mux to ADC0
00005f b9d7                      	out		ADMUX,reg_init
000060 ecd6                      	ldi		reg_init,(1<<ADEN)|(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1)		;adc enable / adc start / no auto trig / no interrupt / div 64
000061 b9d6                      	out		ADCSRA,reg_init
000062 c000                      	rjmp	ADC_INC
                                 ADC_INC:
                                 	.include "timer.asm"
                                 
                                 ; Programme du jeu entre 2 Gameboy connectées en bluetooth (électif bas niveau) [fichier de gestion des timers (son et position du personnage]
                                 ;
                                 ; Fichier : timer.asm
                                 ;
                                 ; Microcontrôleur Atmega16A
                                 ;
                                 ; Version atmel studio : 7.0.2397
                                 ; Created: 25/10/2019 13:42:48
                                 ;
                                 ; Author : jsoudier01 & atessier01
                                 ; INSA Strasbourg
                                 ;********************************
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bGa[]
                                 ;
                                 ; Description : test si le bouton Gauche est appuyé
                                 ;--------------------------------
                                 .macro bGa[]				;macro de bouton
                                 	sbis	PINA,1
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bGan[]
                                 ;
                                 ; Description : test si le bouton Gauche n'est pas appuyé
                                 ;--------------------------------
                                 .macro bGan[]
                                 	sbic	PINA,1
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bBa[]
                                 ;
                                 ; Description : test si le bouton bas est appuyé
                                 ;--------------------------------
                                 .macro bBa[]
                                 	sbis	PINA,2
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bBan[]
                                 ;
                                 ; Description : test si le bouton Bas n'est pas appuyé
                                 ;--------------------------------
                                 .macro bBan[]
                                 	sbic	PINA,2
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bDr[]
                                 ;
                                 ; Description : test si le bouton Droit est appuyé
                                 ;--------------------------------
                                 .macro bDr[]
                                 	sbis	PINA,3
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bDrn[]
                                 ;
                                 ; Description : test si le bouton Droit n'est pas appuyé
                                 ;--------------------------------
                                 .macro bDrn[]
                                 	sbic	PINA,3
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bHa[]
                                 ;
                                 ; Description : test si le bouton Haut est appuyé
                                 ;--------------------------------
                                 .macro bHa[]
                                 	sbis	PINA,4
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bHan[]
                                 ;
                                 ; Description : test si le bouton Haut n'est pas appuyé
                                 ;--------------------------------
                                 .macro bHan[]
                                 	sbic	PINA,4
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bB[]
                                 ;
                                 ; Description : test si le bouton B est appuyé
                                 ;--------------------------------
                                 .macro bB[]
                                 	sbis	PINA,5
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bBn[]
                                 ;
                                 ; Description : test si le bouton B n'est pas appuyé
                                 ;--------------------------------
                                 .macro bBn[]
                                 	sbic	PINA,5
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bA[]
                                 ;
                                 ; Description : test si le bouton A est appuyé
                                 ;--------------------------------
                                 .macro bA[]
                                 	sbis	PINA,6
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bAn[]
                                 ;
                                 ; Description : test si le bouton A n'est pas appuyé
                                 ;--------------------------------
                                 .macro bAn[]
                                 	sbic	PINA,6
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bSel[]
                                 ;
                                 ; Description : test si le bouton Select est appuyé
                                 ;--------------------------------
                                 .macro bSel[]
                                 	sbis	PINA,7
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bSeln[]
                                 ;
                                 ; Description : test si le bouton Select n'est pas appuyé
                                 ;--------------------------------
                                 .macro bSeln[]
                                 	sbic	PINA,7
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bSta[]
                                 ;
                                 ; Description : test si le bouton Start est appuyé
                                 ;--------------------------------
                                 .macro bSta[]
                                 	sbis	PIND,2
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bStan[]
                                 ;
                                 ; Description : test si le bouton Start n'est pas appuyé
                                 ;--------------------------------
                                 .macro bStan[]
                                 	sbic	PIND,2
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bL[]
                                 ;
                                 ; Description : test si le bouton Gauche (gachette) est appuyé
                                 ;--------------------------------
                                 .macro bL[]
                                 	sbis	PIND,3
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bLn[]
                                 ;
                                 ; Description : test si le bouton Gauche (gachette) n'est pas appuyé
                                 ;--------------------------------
                                 .macro bLn[]
                                 	sbic	PIND,3
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bR[]
                                 ;
                                 ; Description : test si le bouton Droit (gachette) est appuyé
                                 ;--------------------------------
                                 .macro bR[]
                                 	sbis	PIND,4
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : bRn[]
                                 ;
                                 ; Description : test si le bouton Droit (gachette) n'est pas appuyé
                                 ;--------------------------------
                                 .macro bRn[]
                                 	sbic	PIND,4
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : TIMER_Init
                                 ;
                                 ; Description : initialisation du timer 0 et du timer 1
                                 ;
                                 ; Entrée : - r25 (reg_vol) registre de gestion du volume et de la fréquence du buzzer
                                 ;		   - r23 (reg_cptT0) registre de comptage pour ralentir le timer 0
                                 ;
                                 ; Sorties : - num_son (SRAM) adresse mémoire EEPROM atmega du son à lire (LOW)
                                 ;			- num_son2 (SRAM) adresse mémoire EEPROM atmega du son à lire (HIGH) [0 première piste, 1 deuxième piste, 2 à 255 pas de son]
                                 ;--------------------------------
                                 TIMER_Init:
000063 e095                      	ldi		reg_vol,(1<<CS02)|(1<<CS00)				;timer0 pour le clignotement de la position du personage (normal mode)
000064 bf93                      	out		TCCR0,reg_vol							;prescaler max de 1024
000065 b799                      	in		reg_vol,TIMSK
000066 6091                      	ori		reg_vol,(1<<TOIE0)						;en interruption
000067 bf99                      	out		TIMSK,reg_vol
000068 e070                      	ldi		reg_cptT0,0
                                 
000069 e892                      	ldi		reg_vol,(1<<WGM11)|(1<<COM1A1)			;timer1 pour le son et le réglage du volume (fast PWM mode)
00006a bd9f                      	out		TCCR1A,reg_vol
00006b e19a                      	ldi		reg_vol,(1<<WGM13)|(1<<WGM12)|(1<<CS11)	;prescaler par 8 soit 8MHz/(8*2*ICR1)
00006c bd9e                      	out		TCCR1B,reg_vol
00006d b798                      	in		reg_vol,TIFR							;clear flag
00006e 7f9b                      	andi	reg_vol,0xFB
00006f bf98                      	out		TIFR,reg_vol
000070 b799                      	in		reg_vol,TIMSK							;interrupt enable
000071 6394                      	ori		reg_vol,(1<<TICIE1)|(1<<TOIE1)|(1<<OCIE1A)
000072 bf99                      	out		TIMSK,reg_vol
                                 
000073 e090                      	ldi		reg_vol,0								;réglage du volume au départ
000074 bd9b                      	out		OCR1AH,reg_vol
000075 e091                      	ldi		reg_vol,1
000076 bd9a                      	out		OCR1AL,reg_vol
                                 
000077 e694                      	ldi		reg_vol,100								;réglage de la fréquence de départ
000078 bd97                      	out		ICR1H,reg_vol
000079 ef9f                      	ldi		reg_vol,255
00007a bd96                      	out		ICR1L,reg_vol
                                 
00007b e090                      	ldi		reg_vol,0								;réglage du pointage dans l'eeprom de l'atmega qui contient le son
00007c 9390 0060                 	sts		num_son,reg_vol
00007e e092                      	ldi		reg_vol,2
00007f 9390 0061                 	sts		num_son2,reg_vol
                                 	
                                 
000081 c039                      	rjmp	TIMER_INC
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : TI1_Interrupt
                                 ;
                                 ; Description : fonction d'interruption du timer 1 pour la gestion du son en fréquence et rapport cyclique (volume)
                                 ;
                                 ; Entrée : - r25 (reg_vol) registre de gestion du volume et de la fréquence du buzzer
                                 ;		   - r2 (tri) registre de sauvegarde du contexte
                                 ;
                                 ; Sorties : appel la fonction "No_sound" [timer.asm]
                                 ;--------------------------------
                                 TI1_Interrupt:
000082 b62f                      	in		tri,SREG								;save content of flag reg.
                                 
000083 9190 0061                 	lds		reg_vol,num_son2						;chargement de l'adresse du son à jouer
000085 3092                      	cpi		reg_vol,2
000086 f508                      	brsh	No_sound
                                 
                                 conv_son:
000087 99e1                      	sbic	EECR,EEWE								;test de d'écriture dans l'eeprom
000088 cffe                      	rjmp	conv_son
                                 
000089 bb9f                      	out		EEARH,reg_vol							;recherche de l'adresse à lire depuis la SRAM
00008a 9190 0060                 	lds		reg_vol,num_son
00008c bb9e                      	out		EEARL,reg_vol
00008d 5f9f                      	subi	reg_vol,-0x01							;note suivante
00008e 9390 0060                 	sts		num_son,reg_vol
                                 	
000090 9ae0                      	sbi		EECR,EERE								;test de fin de lecture
000091 b39d                      	in		reg_vol,EEDR							;lecture
000092 bd97                      	out		ICR1H,reg_vol							;set freq
000093 3f9f                      	cpi		reg_vol,255
000094 f419                      	brne	pas_fin_son
000095 e092                      	ldi		reg_vol,2
000096 9390 0061                 	sts		num_son2,reg_vol
                                 pas_fin_son:
                                 
                                 	;gestion du volume
000098 e090                      	ldi		reg_vol,0
000099 bd9b                      	out		OCR1AH,reg_vol
00009a b195                      	in		reg_vol,ADCH							;on lit la valeur de l'adc converti
00009b bd9a                      	out		OCR1AL,reg_vol
                                 
00009c b196                      	in		reg_vol,ADCSRA
00009d 6490                      	ori		reg_vol,(1<<ADSC)						;relance d'une conversion
00009e b996                      	out		ADCSRA,reg_vol
00009f e090                      	ldi		reg_vol,0
0000a0 bd9d                      	out		TCNT1H,reg_vol							;affectation du volume
0000a1 bd9c                      	out		TCNT1L,reg_vol
                                 
                                 	;gestion de la led
0000a2 9986                      	sbic	PIND,6									;blink led
0000a3 9896                      	cbi		PORTD,6
0000a4 9b86                      	sbis	PIND,6
0000a5 9a96                      	sbi		PORTD,6
                                 
0000a6 be2f                      	out		SREG,tri								;restore flag register
0000a7 9518                      	reti 											;return from interrupt
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : No_sound
                                 ;
                                 ; Description : fonction pour iniber le son
                                 ;
                                 ; Entrée : - r25 (reg_vol) registre de gestion du volume et de la fréquence du buzzer
                                 ;		   - r2 (tri) registre de sauvegarde du contexte
                                 ;
                                 ; Sorties : X
                                 ;--------------------------------
                                 No_sound:
0000a8 e090                      	ldi		reg_vol,0								;pas de son à jouer
0000a9 bd9a                      	out		OCR1AL,reg_vol
0000aa e090                      	ldi		reg_vol,0
0000ab bd9d                      	out		TCNT1H,reg_vol
0000ac bd9c                      	out		TCNT1L,reg_vol
0000ad be2f                      	out		SREG,tri								;restore flag register
0000ae 9518                      	reti
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : TI0_interrupt
                                 ;
                                 ; Description : fonction pour la fréquence de clignotement de la position du personnage
                                 ;
                                 ; Entrée : - r23 (reg_cptT0) registre de comptage pour ralentir le timer 0
                                 ;		   - r2 (tri) registre de sauvegarde du contexte
                                 ;
                                 ; Sorties : X
                                 ;--------------------------------
                                 TI0_interrupt:
0000af b62f                      	in		tri,SREG								;save content of flag reg.
0000b0 9573                      	inc		reg_cptT0								;variable de comptage pour diviser la fréquence
0000b1 3170                      	cpi		reg_cptT0,16
0000b2 f409                      	brne	END_T0
0000b3 e070                      	ldi		reg_cptT0,0
                                 END_T0:
0000b4 be2f                      	out		SREG,tri								;restore flag register
0000b5 9518                      	reti
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : rand
                                 ;
                                 ; Description : fonction pour avoir un nombre aléatoire pour placer le personnage sur la carte à partir du timer 0
                                 ;
                                 ; Entrée : - r12 variable temporaire
                                 ;
                                 ; Sorties : - pos_rand (SRAM) position du personnage aléatoire
                                 ;--------------------------------
                                 rand:
0000b6 b6c2                      	in		r12,TCNT0								;lecture de la valeur du timer
0000b7 94c6                      	lsr		r12										;ajustement de la valeur
0000b8 92c0 0073                 	sts		pos_rand,r12							;stockage de la position du personnage aléatoire
0000ba 9508                      TIMER_INC:
                                 	.include "spi.asm"
                                 
                                 ; Programme du jeu entre 2 Gameboy connectées en bluetooth (électif bas niveau) [fichier de gestion de la mémoire EEPROM en SPI]
                                 ;
                                 ; Fichier : spi.asm
                                 ;
                                 ; Microcontrôleur Atmega16A
                                 ;
                                 ; Version atmel studio : 7.0.2397
                                 ; Created: 25/10/2019 13:42:48
                                 ;
                                 ; Author : jsoudier01 & atessier01
                                 ; INSA Strasbourg
                                 ;********************************
                                 
                                 .equ WREN = 0x06									;definie des valeurs pour lire et écrire dans la mémoire SPI
                                 .equ WRDI = 0x04
                                 .equ READ = 0x03
                                 .equ WRITE = 0x02
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : WR_DI[]
                                 ;
                                 ; Description : on passe la mémoire SPI en mode lecture
                                 ;
                                 ; Entrée : - r24 (reg_spi) registre d'envoi et de réception en SPI
                                 ;
                                 ; Sorties : appel la fonction "SPI_Transmit" [spi.asm]
                                 ;--------------------------------
                                 .macro WR_DI[]										;macro pour mettre la mémoire SPI en lecture
                                 	cbi		PORTB,4									;clear CS
                                 	ldi		reg_spi,WRDI							;send ordre de lecture
                                 	rcall	SPI_Transmit							;envoi
                                 	sbi		PORTB,4									;set CS
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : SPI_Init
                                 ;
                                 ; Description : initialisation du SPI
                                 ;
                                 ; Entrée : - r24 (reg_spi) registre d'envoi et de réception en SPI
                                 ;
                                 ; Sorties : appel la macro "WR_DI[]" [spi.asm]
                                 ;--------------------------------
                                 SPI_Init:
0000bb e581                      	ldi		reg_spi,(1<<SPE)|(1<<MSTR)|(1<<SPR0)	; ON / MASTER / fosc/16
0000bc b98d                      	out		SPCR,reg_spi
0000bd 9ac4                      	sbi		PORTB,4									;set SS
0000be 98c4
0000bf e084
0000c0 d002
0000c1 9ac4                      	WR_DI[]
0000c2 c010                      	rjmp	SPI_INC
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : SPI_Transmit
                                 ;
                                 ; Description : envoi une donnée en SPI et réceptionne celle du périphérique esclave
                                 ;
                                 ; Entrée : - r24 (reg_spi) registre d'envoi et de réception en SPI
                                 ;
                                 ; Sorties : - r24 (reg_spi) réponse du périphérique
                                 ;--------------------------------
                                 SPI_Transmit:										;attente transmission
0000c3 b98f                      	out		SPDR,reg_spi							;envoi msg
                                 Wait_SPI:
0000c4 9b77                      	sbis	SPSR,SPIF								;test si fini
0000c5 cffe                      	rjmp	Wait_SPI
0000c6 b18f                      	in		reg_spi,SPDR							;lecture de la réponse
0000c7 9508                      	ret
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : Read_Mem
                                 ;
                                 ; Description : lit une donnée dans la mémoire SPI
                                 ;
                                 ; Entrée : - r24 (reg_spi) registre d'envoi et de réception en SPI
                                 ;		   - r19 (reg_addrL) variable de positionnement dans la mémoire SPI (LOW)
                                 ;		   - r20 (reg_addrH) variable de positionnement dans la mémoire SPI (HIGH)
                                 ;
                                 ; Sorties : - r24 (reg_spi) réponse de la mémoire
                                 ;--------------------------------
                                 Read_Mem:
0000c8 98c4                      	cbi		PORTB,4									;clear SS
0000c9 e083                      	ldi		reg_spi,READ							;instruction de lecture mémoire
0000ca dff8                      	rcall	SPI_Transmit
0000cb 2f84                      	mov		reg_spi,reg_addrH						;sélection de l'adresse H
0000cc dff6                      	rcall	SPI_Transmit
0000cd 2f83                      	mov		reg_spi,reg_addrL						;sélection de l'adresse L
0000ce dff4                      	rcall	SPI_Transmit
0000cf e080                      	ldi		reg_spi,0x00							;lecture de la réponse
0000d0 dff2                      	rcall	SPI_Transmit
0000d1 9ac4                      	sbi		PORTB,4									;set SS
0000d2 9508                      	ret
                                 SPI_INC:
                                 	.include "screen.asm"
                                 
                                 ; Programme du jeu entre 2 Gameboy connectées en bluetooth (électif bas niveau) [fichier de gestion de l'écran]
                                 ;
                                 ; Fichier : screen.asm
                                 ;
                                 ; Microcontrôleur Atmega16A
                                 ;
                                 ; Version atmel studio : 7.0.2397
                                 ; Created: 25/10/2019 13:42:48
                                 ;
                                 ; Author : jsoudier01 & atessier01
                                 ; INSA Strasbourg
                                 ;********************************
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : screenL[]
                                 ;
                                 ; Description : sélectionne le côté de l'écran gauche
                                 ;
                                 ; Entrée : X
                                 ;
                                 ; Sorties : X
                                 ;--------------------------------
                                 .macro screenL[]					;choix du côté de l'écran à gauche
                                 	sbi		PORTB,0
                                 	cbi		PORTB,1
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : screenR[]
                                 ;
                                 ; Description : sélectionne le côté de l'écran à droite
                                 ;
                                 ; Entrée : X
                                 ;
                                 ; Sorties : X
                                 ;--------------------------------
                                 .macro screenR[]					;choix du côté de l'écran à droite
                                 	sbi		PORTB,1
                                 	cbi		PORTB,0
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : Enable[]
                                 ;
                                 ; Description : valide la donnée sur le port de l'écran
                                 ;
                                 ; Entrée : - r17 (reg_cpt3) compteur de temporisation
                                 ;
                                 ; Sorties : appel la fonction "tempo_US" [screen.asm]
                                 ;--------------------------------
                                 .macro Enable[]						;validation de la commande sur l'écran
                                 	cbi		PORTB,3
                                 	ldi		reg_cpt3,250
                                 	rcall	tempo_US
                                 	sbi		PORTB,3
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : SetPosX[]
                                 ;
                                 ; Description : place le curseur sur l'écran en X
                                 ;
                                 ; Entrée : - r17 (reg_cpt3) compteur de temporisation
                                 ;		   - r17 (reg_screen) variable de l'écran => position de 0 à 7
                                 ;
                                 ; Sorties : appel les macros "RS_clear[]", "Enable[]" et "RS_set[]" [screen.asm]
                                 ;--------------------------------
                                 .macro SetPosX[]					;position de 0 à 7 (à changer à chaque fois)
                                 	RS_clear[]
                                 	ori		reg_screen,0xB8
                                 	out		PORTC,reg_screen
                                 	Enable[]
                                 	RS_set[]
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : SetPosY[]
                                 ;
                                 ; Description : place le curseur sur l'écran en Y
                                 ;
                                 ; Entrée : - r17 (reg_cpt3) compteur de temporisation
                                 ;		   - r17 (reg_screen) variable de l'écran => position de 0 à 64
                                 ;
                                 ; Sorties : appel les macros "RS_clear[]", "Enable[]" et "RS_set[]" [screen.asm]
                                 ;--------------------------------
                                 .macro SetPosY[]					;position de 0 à 64 (auto)
                                 	RS_clear[]
                                 	ori		reg_screen,0x40
                                 	out		PORTC,reg_screen
                                 	Enable[]
                                 	RS_set[]
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : RS_clear[]
                                 ;
                                 ; Description : active le mode instruction sur l'écran
                                 ;
                                 ; Entrée : X
                                 ;
                                 ; Sorties : X
                                 ;--------------------------------
                                 .macro RS_clear[]					;changement de bit instruction/données
                                 	cbi		PORTB,2
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : RS_set[]
                                 ;
                                 ; Description : active le mode données sur l'écran
                                 ;
                                 ; Entrée : X
                                 ;
                                 ; Sorties : X
                                 ;--------------------------------
                                 .macro RS_set[]						;changement de bit instruction/données
                                 	sbi		PORTB,2
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : ScreenWrite[]
                                 ;
                                 ; Description : écrit une donnée sur l'écran
                                 ;
                                 ; Entrée : - r17 (reg_screen) variable de l'écran
                                 ;
                                 ; Sorties : appel la macro "Enable[]" [screen.asm]
                                 ;--------------------------------
                                 .macro ScreenWrite[]				;affichage sur l'écran
                                 	out		PORTC,reg_screen
                                 	Enable[]
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : placePosPerso[]
                                 ;
                                 ; Description : converti la position du X/Y du personnage en adresse et pixels
                                 ;
                                 ; Entrée : - r17 (reg_screen) variable de l'écran
                                 ;		   - r28 (reg_calcul1) variable temporaire
                                 ;		   - Table (SRAM) table de conversion pour le binaire vers le pixel à allumer
                                 ;		   - PosX (SRAM) de 0 à 20
                                 ;		   - PosY (SRAM) de 0 à 20
                                 ;		   - XL (r26) registre interne pour se déplacer dans la SRAM
                                 ;		   - XH (r27)
                                 ;
                                 ; Sorties : - conv (SRAM) valeur sur 8 bits qui correspond au pixel à allumer
                                 ;		    - conv2 (SRAM) positionnement en X
                                 ;			- convB (SRAM) positionnement en Y
                                 ;--------------------------------
                                 .macro placePosPerso[]				;converti la position xy du personnage pour faire un test à l'affichage sur l'ecran
                                 	lds		reg_screen,pos_x
                                 	mov		reg_calcul1,reg_screen	;test Y
                                 	andi	reg_screen,7
                                 	ldi		XL,LOW(Table)			;table de conversion 2^(8-X) = Y
                                 	ldi		XH,HIGH(Table)
                                 	add		XL,reg_screen			;test X
                                 	ld		reg_screen,X
                                 	sts		conv,reg_screen
                                 
                                 	ldi		reg_screen,255			;conversion des positions par 8 pixels
                                 	cpi		reg_calcul1,8
                                 	brlo	END_PERSO
                                 	cpi		reg_calcul1,16
                                 	ldi		reg_screen,191
                                 	brlo	END_PERSO
                                 	ldi		reg_screen,127
                                 END_PERSO:
                                 	lds		reg_calcul1,pos_y
                                 	sub		reg_screen,reg_calcul1	;affectation de la SRAM
                                 	sts		convB,reg_screen
                                 	lds		reg_calcul1,pos_x
                                 	ldi		reg_screen,7
                                 	cpi		reg_calcul1,8
                                 	brlo	END_PERSO2
                                 	cpi		reg_calcul1,16
                                 	ldi		reg_screen,6
                                 	brlo	END_PERSO2
                                 	ldi		reg_screen,5
                                 END_PERSO2:
                                 	sts		conv2,reg_screen
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : SetPosPerso[]
                                 ;
                                 ; Description : allume le pixel de la position du personnage
                                 ;
                                 ; Entrée : - r17 (reg_screen) variable de l'écran
                                 ;		   - r28 (reg_calcul1) variable temporaire
                                 ;		   - r24 (reg_spi) registre de réception des données de la mémoire SPI
                                 ;		   - r21 (reg_cpt1) compteur d'affichage Y
                                 ;		   - r22 (reg_cpt2) compteur d'affichage X
                                 ;		   - PosX (SRAM) 0xFF pour iniber la fonction
                                 ;		   - conv (SRAM) valeur sur 8 bits qui correspond au pixel à allumer
                                 ;		   - conv2 (SRAM) positionnement en X
                                 ;		   - convB (SRAM) positionnement en Y
                                 ;
                                 ; Sorties : - si(PosX != 0xFF) (reg_spi | conv)
                                 ;--------------------------------
                                 .macro SetPosPerso[]				;affiche le point à l'endroit calculé
                                 	lds		reg_calcul1,pos_x
                                 	cpi		reg_calcul1,255
                                 	breq	END_SetPerso
                                 	lds		reg_screen,conv2
                                 	cp		reg_cpt2,reg_screen		;comparaison en X
                                 	brne	END_SetPerso
                                 	lds		reg_screen,convB
                                 	andi	reg_screen,0x3F
                                 	cp		reg_cpt1,reg_screen		;comparaison en Y
                                 	brne	END_SetPerso
                                 	lds		reg_screen,conv
                                 	or		reg_spi,reg_screen		;affectation
                                 END_SetPerso:
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : ClearPosPerso[]
                                 ;
                                 ; Description : éteint le pixel de la position du personnage
                                 ;
                                 ; Entrée : - r17 (reg_screen) variable de l'écran
                                 ;		   - r28 (reg_calcul1) variable temporaire
                                 ;		   - r24 (reg_spi) registre de réception des données de la mémoire SPI
                                 ;		   - r21 (reg_cpt1) compteur d'affichage Y
                                 ;		   - r22 (reg_cpt2) compteur d'affichage X
                                 ;		   - PosX (SRAM) 0xFF pour iniber la fonction
                                 ;		   - conv (SRAM) valeur sur 8 bits qui correspond au pixel à allumer
                                 ;		   - conv2 (SRAM) positionnement en X
                                 ;		   - convB (SRAM) positionnement en Y
                                 ;
                                 ; Sorties : - reg_spi & ~conv
                                 ;--------------------------------
                                 .macro ClearPosPerso[]				;efface le point à l'endroit calculé
                                 	lds		reg_screen,conv2
                                 	cp		reg_cpt2,reg_screen		;comparaison en X
                                 	brne	END_ClearPerso
                                 	lds		reg_screen,convB
                                 	andi	reg_screen,0x3F
                                 	cp		reg_cpt1,reg_screen		;comparaison en Y
                                 	brne	END_ClearPerso
                                 	lds		reg_screen,conv
                                 	com		reg_screen
                                 	and		reg_spi,reg_screen		;affectation
                                 END_ClearPerso:
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : SCREEN_Init
                                 ;
                                 ; Description : intialise l'écran
                                 ;
                                 ; Entrée : - r17 (reg_screen) variable de gestion de l'écran
                                 ;
                                 ; Sorties : appel les macros "Enable[]" et "RS_set[]" [screen.asm]
                                 ;--------------------------------
                                 SCREEN_Init:
0000d3 9ac3                      	sbi		PORTB,3					;set E and clear RS
0000d4 98c2                      	cbi		PORTB,2
0000d5 e31f                      	ldi		reg_screen,63			;instruction de début de l'écran pour activer l'affichage
0000d6 bb15                      	out		PORTC,reg_screen
0000d7 98c3
0000d8 ef1a
0000d9 d003
0000da 9ac3                      	Enable[]						;validation
0000db 9ac2                      	RS_set[]						;mode données
0000dc c110                      	rjmp	SCREEN_INC
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : tempo_US
                                 ;
                                 ; Description : crée une attente
                                 ;
                                 ; Entrée : - r17 (reg_cpt3) variable de comptage
                                 ;
                                 ; Sorties : X
                                 ;--------------------------------
                                 tempo_US:							;boucle de temporisation
0000dd 951a                      	dec		reg_cpt3
0000de 0000                      	nop
0000df f7e9                      	brne	tempo_US
0000e0 9508                      	ret
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : writeFullSreen
                                 ;
                                 ; Description : affiche 1k mémoire EEPROM SPI sur l'écran
                                 ;
                                 ; Entrée : - r17 (reg_screen) variable de l'écran
                                 ;		   - r21 (reg_cpt1) compteur d'affichage Y
                                 ;		   - r22 (reg_cpt2) compteur d'affichage X
                                 ;		   - r19 (reg_addrL) variable de positionnement dans la mémoire SPI (LOW)
                                 ;		   - r20 (reg_addrH) variable de positionnement dans la mémoire SPI (HIGH)
                                 ;		   - r24 (reg_spi) registre de réception des données de la mémoire SPI
                                 ;
                                 ; Sorties : appel les macros "placePosPerso[]", "screenR[]", "SetPosY[]", "SetPosX[]", "ScreenWrite[]", "screenL[]", "SetPosPerso[]" et "ClearPosPerso[]" [screen.asm]
                                 ;--------------------------------
                                 writeFullSreen:						;fonction d'affichage de la mémoire SPI vers l'écran
0000e1 9110 0074
0000e3 2fc1
0000e4 7017
0000e5 e6a7
0000e6 e0b0
0000e7 0fa1
0000e8 911c
0000e9 9310 006f
0000eb ef1f
0000ec 30c8
0000ed f020
0000ee 31c0
0000ef eb1f
0000f0 f008
0000f1 e71f
0000f2 91c0 0075
0000f4 1b1c
0000f5 9310 0070
0000f7 91c0 0074
0000f9 e017
0000fa 30c8
0000fb f020
0000fc 31c0
0000fd e016
0000fe f008
0000ff e015
000100 9310 0071                 	placePosPerso[]
000102 9ac1
000103 98c0                      	screenR[]						;set side screen
000104 e060                      	ldi		reg_cpt2,0				;reset var
                                 loop1:
000105 e050                      	ldi		reg_cpt1,0
000106 e010                      	ldi		reg_screen,0			;set pos Y = 0
000107 98c2
000108 6410
000109 bb15
00010a 98c3
00010b ef1a
00010c dfd0
00010d 9ac3
00010e 9ac2                      	SetPosY[]
00010f 2f16                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
000110 98c2
000111 6b18
000112 bb15
000113 98c3
000114 ef1a
000115 dfc7
000116 9ac3
000117 9ac2                      	SetPosX[]
                                 loop2:
000118 dfaf                      	rcall	Read_Mem				;lecture de la mémoire spi
000119 2f18                      	mov		reg_screen,reg_spi
00011a bb15
00011b 98c3
00011c ef1a
00011d dfbf
00011e 9ac3                      	ScreenWrite[]					;écriture sur l'écran
00011f 9533                      	inc		reg_addrL				;incrément de l'adresse LOW
000120 3030                      	cpi		reg_addrL,0
000121 f409                      	brne	addr_carry1				;test du carry
000122 9543                      	inc		reg_addrH
                                 addr_carry1:
                                 
000123 9553                      	inc		reg_cpt1				;incrémente le compteur 1
000124 ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
000125 cff2                      	rjmp	loop2
                                 
000126 9563                      	inc		reg_cpt2				;incrémente le compteur 2
000127 ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
000128 cfdc                      	rjmp	loop1
                                 
000129 9ac0
00012a 98c1                      	screenL[]						;set side screen
00012b e060                      	ldi		reg_cpt2,0				;reset var
                                 loop3:
00012c e050                      	ldi		reg_cpt1,0
00012d e010                      	ldi		reg_screen,0			;set pos Y = 0
00012e 98c2
00012f 6410
000130 bb15
000131 98c3
000132 ef1a
000133 dfa9
000134 9ac3
000135 9ac2                      	SetPosY[]
000136 2f16                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
000137 98c2
000138 6b18
000139 bb15
00013a 98c3
00013b ef1a
00013c dfa0
00013d 9ac3
00013e 9ac2                      	SetPosX[]
                                 loop4:
00013f df88                      	rcall	Read_Mem				;lecture de la mémoire spi
000140 3078                      	cpi		reg_cptT0,8
000141 f468                      	brsh	PRINT
000142 9110 0071
000144 1761
000145 f449
000146 9110 0070
000148 731f
000149 1751
00014a f421
00014b 9110 006f
00014d 9510
00014e 2381                      	ClearPosPerso[]
                                 PRINT:
00014f 3078                      	cpi		reg_cptT0,8
000150 f080                      	brlo	PRINT1
000151 91c0 0074
000153 3fcf
000154 f061
000155 9110 0071
000157 1761
000158 f441
000159 9110 0070
00015b 731f
00015c 1751
00015d f419
00015e 9110 006f
000160 2b81                      	SetPosPerso[]
                                 PRINT1:
000161 2f18                      	mov		reg_screen,reg_spi
000162 bb15
000163 98c3
000164 ef1a
000165 df77
000166 9ac3                      	ScreenWrite[]					;écriture sur l'écran
000167 9533                      	inc		reg_addrL				;incrémente l'adresse LOW
000168 3030                      	cpi		reg_addrL,0
000169 f409                      	brne	addr_carry2				;test du carry
00016a 9543                      	inc		reg_addrH
                                 addr_carry2:
                                 
00016b 9553                      	inc		reg_cpt1				;incrémente le compteur 1
00016c ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
00016d cfd1                      	rjmp	loop4
                                 
00016e 9563                      	inc		reg_cpt2				;incrémente le compteur 2
00016f ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
000170 cfbb                      	rjmp	loop3
000171 9508                      	ret
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : clearFullSreen
                                 ;
                                 ; Description : efface l'écran
                                 ;
                                 ; Entrée : - r17 (reg_screen) variable de l'écran
                                 ;		   - r21 (reg_cpt1) compteur d'affichage Y
                                 ;		   - r22 (reg_cpt2) compteur d'affichage X
                                 ;
                                 ; Sorties : appel les macros "screenR[]", "SetPosY[]", "SetPosX[]", "ScreenWrite[]" et "screenL[]" [screen.asm]
                                 ;--------------------------------
                                 clearFullSreen:						;fonction pour effacer l'écran (ressemble beaucoup à "writeFullSreen")
000172 9ac1
000173 98c0                      	screenR[]						;set side screen
000174 e060                      	ldi		reg_cpt2,0				;reset var
                                 loop5:
000175 e050                      	ldi		reg_cpt1,0
000176 e010                      	ldi		reg_screen,0			;set pos Y = 0
000177 98c2
000178 6410
000179 bb15
00017a 98c3
00017b ef1a
00017c df60
00017d 9ac3
00017e 9ac2                      	SetPosY[]
00017f 2f16                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
000180 98c2
000181 6b18
000182 bb15
000183 98c3
000184 ef1a
000185 df57
000186 9ac3
000187 9ac2                      	SetPosX[]
                                 loop6:
000188 e010                      	ldi		reg_screen,0
000189 bb15
00018a 98c3
00018b ef1a
00018c df50
00018d 9ac3                      	ScreenWrite[]					;écriture sur l'écran
                                 
00018e 9553                      	inc		reg_cpt1				;incrémente le compteur 1
00018f ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
000190 cff7                      	rjmp	loop6
                                 
000191 9563                      	inc		reg_cpt2				;incrémente le compteur 2
000192 ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
000193 cfe1                      	rjmp	loop5
                                 
000194 9ac0
000195 98c1                      	screenL[]						;set side screen
000196 e060                      	ldi		reg_cpt2,0				;reset var
                                 loop7:
000197 e050                      	ldi		reg_cpt1,0
000198 e010                      	ldi		reg_screen,0			;set pos Y = 0
000199 98c2
00019a 6410
00019b bb15
00019c 98c3
00019d ef1a
00019e df3e
00019f 9ac3
0001a0 9ac2                      	SetPosY[]
0001a1 2f16                      	mov		reg_screen,reg_cpt2		;set pos X = reg_cpt2
0001a2 98c2
0001a3 6b18
0001a4 bb15
0001a5 98c3
0001a6 ef1a
0001a7 df35
0001a8 9ac3
0001a9 9ac2                      	SetPosX[]
                                 loop8:
0001aa e010                      	ldi		reg_screen,0
0001ab bb15
0001ac 98c3
0001ad ef1a
0001ae df2e
0001af 9ac3                      	ScreenWrite[]					;écriture sur l'écran
                                 
0001b0 9553                      	inc		reg_cpt1				;incrémente le compteur 1
0001b1 ff56                      	sbrs	reg_cpt1,6				;test de fin de boucle = 64
0001b2 cff7                      	rjmp	loop8
                                 
0001b3 9563                      	inc		reg_cpt2				;incrémente le copteur 2
0001b4 ff63                      	sbrs	reg_cpt2,3				;test de fin de boucle = 8
0001b5 cfe1                      	rjmp	loop7
0001b6 9508                      	ret
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : writeChar
                                 ;
                                 ; Description : efface l'écran
                                 ;
                                 ; Entrée : - r17 (reg_screen) variable de l'écran
                                 ;		   - r21 (reg_cpt1) compteur d'affichage Y
                                 ;		   - r22 (reg_cpt2) compteur d'affichage X
                                 ;		   - C_Wait (SRAM) caractère d'attente du ping
                                 ;		   - XL (r26) registre interne pour se déplacer dans la SRAM
                                 ;		   - XH (r27)
                                 ;		   - r19 (reg_addrL) variable de positionnement dans la mémoire SPI (LOW)
                                 ;
                                 ; Sorties : appel les macros "SetPosY[]", "SetPosX[]", "ScreenWrite[]" et "screenL[]" [screen.asm]
                                 ;--------------------------------
                                 writeChar:							;affiche un caractère de la SRAM sur l'écran
0001b7 9ac0
0001b8 98c1                      	screenL[]
0001b9 e01a                      	ldi		reg_screen,10
0001ba 0f13                      	add		reg_screen,reg_addrL	;placement sur l'écran
0001bb 98c2
0001bc 6410
0001bd bb15
0001be 98c3
0001bf ef1a
0001c0 df1c
0001c1 9ac3
0001c2 9ac2                      	SetPosY[]
0001c3 e014                      	ldi		reg_screen,4
0001c4 98c2
0001c5 6b18
0001c6 bb15
0001c7 98c3
0001c8 ef1a
0001c9 df13
0001ca 9ac3
0001cb 9ac2                      	SetPosX[]
0001cc e6a2                      	ldi		XL,LOW(C_Wait)			;placement dans la SRAM
0001cd e0b0                      	ldi		XH,HIGH(C_Wait)
0001ce 911d                      	ld		reg_screen,X+			;affichage du caractère en 5*8
0001cf bb15
0001d0 98c3
0001d1 ef1a
0001d2 df0a
0001d3 9ac3                      	ScreenWrite[]
0001d4 911d                      	ld		reg_screen,X+
0001d5 bb15
0001d6 98c3
0001d7 ef1a
0001d8 df04
0001d9 9ac3                      	ScreenWrite[]
0001da 911d                      	ld		reg_screen,X+
0001db bb15
0001dc 98c3
0001dd ef1a
0001de defe
0001df 9ac3                      	ScreenWrite[]
0001e0 911d                      	ld		reg_screen,X+
0001e1 bb15
0001e2 98c3
0001e3 ef1a
0001e4 def8
0001e5 9ac3                      	ScreenWrite[]
0001e6 911d                      	ld		reg_screen,X+
0001e7 bb15
0001e8 98c3
0001e9 ef1a
0001ea def2
0001eb 9ac3                      	ScreenWrite[]
0001ec 9508                      SCREEN_INC:
                                 	.include "char_array.asm"
                                 
                                 ; Programme du jeu entre 2 Gameboy connectées en bluetooth (électif bas niveau) [fichier de gestion de l'affichage]
                                 ;
                                 ; Fichier : char_array.asm
                                 ;
                                 ; Microcontrôleur Atmega16A
                                 ;
                                 ; Version atmel studio : 7.0.2397
                                 ; Created: 25/10/2019 13:42:48
                                 ;
                                 ; Author : jsoudier01 & atessier01
                                 ; INSA Strasbourg
                                 ;********************************
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : Init_char_array
                                 ;
                                 ; Description : fonction d'initialisation des variables de la mémoire SRAM
                                 ;
                                 ; Entrée : - r29 (reg_init) variable temporaire
                                 ;
                                 ; Sorties : C_Wait (SRAM) caractère d'attente du ping
                                 ;			Table (SRAM) table de conversion pour faire clignoter le pixel de la position du personnage
                                 ;			dead (SRAM) variable d'état du personnage
                                 ;--------------------------------
                                 Init_char_array:
0001ed e6a2                      	ldi		XL,LOW(C_Wait)			;load '#'
0001ee e0b0                      	ldi		XH,HIGH(C_Wait)
0001ef e1d4                      	ldi		reg_init,0x14
0001f0 93dd                      	st		X+,reg_init
0001f1 efdf                      	ldi		reg_init,0xFF
0001f2 93dd                      	st		X+,reg_init
0001f3 e1d4                      	ldi		reg_init,0x14
0001f4 93dd                      	st		X+,reg_init
0001f5 efdf                      	ldi		reg_init,0xFF
0001f6 93dd                      	st		X+,reg_init
0001f7 e1d4                      	ldi		reg_init,0x14
0001f8 93dc                      	st		X,reg_init
0001f9 e6a7                      	ldi		XL,LOW(Table)			;load table decod bin to hex (Y = 2^(8-X))
0001fa e0b0                      	ldi		XH,HIGH(Table)
0001fb e8d0                      	ldi		reg_init,0x80
0001fc 93dd                      	st		X+,reg_init
0001fd e4d0                      	ldi		reg_init,0x40
0001fe 93dd                      	st		X+,reg_init
0001ff e2d0                      	ldi		reg_init,0x20
000200 93dd                      	st		X+,reg_init
000201 e1d0                      	ldi		reg_init,0x10
000202 93dd                      	st		X+,reg_init
000203 e0d8                      	ldi		reg_init,0x08
000204 93dd                      	st		X+,reg_init
000205 e0d4                      	ldi		reg_init,0x04
000206 93dd                      	st		X+,reg_init
000207 e0d2                      	ldi		reg_init,0x02
000208 93dd                      	st		X+,reg_init
000209 e0d1                      	ldi		reg_init,0x01
00020a 93dc                      	st		X,reg_init
00020b e0d1                      	ldi		reg_init,1
00020c 93d0 0072                 	sts		dead,reg_init			;personnage en vie
00020e c000                      	rjmp	CHAR_INC
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : Fenetre_Debut[]
                                 ;
                                 ; Description : affiche la fenêtre de la vue principale
                                 ;
                                 ; Entrée : - r19 (reg_addrL) variable de positionnement dans la mémoire SPI (LOW)
                                 ;		   - r20 (reg_addrH) variable de positionnement dans la mémoire SPI (HIGH)
                                 ;		   - r29 (reg_init) varaible de positionnement du curseur sur l'écran
                                 ;
                                 ; Sorties : appel la fonction "writeFullSreen" [screen.asm]
                                 ;--------------------------------
                                 .macro Fenetre_Debut[]				;affichage de "JOUER / RESEAU / MENTION"
                                 	ldi		reg_addrL,0x00
                                 	ldi		reg_addrH,0x60
                                 	add		reg_addrH,reg_init
                                 	rcall	writeFullSreen
                                 
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : CONNECTED[]
                                 ;
                                 ; Description : affiche la fenêtre de la vue connectée
                                 ;
                                 ; Entrée : - r19 (reg_addrL) variable de positionnement dans la mémoire SPI (LOW)
                                 ;		   - r20 (reg_addrH) variable de positionnement dans la mémoire SPI (HIGH)
                                 ;
                                 ; Sorties : appel la fonction "writeFullSreen" [screen.asm]
                                 ;--------------------------------
                                 .macro CONNECTED[]					;affichage de "connecte"
                                 	ldi		reg_addrL,0x00
                                 	ldi		reg_addrH,0x6C
                                 	rcall	writeFullSreen
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : NO_CONNECTED[]
                                 ;
                                 ; Description : affiche la fenêtre de la vue non connectée
                                 ;
                                 ; Entrée : - r19 (reg_addrL) variable de positionnement dans la mémoire SPI (LOW)
                                 ;		   - r20 (reg_addrH) variable de positionnement dans la mémoire SPI (HIGH)
                                 ;
                                 ; Sorties : appel la fonction "writeFullSreen" [screen.asm]
                                 ;--------------------------------
                                 .macro NO_CONNECTED[]				;affichage de "non connecte"
                                 	ldi		reg_addrL,0x00
                                 	ldi		reg_addrH,0x70
                                 	rcall	writeFullSreen
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : MENTION_MA[]
                                 ;
                                 ; Description : affiche la fenêtre de la vue des mentions
                                 ;
                                 ; Entrée : - r19 (reg_addrL) variable de positionnement dans la mémoire SPI (LOW)
                                 ;		   - r20 (reg_addrH) variable de positionnement dans la mémoire SPI (HIGH)
                                 ;
                                 ; Sorties : appel la fonction "writeFullSreen" [screen.asm]
                                 ;--------------------------------
                                 .macro MENTION_MA[]					;affichage des mentions
                                 	ldi		reg_addrL,0x00
                                 	ldi		reg_addrH,0x74
                                 	rcall	writeFullSreen
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : CONN1[]
                                 ;
                                 ; Description : affiche le premier caractère du chargement de page de ping
                                 ;
                                 ; Entrée : - r19 (reg_addrL) variable de positionnement dans la mémoire SPI (LOW)
                                 ;
                                 ; Sorties : appel les fonctions "clearFullSreen" et "writeChar" [screen.asm]
                                 ;--------------------------------
                                 .macro CONN1[]						;affichage du chargement pendant le test de connection
                                 	rcall	clearFullSreen
                                 	ldi		reg_addrL,0
                                 	rcall	writeChar
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : CONN2[]
                                 ;
                                 ; Description : affiche le deuxième caractère du chargement de page de ping
                                 ;
                                 ; Entrée : - r19 (reg_addrL) variable de positionnement dans la mémoire SPI (LOW)
                                 ;
                                 ; Sorties : appel la fonction "writeChar" [screen.asm]
                                 ;--------------------------------
                                 .macro CONN2[]						;affichage du chargement pendant le test de connection suite
                                 	ldi		reg_addrL,6
                                 	rcall	writeChar
                                 .endmacro
                                 
                                 ;--------------------------------
                                 ; Nom de la macro : CONN3[]
                                 ;
                                 ; Description : affiche le troisième caractère du chargement de page de ping
                                 ;
                                 ; Entrée : - r19 (reg_addrL) variable de positionnement dans la mémoire SPI (LOW)
                                 ;
                                 ; Sorties : appel la fonction "writeChar" [screen.asm]
                                 ;--------------------------------
                                 .macro CONN3[]						;affichage du chargement pendant le test de connection suite 2
                                 	ldi		reg_addrL,12
                                 	rcall	writeChar
                                 .endmacro
                                 CHAR_INC:
                                 	.include "csgo.asm"
                                 
                                 ; Programme du jeu entre 2 Gameboy connectées en bluetooth (électif bas niveau) [fichier de gestion du jeu]
                                 ;
                                 ; Fichier : csgo.asm
                                 ;
                                 ; Microcontrôleur Atmega16A
                                 ;
                                 ; Version atmel studio : 7.0.2397
                                 ; Created: 25/10/2019 13:42:48
                                 ;
                                 ; Author : jsoudier01 & atessier01
                                 ; INSA Strasbourg
                                 ;********************************
                                 
                                 csgo_init:
00020f e001                      	ldi		r16,0x01
000210 9300 0075                 	sts		pos_y,r16					;intialisation de la position du personnage
000212 ef0f                      	ldi		r16,255
000213 9300 0074                 	sts		pos_x,r16
000215 c0cb                      	rjmp	CSGO_INC
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Mouvement du personnage
                                 Avancer:
000216 9130 0076                 	lds		reg_addrL,numero_mapL		;on se replace à la case actuelle dans la mémoire
000218 9140 0077                 	lds		reg_addrH,numero_mapH
00021a 9100 007a                 	lds		r16,orientation
00021c 0f30                      	add		reg_addrL,r16				;on se place à la case mémoire qui contient l'adresse de la case qui est en face de nous
00021d deaa                      	rcall	Read_Mem					;cette adresse vaut 0xFF si on est face à un mur
00021e 2f08                      	mov		r16,reg_spi
00021f 3f0f                      	cpi		r16,255						;si la donnée ne vaut pas 0xFF
000220 f409                      	brne	Mouvement_Confirme			;alors on confirme le mouvement et cette donnée devient la prochaine adresse
000221 c147                      	rjmp	Jeu_En_Cours				;sinon on revient au Jeu_En_Cours
                                 Mouvement_Confirme:
000222 e018                      	ldi		r17,0x08					;on calcule l'adresse de la nouvelle case à partir de son numéro: addr = 0x4800 + 8*n
000223 9f01                      	mul		r16,r17
000224 9200 0076                 	sts		numero_mapL,r0
000226 9210 0077                 	sts		numero_mapH,r1
000228 e408                      	ldi		r16,0x48
000229 9150 0077                 	lds		reg_cpt1, numero_mapH
00022b 0f50                      	add		reg_cpt1,r16
00022c 9350 0077                 	sts		numero_mapH,reg_cpt1
00022e 9140 0077                 	lds		reg_addrH,numero_mapH		;on stocke la nouvelle position en x y de la mémoire spi vers la ram et on l'enovie par bluetooth
000230 9130 0076                 	lds		reg_addrL,numero_mapL
000232 5f3a                      	subi	reg_addrL,-0x06
000233 de94                      	rcall	Read_Mem					;on récupère la position x
000234 9380 0074                 	sts		pos_x,reg_spi
000236 2fe8                      	mov		reg_TX,reg_spi				;on envoie la position x par bluetooth
000237 68e0                      	ori		reg_TX,0x80					;code pour la position x
000238 de11                      	rcall	USART_Transmit
000239 5f3f                      	subi	reg_addrL,-0x01
00023a de8d                      	rcall	Read_Mem					;on récupère la position y
00023b 9380 0075                 	sts		pos_y,reg_spi
00023d 2fe8                      	mov		reg_TX,reg_spi				;on envoie la position y par bluetooth
00023e 64e0                      	ori		reg_TX,0x40					;code pour la position y
00023f de0a                      	rcall	USART_Transmit
000240 c010                      	rjmp	Affichage_Image
                                 Tourner_Gauche:
000241 9100 007a                 	lds		r16,orientation				;on augmente d'un l'orientation
000243 5f0f                      	subi	r16,-0x01
000244 fd02                      	sbrc	r16,2
000245 e000                      	ldi		r16,0x00
000246 9300 007a                 	sts		orientation,r16
000248 c008                      	rjmp	Affichage_Image
                                 Tourner_Droite:
000249 9100 007a                 	lds		r16,orientation				;on diminue d'un l'orientation
00024b 5001                      	subi	r16,0x01
00024c fd07                      	sbrc	r16,7
00024d e003                      	ldi		r16,0x03
00024e 9300 007a                 	sts		orientation,r16
000250 c000                      	rjmp	Affichage_Image
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Mise à jour de l'affichage
                                 Affichage_Image:
000251 9130 0076                 	lds		reg_addrL,numero_mapL		;on se replace à la case actuelle dans la mémoire
000253 9140 0077                 	lds		reg_addrH,numero_mapH
000255 9100 007a                 	lds		r16,orientation				;on se place à la bonne orientation
000257 3000                      	cpi		r16,0x00
000258 f031                      	breq	Orientation_Nord
000259 3001                      	cpi		r16,0x01
00025a f059                      	breq	Orientation_Ouest
00025b 3002                      	cpi		r16,0x02
00025c f071                      	breq	Orientation_Sud
00025d 3003                      	cpi		r16,0x03
00025e f099                      	breq	Orientation_Est
                                 Orientation_Nord:
00025f 5f3c                      	subi	reg_addrL,-0x04				;placement à la vue Nord-Ouest
000260 de67                      	rcall	Read_Mem					;lecture de la mémoire spi
000261 2f08                      	mov		r16,reg_spi
000262 e110                      	ldi		r17,0x10					;sélection du quartet de l'orientation Nord
000263 9f10                      	mul		r17,r16
000264 2d01                      	mov		r16,r1
000265 c011                      	rjmp	Determination_Image_1
                                 Orientation_Ouest:
000266 5f3c                      	subi	reg_addrL,-0x04				;placement à la vue Nord-Ouest
000267 de60                      	rcall	Read_Mem					;lecture de la mémoire spi
000268 2f08                      	mov		r16,reg_spi
000269 700f                      	andi	r16,0x0F					;sélection du quartet de l'orientation Ouest
00026a c00c                      	rjmp	Determination_Image_1
                                 Orientation_Sud:
00026b 5f3b                      	subi	reg_addrL,-0x05				;placement à la vue Sud-Est
00026c de5b                      	rcall	Read_Mem					;lecture de la mémoire spi
00026d 2f08                      	mov		r16,reg_spi
00026e e110                      	ldi		r17,0x10					;sélection du quartet de l'orientation Sud
00026f 9f10                      	mul		r17,r16
000270 2d01                      	mov		r16,r1
000271 c005                      	rjmp	Determination_Image_1
                                 Orientation_Est:
000272 5f3b                      	subi	reg_addrL,-0x05				;placement à la vue Sud-Est
000273 de54                      	rcall	Read_Mem					;lecture de la mémoire spi
000274 2f08                      	mov		r16,reg_spi
000275 700f                      	andi	r16,0x0F					;sélection du quartet de l'orientation Est
000276 c000                      	rjmp	Determination_Image_1
                                 Determination_Image_1:
000277 3008                      	cpi		r16,0x08					;on vérifie si l'image correspond au code 8 (mur très proche)
000278 f411                      	brne	Determination_Image_2		;sinon, on calcule à quelle image correspond le code
000279 e004                      	ldi		r16,0x04					;si on est contre un mur proche, on charge le code 0x04
00027a c046                      	rjmp	Adversaire_Pas_OK			;on va au code adversaire pas ok pour éviter un bug de victoire en tapant dans un mur
                                 Determination_Image_2:
00027b e014                      	ldi		r17,0x04					;on regarde à quelle image correspond le code
00027c 9f10                      	mul		r17,r16
00027d 2d00                      	mov		r16,r0
00027e 5f08                      	subi	r16,-0x08
00027f c004                      	rjmp	DETECTION_ADVERSAIRE
                                 CREATION_IMAGE:
000280 e030                      	ldi		reg_addrL,0x00				;on va chercher l'image correspondant au code dans la mémoire et on l'affiche
000281 2f40                      	mov		reg_addrH,r16
000282 de5e                      	rcall	writeFullSreen
000283 c0e5                      	rjmp	Jeu_En_Cours
                                 
                                 DETECTION_ADVERSAIRE:
000284 9150 007a                 	lds		reg_cpt1,orientation		;on se place à la bonne orientation
000286 3050                      	cpi		reg_cpt1,0x00
000287 f031                      	breq	Detection_Nord
000288 3051                      	cpi		reg_cpt1,0x01
000289 f061                      	breq	Detection_Ouest
00028a 3052                      	cpi		reg_cpt1,0x02
00028b f091                      	breq	Detection_Sud
00028c 3053                      	cpi		reg_cpt1,0x03
00028d f0c1                      	breq	Detection_Est
                                 Detection_Nord:							;on doit avoir pos_y = pos_y_adv et pos_x = pos_x_adv + 1
00028e 9150 0074                 	lds		reg_cpt1,pos_x			
000290 9160 0078                 	lds		reg_cpt2,pos_x_adv
000292 5f6f                      	subi	reg_cpt2,-0x01
000293 1756                      	cp		reg_cpt1,reg_cpt2
000294 f0c9                      	breq	CI_X_OK  
000295 c02b                      	rjmp	Adversaire_Pas_OK
                                 Detection_Ouest:						;on doit avoir pos_x = pos_x_adv et pos_y = pos_y_adv + 1
000296 9150 0075                 	lds		reg_cpt1,pos_y
000298 9160 0079                 	lds		reg_cpt2,pos_y_adv
00029a 5f6f                      	subi	reg_cpt2,-0x01
00029b 1756                      	cp		reg_cpt1,reg_cpt2
00029c f0c1                      	breq	CI_Y_OK
00029d c023                      	rjmp	Adversaire_Pas_OK
                                 Detection_Sud:							;on doit avoir pos_y = pos_y_adv et pos_x = pos_x_adv - 1
00029e 9150 0074                 	lds		reg_cpt1,pos_x
0002a0 9160 0078                 	lds		reg_cpt2,pos_x_adv
0002a2 5061                      	subi	reg_cpt2,0x01
0002a3 1756                      	cp		reg_cpt1,reg_cpt2
0002a4 f049                      	breq	CI_X_OK
0002a5 c01b                      	rjmp	Adversaire_Pas_OK
                                 Detection_Est:							;on doit avoir pos_x = pos_x_adv et pos_y = pos_y_adv - 1
0002a6 9150 0075                 	lds		reg_cpt1,pos_y
0002a8 9160 0079                 	lds		reg_cpt2,pos_y_adv
0002aa 5061                      	subi	reg_cpt2,0x01
0002ab 1756                      	cp		reg_cpt1,reg_cpt2
0002ac f041                      	breq	CI_Y_OK
0002ad c013                      	rjmp	Adversaire_Pas_OK
                                 CI_X_OK:
0002ae 9150 0075                 	lds		reg_cpt1,pos_y
0002b0 9160 0079                 	lds		reg_cpt2,pos_y_adv
0002b2 1756                      	cp		reg_cpt1,reg_cpt2
0002b3 f041                      	breq	Adversaire_OK
0002b4 c00c                      	rjmp	Adversaire_Pas_OK
                                 CI_Y_OK:
0002b5 9150 0074                 	lds		reg_cpt1,pos_x
0002b7 9160 0078                 	lds		reg_cpt2,pos_x_adv
0002b9 1756                      	cp		reg_cpt1,reg_cpt2
0002ba f009                      	breq	Adversaire_OK
0002bb c005                      	rjmp	Adversaire_Pas_OK
                                 Adversaire_OK:
0002bc e051                      	ldi		reg_cpt1,0x01
0002bd 9350 007b                 	sts		adv_ok,reg_cpt1
0002bf 5e00                      	subi	r16,-0x20
0002c0 cfbf                      	rjmp	CREATION_IMAGE
                                 Adversaire_Pas_OK:
0002c1 e050                      	ldi		reg_cpt1,0x00
0002c2 9350 007b                 	sts		adv_ok,reg_cpt1
0002c4 cfbb                      	rjmp	CREATION_IMAGE
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Attaque de la cible
                                 Attaquer:
0002c5 e000                      	ldi		r16,0
0002c6 9300 0061                 	sts		num_son2,r16
                                 
0002c8 9100 007b                 	lds		r16,adv_ok
0002ca ff00                      	sbrs	r16,0
0002cb c09d                      	rjmp	Jeu_En_Cours
                                 ON_ENVOIE_LA_SAUCE:
0002cc e0e0                      	ldi		reg_TX,0x00			;on envoie par bluetooth le signal de fin de jeu
0002cd dd7c                      	rcall	USART_Transmit
0002ce e030                      	ldi		reg_addrL,0x00		;on affiche l'écran de victoire
0002cf e54c                      	ldi		reg_addrH,0x5C
0002d0 de10                      	rcall	writeFullSreen
0002d1 ef1f                      	ldi		reg_cpt3,255
0002d2 d0c9                      	rcall	tempo_MS
0002d3 ef1f                      	ldi		reg_cpt3,255
0002d4 d0c7                      	rcall	tempo_MS
0002d5 ef1f                      	ldi		reg_cpt3,255
0002d6 d0c5                      	rcall	tempo_MS
0002d7 ef1f                      	ldi		reg_cpt3,255
0002d8 d0c3                      	rcall	tempo_MS
0002d9 ef1f                      	ldi		reg_cpt3,255
0002da d0c1                      	rcall	tempo_MS
0002db ef1f                      	ldi		reg_cpt3,255
0002dc d0bf                      	rcall	tempo_MS
0002dd ef1f                      	ldi		reg_cpt3,255
0002de d0bd                      	rcall	tempo_MS
0002df 940c 032b                 	jmp	GAME
                                 	
                                 CSGO_INC:
                                 	
0002e1 9478                      	sei										;activation des interruptions
                                 
0002e2 e0d8                      	ldi		reg_init,8						;initialisation du curseur
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : loopMain
                                 ;
                                 ; Description : boucle de la vue principale
                                 ;
                                 ; Entrées : - r29 (reg_init) pointeur à l'écran
                                 ;		    - r22 (reg_cpt2) varaible temporaire
                                 ;
                                 ; Sorties : appel des macros "bHa[]" [timer.asm], "bBa[]" [timer.asm], "bA[]" [timer.asm] et "Fenetre_Debut[]" [screen.asm]
                                 ;--------------------------------
                                 loopMain:									;premier menu
0002e3 2f6d                      	mov		reg_cpt2,reg_init				;récupération de la position du curseur
0002e4 9bcc                      	bHa[]									;test du bouton "vers le haut"
0002e5 c009                      	rjmp	UP
0002e6 9bca                      	bBa[]									;test du bouton "vers le bas"
0002e7 c00e                      	rjmp	DOWN
                                 END:
0002e8 e030
0002e9 e640
0002ea 0f4d
0002eb ddf5                      	Fenetre_Debut[]							;affichage des caractères de la page principale
0002ec 9bce                      	bA[]									;test du bouton validation
0002ed c00f                      	rjmp	CHOIX
                                 END_CHOIX:
0002ee cff4                      	rjmp	loopMain						;boucle infini
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : UP
                                 ;
                                 ; Description : gestion du déplacement du curseur vers le haut
                                 ;
                                 ; Entrée : - r29 (reg_init) pointeur à l'écran
                                 ;
                                 ; Sortie : - r29 (reg_init)
                                 ;--------------------------------
                                 UP:
0002ef 30d8                      	cpi		reg_init,8						;test si on est tout en haut
0002f0 f3b9                      	breq	END
0002f1 30d4                      	cpi		reg_init,4						;test si on est au milieu
0002f2 e0d8                      	ldi		reg_init,8
0002f3 f3a1                      	breq	END
0002f4 e0d4                      	ldi		reg_init,4
0002f5 cff2                      	rjmp	END
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : DOWN
                                 ;
                                 ; Description : gestion du déplacement du curseur vers le bas
                                 ;
                                 ; Entrée : - r29 (reg_init) pointeur à l'écran
                                 ;
                                 ; Sortie : - r29 (reg_init)
                                 ;--------------------------------
                                 DOWN:
0002f6 30d0                      	cpi		reg_init,0						;idem
0002f7 f381                      	breq	END
0002f8 30d4                      	cpi		reg_init,4
0002f9 e0d0                      	ldi		reg_init,0
0002fa f369                      	breq	END
0002fb e0d4                      	ldi		reg_init,4
0002fc cfeb                      	rjmp	END
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : DOWN
                                 ;
                                 ; Description : gestion du choix sélectionné à l'écran
                                 ;
                                 ; Entrée : - r29 (reg_init) pointeur à l'écran
                                 ;
                                 ; Sorties : appel des fonctions "RESEAU", "MENTION" et "GAME" [main.asm]
                                 ;--------------------------------
                                 CHOIX:
0002fd 30d4                      	cpi		reg_init,4						;test du curseur pour aiguiller la fonction
0002fe f061                      	breq	RESEAU
0002ff 30d0                      	cpi		reg_init,0
000300 f011                      	breq	MENTION
000301 e0d0                      	ldi		reg_init,0
000302 c028                      	rjmp	GAME
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : MENTION
                                 ;
                                 ; Description : affichage des mentions
                                 ;
                                 ; Entrée : X
                                 ;
                                 ; Sorties : - r29 (reg_init) pointeur à l'écran pour revenir vers l'écran d'acceuil
                                 ;			appel des macros "MENTION_MA[]" [char_array.asm] et "bB[]" [timer.asm]
                                 ;--------------------------------
                                 MENTION:
000303 e030
000304 e744
000305 dddb                      	MENTION_MA[]							;affichage des mentions
000306 9bcd                      	bB[]
000307 e0d8                      	ldi		reg_init,8
000308 9bcd                      	bB[]
000309 cfd9                      	rjmp	loopMain
00030a cff8                      	rjmp	MENTION
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : RESEAU
                                 ;
                                 ; Description : affichage du test réseau (ping)
                                 ;
                                 ; Entrée : X
                                 ;
                                 ; Sorties : - r29 (reg_init) pointeur à l'écran pour revenir vers l'écran d'acceuil
                                 ;			appel des macros "CONN1[]" [char_array.asm], "CONN2[]" [char_array.asm], "CONN3[]" [char_array.asm], "NO_CONNECTED[]" [char_array.asm], "CONNECTED[]" [char_array.asm] et "bB[]" [timer.asm]
                                 ;			appel des fonctions "USART_Transmit" [uart.asm] et "tempo_MS" [main.asm]
                                 ;--------------------------------
                                 	RESEAU:									;boucle du test de connection réseau
00030b de66
00030c e030
00030d dea9                      	CONN1[]
                                 
00030e e0e1                      	ldi		reg_TX,1						;ping en UART
00030f dd3a                      	rcall	USART_Transmit
                                 
000310 e036
000311 dea5                      	CONN2[]
                                 
000312 ef1f                      	ldi		reg_cpt3,255
000313 d088                      	rcall	tempo_MS
                                 
000314 e03c
000315 dea1                      	CONN3[]
                                 
                                 loopReseau1:
                                 
000316 fdd1                      	sbrc	reg_init,1
000317 c00e                      	rjmp	loopReseau2
                                 
000318 3021                      	cpi		reg_RX,1						;résultat du ping
000319 f041                      	breq	loopReseau3
                                 
00031a e0e1                      	ldi		reg_TX,1						;ping en UART
00031b dd2e                      	rcall	USART_Transmit
                                 
00031c ef1f                      	ldi		reg_cpt3,255
00031d d07e                      	rcall	tempo_MS
                                 
00031e e030
00031f e740
000320 ddc0                      	NO_CONNECTED[]
                                 
000321 c004                      	rjmp	loopReseau2
                                 
                                 loopReseau3:
                                 
000322 e0d2                      	ldi		reg_init,2						;une fois connecté on le reste !!!
000323 e030
000324 e64c
000325 ddbb                      	CONNECTED[]
                                 
                                 
                                 loopReseau2:
000326 9bcd                      	bB[]
000327 e0d8                      	ldi		reg_init,8
000328 9bcd                      	bB[]
000329 cfb9                      	rjmp	loopMain
00032a cfeb                      	rjmp	loopReseau1
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : GAME
                                 ;
                                 ; Description : affichage de la page de lancement du jeu
                                 ;
                                 ; Entrées : - r19 (reg_addrL) variable de positionnement dans la mémoire SPI (LOW)
                                 ;		    - r20 (reg_addrH) variable de positionnement dans la mémoire SPI (HIGH)
                                 ;
                                 ; Sorties : - r29 (reg_init) pointeur à l'écran pour revenir vers l'écran d'acceuil
                                 ;			appel des macros "bHa[]" [timer.asm], "bBa[]" [timer.asm], "bA[]" [timer.asm] et "bB[]" [timer.asm]
                                 ;			appel des fonctions "writeFullSreen" [screen.asm], "Lancement_Jeu" [main.asm] et "loopMain" [main.asm]
                                 ;--------------------------------
                                 GAME:
00032b 9bcc                      	bHa[]									;choix du mode de jeu
00032c e0d0                      	ldi		reg_init,0
00032d 9bca                      	bBa[]
00032e e0d4                      	ldi		reg_init,4
                                 
00032f e030                      	ldi		reg_addrL,0x00					;affichage en fonction du curseur
000330 e748                      	ldi		reg_addrH,0x78
000331 0f4d                      	add		reg_addrH,reg_init
000332 ddae                      	rcall	writeFullSreen
                                 
000333 9bce                      	bA[]
000334 c005                      	rjmp	Lancement_Jeu					;lancement du jeu (1 mode disponible pour l'instant
                                 
000335 9bcd                      	bB[]									;test de retour à l'écran principal
000336 e0d8                      	ldi		reg_init,8
000337 9bcd                      	bB[]
000338 cfaa                      	rjmp	loopMain
000339 cff1                      	rjmp	GAME
                                 
                                 ;;a faire
                                 Lancement_Jeu:								;on détermine dans quel mode de jeu on est
00033a e000                      	ldi		r16,0x00						;placement orientation Nord
00033b 9300 007a                 	sts		orientation,r16
00033d 30d0                      	cpi		reg_init,0
00033e f009                      	breq	MME
00033f c012                      	rjmp	Cible
                                 MME:
000340 dd75                      	rcall	rand
000341 9100 0073                 	lds		r16,pos_rand					;on met la valeur entre 0 et 128
000343 e018                      	ldi		r17,0x08						;on calcule l'adresse de la case de la cible à partir de son numéro: addr = 0x4800 + 8*rand_pos
000344 9f01                      	mul		r16,r17
000345 9200 0076                 	sts		numero_mapL,r0
000347 2d01                      	mov		r16,r1
000348 5b08                      	subi	r16,-0x48
000349 9300 0077                 	sts		numero_mapH,r16
00034b 91e0 0076                 	lds		reg_TX,numero_mapL
00034d dcfc                      	rcall	USART_Transmit
00034e 91e0 0077                 	lds		reg_TX,numero_mapH
000350 dcf9                      	rcall	USART_Transmit
000351 ceff                      	rjmp	Affichage_Image
                                 Cible:
000352 e000                      	ldi		r16,0x00						;placement du joueur à la case 1 de la mémoire
000353 9300 0076                 	sts		numero_mapL,r16
000355 e408                      	ldi		r16,0x48
000356 9300 0077                 	sts		numero_mapH,r16
                                 
000358 dd5d                      	rcall	rand
000359 9100 0073                 	lds		r16,pos_rand
00035b e018                      	ldi		r17,0x08						;on calcule l'adresse de la case de la cible à partir de son numéro: addr = 0x4800 + 8*rand_pos
00035c 9f01                      	mul		r16,r17
00035d 2d30                      	mov		reg_addrL,r0
00035e 2d41                      	mov		reg_addrH,r1
00035f 5b48                      	subi	reg_addrH,-0x48
000360 5f3a                      	subi	reg_addrL,-0x06
000361 dd66                      	rcall	Read_Mem						;on récupère la position x
000362 9380 0078                 	sts		pos_x_adv,reg_spi
000364 5f3f                      	subi	reg_addrL,-0x01
000365 dd62                      	rcall	Read_Mem						;on récupère la position y
000366 9380 0079                 	sts		pos_y_adv,reg_spi
                                 
000368 cee8                      	rjmp	Affichage_Image					;début du jeu
                                 
                                 ;; a faire
                                 Jeu_En_Cours:								;boucle du jeu en cours
000369 30d0                      	cpi		reg_init,0
00036a f161                      	breq	POS
                                 Jeu_Continue:
00036b 9b82                      	bSta[]									;on retourne au menu si le bouton "start"
00036c ef0f                      	ldi		r16,0xff
00036d 9b82                      	bSta[]
00036e 9300 0074                 	sts		pos_x,r16
000370 9b82                      	bSta[]
000371 cfb9                      	rjmp	GAME
000372 9bc9                      	bGa[]								
000373 cecd                      	rjmp	Tourner_Gauche
000374 9bcb                      	bDr[]
000375 ced3                      	rjmp	Tourner_Droite
000376 9bcc                      	bHa[]
000377 ce9e                      	rjmp	Avancer
000378 9bce                      	bA[]
000379 cf4b                      	rjmp	Attaquer
00037a 9110 0072                 	lds		reg_cpt3,dead					;on teste si on est mort
00037c 3010                      	cpi		reg_cpt3,0
00037d f4b1                      	brne	en_vie
00037e e030                      	ldi		reg_addrL,0x00					;on affiche l'écran de défaite
00037f e548                      	ldi		reg_addrH,0x58
000380 dd60                      	rcall	writeFullSreen
000381 ef1f                      	ldi		reg_cpt3,255					;on attend un peu
000382 d019                      	rcall	tempo_MS
000383 ef1f                      	ldi		reg_cpt3,255
000384 d017                      	rcall	tempo_MS
000385 ef1f                      	ldi		reg_cpt3,255
000386 d015                      	rcall	tempo_MS
000387 ef1f                      	ldi		reg_cpt3,255
000388 d013                      	rcall	tempo_MS
000389 ef1f                      	ldi		reg_cpt3,255
00038a d011                      	rcall	tempo_MS
00038b ef1f                      	ldi		reg_cpt3,255
00038c d00f                      	rcall	tempo_MS
00038d ef1f                      	ldi		reg_cpt3,255
00038e d00d                      	rcall	tempo_MS
00038f e001                      	ldi		r16,0x01
000390 9300 0072                 	sts		dead,r16
000392 940c 032b                 	jmp	GAME								;et on revient au menu
                                 en_vie:
000394 e614                      	ldi		reg_cpt3,100					;sinon on reboucle sur le jeu
000395 d006                      	rcall	tempo_MS
000396 ceba                      	rjmp	Affichage_Image
                                 POS:
000397 92b0 0078
000399 92a0 0079                 	PosPerso[]
00039b cfcf                      	rjmp Jeu_Continue
                                 
                                 ;--------------------------------
                                 ; Nom de la fonction : tempo_MS
                                 ;
                                 ; Description : crée une attente (dure approximativement 127.49us*reg_cpt3)
                                 ;
                                 ; Entrées : - r24 (reg_spi) variable de comptage
                                 ;		    - r17 (reg_cpt3) variable de comptage
                                 ;
                                 ; Sortie : X
                                 ;--------------------------------
                                 tempo_MS:
00039c ef8f                      	ldi	reg_spi, 255
                                 boucletempo_MS:
00039d 0000                      	nop
00039e 958a                      	dec	reg_spi
00039f f7e9                      	brne boucletempo_MS
0003a0 951a                      	dec	reg_cpt3
0003a1 f7d1                      	brne tempo_MS
0003a2 9508                      	ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16A" register use summary:
x  :  19 y  :   0 z  :   0 r0 :   4 r1 :   5 r2 :   7 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   2 r11:   2 r12:   3 
r13:   0 r14:   0 r15:   0 r16:  68 r17: 135 r18:   9 r19:  30 r20:  18 
r21:  38 r22:  35 r23:   6 r24:  26 r25:  54 r26:   5 r27:   4 r28:  10 
r29:  64 r30:  20 r31:   0 
Registers used: 22 out of 35 (62.9%)

"ATmega16A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   6 adiw  :   0 and   :   1 
andi  :   8 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  24 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 brlt  :   0 brmi  :   0 
brne  :  15 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  39 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :  10 cpc   :   0 
cpi   :  34 cpse  :   0 dec   :   3 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  12 inc   :  13 jmp   :   5 
ld    :   6 ldd   :   0 ldi   : 170 lds   :  42 lpm   :   0 lsl   :   0 
lsr   :   1 mov   :  26 movw  :   0 mul   :   6 muls  :   0 mulsu :   0 
neg   :   0 nop   :   2 or    :   1 ori   :  15 out   :  61 pop   :   0 
push  :   0 rcall :  75 ret   :   9 reti  :   6 rjmp  :  68 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  42 sbic  :   2 sbis  :  22 
sbiw  :   0 sbr   :   0 sbrc  :   3 sbrs  :   9 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  13 std   :   0 sts   :  33 
sub   :   1 subi  :  19 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 39 out of 113 (34.5%)

"ATmega16A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000746   1784      0   1784   16384  10.9%
[.dseg] 0x000060 0x00007c      0     28     28    1024   2.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
