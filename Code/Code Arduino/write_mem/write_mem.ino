#define DATAOUT 11//MOSI
#define DATAIN  12//MISO 
#define SPICLOCK  13//sck
#define SLAVESELECT 10//ss

//opcodes
#define WREN  6
#define WRDI  4
#define RDSR  5
#define WRSR  1
#define READ  3
#define WRITE 2

unsigned char plan_mem[] = {0, 0, 16, 1, 136, 17, 0, 0, 1, 0, 1, 2, 132, 129, 0, 1, 2, 1, 2, 3, 129, 129, 0, 2, 3, 2, 3, 4, 129, 129, 0, 3, 4, 3, 4, 5, 129, 129, 0, 4, 5, 4, 5, 6, 129, 129, 0, 5, 6, 5, 6, 7, 129, 130, 0, 6, 7, 6, 17, 7, 129, 24, 0, 7, 8, 8, 8, 9, 136, 129, 0, 9, 9, 8, 9, 10, 128, 129, 0, 10, 10, 9, 10, 11, 129, 129, 0, 11, 11, 10, 11, 12, 129, 129, 0, 12, 12, 11, 12, 13, 129, 131, 0, 13, 13, 12, 18, 14, 129, 17, 0, 14, 14, 13, 14, 15, 133, 130, 0, 15, 15, 14, 19, 15, 129, 24, 0, 16, 0, 16, 20, 16, 40, 72, 1, 0, 7, 17, 25, 17, 72, 24, 1, 7, 13, 18, 30, 18, 104, 40, 1, 14, 15, 19, 31, 19, 72, 72, 1, 16, 16, 20, 20, 21, 24, 130, 2, 0, 21, 20, 33, 21, 130, 24, 2, 1, 22, 22, 34, 23, 136, 17, 2, 3, 23, 22, 23, 24, 132, 128, 2, 4, 24, 23, 24, 24, 129, 136, 2, 5, 17, 25, 35, 25, 24, 24, 2, 7, 26, 26, 36, 26, 136, 24, 2, 9, 27, 27, 37, 28, 136, 17, 2, 11, 28, 27, 28, 29, 132, 129, 2, 12, 29, 28, 29, 30, 129, 132, 2, 13, 18, 29, 30, 30, 17, 136, 2, 14, 19, 31, 31, 32, 24, 130, 2, 16, 32, 31, 38, 32, 130, 24, 2, 17, 21, 33, 40, 33, 72, 40, 3, 1, 22, 34, 41, 34, 40, 88, 3, 3, 25, 35, 44, 35, 24, 24, 3, 7, 26, 36, 45, 36, 8, 88, 3, 9, 27, 37, 47, 37, 40, 40, 3, 11, 32, 38, 51, 38, 72, 40, 3, 17, 39, 39, 52, 40, 136, 20, 4, 0, 33, 39, 40, 40, 20, 136, 4, 1, 34, 41, 53, 42, 24, 17, 4, 3, 42, 41, 42, 43, 134, 130, 4, 4, 43, 42, 54, 43, 129, 24, 4, 5, 35, 44, 55, 44, 24, 24, 4, 7, 36, 45, 56, 46, 24, 17, 4, 9, 46, 45, 46, 47, 134, 132, 4, 10, 37, 46, 47, 47, 17, 136, 4, 11, 48, 48, 57, 48, 136, 24, 4, 13, 49, 49, 58, 50, 136, 17, 4, 15, 50, 49, 50, 51, 132, 132, 4, 16, 38, 50, 51, 51, 17, 136, 4, 17, 39, 52, 59, 52, 40, 24, 5, 0, 41, 53, 61, 53, 56, 40, 5, 3, 43, 54, 62, 54, 72, 24, 5, 5, 44, 55, 63, 55, 24, 72, 5, 7, 45, 56, 65, 56, 56, 40, 5, 9, 48, 57, 68, 57, 8, 104, 5, 13, 49, 58, 70, 58, 40, 104, 5, 15, 52, 59, 73, 59, 24, 24, 6, 0, 60, 60, 74, 61, 136, 20, 6, 2, 53, 60, 61, 61, 20, 136, 6, 3, 54, 62, 75, 62, 24, 24, 6, 5, 55, 63, 63, 64, 24, 129, 6, 7, 64, 63, 64, 65, 130, 132, 6, 8, 56, 64, 65, 65, 17, 136, 6, 9, 66, 66, 76, 67, 136, 17, 6, 11, 67, 66, 67, 68, 132, 133, 6, 12, 57, 67, 68, 69, 17, 129, 6, 13, 69, 68, 69, 70, 131, 133, 6, 14, 58, 69, 70, 71, 17, 129, 6, 15, 71, 70, 71, 72, 131, 130, 6, 16, 72, 71, 77, 72, 129, 24, 6, 17, 59, 73, 78, 73, 24, 24, 7, 0, 60, 74, 79, 74, 40, 72, 7, 2, 62, 75, 81, 75, 24, 72, 7, 5, 66, 76, 87, 76, 40, 56, 7, 11, 72, 77, 91, 77, 72, 24, 7, 17, 73, 78, 92, 78, 24, 24, 8, 0, 74, 79, 79, 80, 24, 130, 8, 2, 80, 79, 93, 80, 130, 24, 8, 3, 75, 81, 81, 82, 24, 129, 8, 5, 82, 81, 82, 83, 130, 129, 8, 6, 83, 82, 83, 84, 129, 129, 8, 7, 84, 83, 84, 85, 129, 131, 8, 8, 85, 84, 94, 86, 129, 17, 8, 9, 86, 85, 86, 87, 133, 134, 8, 10, 76, 86, 95, 87, 17, 8, 8, 11, 88, 88, 96, 89, 136, 17, 8, 13, 89, 88, 89, 90, 132, 130, 8, 14, 90, 89, 97, 90, 129, 72, 8, 15, 77, 91, 99, 91, 24, 56, 8, 17, 78, 92, 100, 92, 24, 88, 9, 0, 80, 93, 103, 93, 72, 104, 9, 3, 85, 94, 108, 94, 104, 40, 9, 9, 87, 95, 95, 95, 88, 136, 9, 11, 88, 96, 109, 96, 40, 24, 9, 13, 90, 97, 97, 98, 72, 129, 9, 15, 98, 97, 98, 99, 130, 134, 9, 16, 91, 98, 110, 99, 17, 24, 9, 17, 92, 100, 111, 101, 24, 17, 10, 0, 101, 100, 101, 102, 134, 129, 10, 1, 102, 101, 102, 103, 129, 133, 10, 2, 93, 102, 103, 104, 17, 129, 10, 3, 104, 103, 104, 105, 131, 128, 10, 4, 105, 104, 105, 105, 129, 136, 10, 5, 106, 106, 112, 107, 136, 17, 10, 7, 107, 106, 107, 108, 132, 132, 10, 8, 94, 107, 108, 108, 17, 136, 10, 9, 96, 109, 115, 109, 24, 40, 10, 13, 99, 110, 118, 110, 88, 40, 10, 17, 100, 111, 119, 111, 56, 24, 11, 0, 106, 112, 123, 112, 40, 88, 11, 7, 113, 113, 126, 114, 136, 17, 11, 11, 114, 113, 114, 115, 132, 132, 11, 12, 109, 114, 115, 115, 17, 136, 11, 13, 116, 116, 127, 117, 136, 17, 11, 15, 117, 116, 117, 118, 132, 132, 11, 16, 110, 117, 118, 118, 17, 136, 11, 17, 111, 119, 128, 119, 24, 24, 12, 0, 120, 120, 130, 121, 136, 33, 12, 3, 121, 120, 121, 122, 132, 130, 12, 4, 122, 121, 131, 122, 129, 24, 12, 5, 112, 123, 132, 124, 24, 1, 12, 7, 124, 123, 124, 125, 134, 130, 12, 8, 125, 124, 133, 125, 129, 24, 12, 9, 113, 126, 134, 126, 40, 24, 12, 11, 116, 127, 137, 127, 40, 104, 12, 15, 119, 128, 140, 128, 24, 24, 13, 0, 129, 129, 141, 130, 136, 20, 13, 2, 120, 129, 130, 130, 36, 136, 13, 3, 122, 131, 142, 131, 72, 24, 13, 5, 123, 132, 132, 132, 56, 136, 13, 7, 125, 133, 143, 133, 72, 24, 13, 9, 126, 134, 144, 134, 24, 24, 13, 11, 135, 135, 135, 136, 136, 129, 13, 13, 136, 135, 136, 137, 128, 133, 13, 14, 127, 136, 137, 138, 17, 129, 13, 15, 138, 137, 138, 139, 131, 130, 13, 16, 139, 138, 145, 139, 129, 24, 13, 17, 128, 140, 146, 140, 24, 24, 14, 0, 129, 141, 147, 141, 40, 24, 14, 2, 131, 142, 149, 142, 24, 104, 14, 5, 133, 143, 153, 143, 24, 40, 14, 9, 134, 144, 154, 144, 24, 24, 14, 11, 139, 145, 159, 145, 72, 56, 14, 17, 140, 146, 160, 146, 24, 24, 15, 0, 141, 147, 161, 147, 24, 24, 15, 2, 148, 148, 148, 149, 136, 133, 15, 4, 142, 148, 149, 150, 16, 129, 15, 5, 150, 149, 150, 151, 131, 129, 15, 6, 151, 150, 151, 152, 129, 129, 15, 7, 152, 151, 152, 153, 129, 132, 15, 8, 143, 152, 153, 153, 17, 136, 15, 9, 144, 154, 162, 154, 24, 24, 15, 11, 155, 155, 163, 156, 136, 17, 15, 13, 156, 155, 156, 157, 132, 129, 15, 14, 157, 156, 157, 158, 129, 129, 15, 15, 158, 157, 158, 159, 129, 134, 15, 16, 145, 158, 164, 159, 17, 24, 15, 17, 146, 160, 165, 160, 24, 72, 16, 0, 147, 161, 167, 161, 24, 104, 16, 2, 154, 162, 176, 162, 24, 104, 16, 11, 155, 163, 178, 163, 40, 40, 16, 13, 159, 164, 181, 164, 88, 40, 16, 17, 160, 165, 165, 166, 24, 129, 17, 0, 166, 165, 166, 167, 130, 133, 17, 1, 161, 166, 167, 168, 17, 129, 17, 2, 168, 167, 168, 169, 131, 129, 17, 3, 169, 168, 169, 170, 129, 129, 17, 4, 170, 169, 170, 171, 129, 129, 17, 5, 171, 170, 171, 172, 129, 129, 17, 6, 172, 171, 172, 173, 129, 129, 17, 7, 173, 172, 173, 174, 129, 129, 17, 8, 174, 173, 174, 175, 129, 129, 17, 9, 175, 174, 175, 176, 129, 133, 17, 10, 162, 175, 176, 177, 17, 129, 17, 11, 177, 176, 177, 178, 131, 132, 17, 12, 163, 177, 178, 178, 17, 136, 17, 13, 179, 179, 179, 180, 136, 129, 17, 15, 180, 179, 180, 181, 128, 132, 17, 16, 164, 180, 181, 181, 17, 136, 17, 17

};
int compteur = 0;
int adresse = 0x4800;

char spi_transfer(volatile char data) {
  SPDR = data;                    // Start the transmission
  while (!(SPSR & (1<<SPIF)))     // Wait the end of the transmission
  {};
  return SPDR;                    // return the received byte
}

void writeMem(int address) {
  //plan_mem
  for(int i=0;i<(int)(sizeof(plan_mem)/64)+1;i++) {
    digitalWrite(SLAVESELECT,LOW);
    spi_transfer(WREN);
    digitalWrite(SLAVESELECT,HIGH);
    delay(10);
    digitalWrite(SLAVESELECT,LOW);
    //Serial.print("a = ");
    //Serial.println(address);
    spi_transfer(WRITE); //write instruction
    spi_transfer((char)(address>>8));   //send MSByte address first
    spi_transfer((char)(address));      //send LSByte address
    address += 64;
    for(int j=0;j<64;j++) {
      //Serial.println(j+i*64);
      spi_transfer(plan_mem[j+i*64]); //write data byte
    }
    digitalWrite(SLAVESELECT,HIGH);
    delay(10);
  }
  
  digitalWrite(SLAVESELECT,LOW);
  spi_transfer(WRDI); //write disable
  digitalWrite(SLAVESELECT,HIGH);
  delay(10);
}

unsigned char readMem(int address) {
  int data;
  digitalWrite(SLAVESELECT,LOW);
  spi_transfer(READ); //transmit read opcode
  spi_transfer((char)(address>>8));   //send MSByte address first
  spi_transfer((char)(address));      //send LSByte address
  data = spi_transfer(0xFF); //get data byte
  digitalWrite(SLAVESELECT,HIGH); //release chip, signal end transfer
  //Serial.println((unsigned char)(data));
  return (unsigned char)(data);
}

void setup() {
  Serial.begin(9600);
  Serial.println(adresse);
  Serial.println(sizeof(plan_mem));

  pinMode(DATAOUT, OUTPUT);
  pinMode(DATAIN, INPUT);
  pinMode(SPICLOCK,OUTPUT);
  pinMode(SLAVESELECT,OUTPUT);
  digitalWrite(SLAVESELECT,HIGH); //disable device

  SPCR = (1<<SPE)|(1<<MSTR);
  //clr=SPSR;
  //clr=SPDR;
  delay(10);

  writeMem(adresse);

  int testeur = 1, cpt_err = 0;

  while(testeur) {
    int test0 = readMem(adresse+compteur);
    /*Serial.print(test0);
    Serial.print(" <= ");
    Serial.println(plan_mem[compteur]);*/
    if(test0 != plan_mem[compteur]) {
      Serial.print("error addr = ");
      Serial.println(compteur);
      cpt_err++;
    }
    compteur++;
    if(compteur > sizeof(plan_mem)-1) {
      compteur = 0;
      testeur = 0;
      Serial.println("----------------------");
      if(!cpt_err) {
        Serial.println("OK");
      }
    }
  }
  
}

void loop() {
  
}
